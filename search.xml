<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[API 网关的安全]]></title>
      <url>http://itliusir.com/2018/API-Gateway-Safety/</url>
      <content type="html"><![CDATA[<p>摘要: 本篇文章是总结工作中遇到的安全问题<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="API-网关的安全"><a href="#API-网关的安全" class="headerlink" title="API 网关的安全"></a>API 网关的安全</h1><h2 id="XSRF-CSRF"><a href="#XSRF-CSRF" class="headerlink" title="XSRF/CSRF"></a>XSRF/CSRF</h2><p><strong>跨站请求伪造(Cross-site request forgery)</strong>是一种挟制用户在当前已登录的web程序上执行非本意的操作的攻击方法，简单来说就是你在浏览器打开了两个页面，其中一个页面通过窃取另一个页面的cookie来发送伪造请求</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>某一家银行转账操作的url地址为：<a href="http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName" target="_blank" rel="external">http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</a></p>
<p>藏身于恶意网站的某代码片段：<code>&lt;img src=&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;&gt;</code></p>
<p>若账户人员为Alice的用户访问了恶意网站，其登录信息尚未过期，就会丢失1000资金</p>
<p>CSRF攻击并不是直接获取用户账户控制权，而是欺骗用户浏览器，让其已用户的名义执行操作</p>
<h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><ol>
<li><code>HTTP</code>头<code>Referer</code>字段，这个字段用以标明请求来源于哪个地址，看其<code>url</code>是否与要请求地址位于同一域名下</li>
<li>添加校验<code>Token</code>,恶意网站的请求不带Token无法通过校验</li>
</ol>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p><strong>跨站脚本(Cross-site scripting)</strong>是一种网站应用程序的安全漏洞攻击，是代码注入的一种。</p>
<h3 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a>防御措施</h3><ol>
<li><p>过滤特殊字符(转义)</p>
</li>
<li><p>使用浏览器自带的xss-filter</p>
<ul>
<li>X-XSS-Protection</li>
</ul>
</li>
<li><p>CSP(Content Security Policy)</p>
<ul>
<li><p>如限制script src Content-Security-Policy: script-src ‘self’</p>
</li>
<li><p>frame-ancestors 限制了当前页面可以被哪些页面以iframe,frame,object等方式加载 </p>
</li>
<li><p>Github的CSP参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Content-Security-Policy: default-src &apos;none&apos;; </div><div class="line">base-uri &apos;self&apos;;</div><div class="line">block-all-mixed-content;</div><div class="line">connect-src &apos;self&apos; uploads.github.com status.github.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com wss://live.github.com;</div><div class="line">font-src assets-cdn.github.com;</div><div class="line">form-action &apos;self&apos; github.com gist.github.com;</div><div class="line">frame-ancestors &apos;none&apos;;</div><div class="line">frame-src render.githubusercontent.com;</div><div class="line">img-src &apos;self&apos; data: assets-cdn.github.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com; manifest-src &apos;self&apos;;</div><div class="line">media-src &apos;none&apos;;</div><div class="line">script-src assets-cdn.github.com;</div><div class="line">style-src &apos;unsafe-inline&apos; assets-cdn.github.com</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>X-Frame-Options:SAMEORIGIN 这个页面只允许同源页面加载</p>
</li>
<li><p>Http-Only 保护cookie</p>
</li>
</ol>
<h2 id="JWT的安全"><a href="#JWT的安全" class="headerlink" title="JWT的安全"></a>JWT的安全</h2><p>JWT一种基于JSON的、用于在网络上声明某种主张的令牌，由三部分组成，<strong>头部</strong>、<strong>消息体</strong>与<strong>签名</strong>。</p>
<p>前端将JWT通过HTTP Header发送给服务端可以有效防护CSRF，但是服务端既然无状态，Token在客户端存储位置就是一个问题</p>
<h3 id="存放位置"><a href="#存放位置" class="headerlink" title="存放位置"></a>存放位置</h3><ul>
<li><p>存在Cookie,要使用Http-Only 保护cookie</p>
</li>
<li><p>存在Local Storage 无法防止XSS</p>
<p>LocalStorage 的API通过JavaScript提供的，攻击者可以通过XSS攻击窃取信息，如Token等</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(localStorage.length)&#123;</div><div class="line">  <span class="keyword">for</span>(i <span class="keyword">in</span> localStorage) &#123;</div><div class="line">    <span class="built_in">console</span>.log(localStorage.getItem(i));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
            <category> SpringCloud </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM Specification notes 1 -Jvm Structure]]></title>
      <url>http://itliusir.com/2018/JVM-Specification-notes-1/</url>
      <content type="html"><![CDATA[<p>摘要: Jvm Structure<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h2 id="Java-虚拟机结构"><a href="#Java-虚拟机结构" class="headerlink" title="Java 虚拟机结构"></a>Java 虚拟机结构</h2><h3 id="Class文件格式"><a href="#Class文件格式" class="headerlink" title="Class文件格式"></a>Class文件格式</h3><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>原始类型(基本类型)<ul>
<li>数值类型{整数[byte8 short16 int32 long64 char16]、浮点[float32 double64]}</li>
<li>布尔类型{boolean8}</li>
<li>returnAddress类型{表示一条字节码指令的操作码}</li>
</ul>
</li>
<li>引用类型</li>
</ul>
<blockquote>
<p>编译器应当在编译期间尽最大努力完成可能的类型检查，使得虚拟机在运行期间无需进行这些操作</p>
<p>编译器会在编译期或运行期会将byte和short类型的数据带符号扩展（Sign-Extend）为相应的int类型数据，将boolean和char类型数据零位扩展（Zero-Extend）为相应的int类型数据</p>
</blockquote>
<h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><p>程序运行期间会使用到的运行时数据区</p>
<h4 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h4><p>每一个虚拟机线程都有自己的PC寄存器，保存Java虚拟机正在执行的字节码指令的地址</p>
<h4 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h4><p>栈与线程同时创建，存储局部变量与一些过程结果的地方</p>
<h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><p>可供各条线程共享的运行时内存区域，也是供所有类实例和数组对象分配内存的区域</p>
<p>Java堆在虚拟机启动的时候就被创建，它存储了被自动内存管理系统所管理的各种对象，这些受管理的对象无需，也无法显式地被销毁    </p>
<h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>可供各条线程共享的运行时内存区域</p>
<p>方法区在虚拟机启动的时候被创建，存储了每一个类的结构信息，例如运行时常量池、字段和方法数据、构造函数和普通方法的字节码内容、还包括一些在类、实例、接口初始化时用到的特殊方法</p>
<blockquote>
<p>虽然方法区是堆的逻辑组成部分，但是简单的虚拟机实现可以选择在这个区域不实现垃圾收集</p>
</blockquote>
<h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>每一个类或接口的常量池的运行时表示形式，它包括了若干种不同的常量：从编译期可知的数值字面量到必须运行期解析后才能获得的方法或字段引用</p>
<blockquote>
<p>每一个运行时常量池都分配在Java虚拟机的方法区之中，在类和接口被加载到虚拟机后，对应的运行时常量池就被创建出来</p>
</blockquote>
<h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>如果支持本地方法栈，则会在线程创建的时候按线程分配</p>
<h3 id="栈帧-Frame"><a href="#栈帧-Frame" class="headerlink" title="栈帧(Frame)"></a>栈帧(Frame)</h3><p>用来存储数据和部分过程结果的数据结构，同时也被用来处理动态链接、方法返回值和异常分派</p>
<p>栈帧随着方法调用而创建，随着方法结束而销毁，无论方法是正常完成还是异常完成</p>
<p>栈帧的存储空间分配在Java虚拟机栈</p>
<p>每一个栈帧都有自己的局部变量表、操作数栈和指向当前方法所属的类的运行时常量池的引用</p>
<p>栈帧容量的大小仅仅取决于Java虚拟机的实现和方法调用时可被分配的内存</p>
<p>一条线程只有正在执行某个方法的栈帧是活动的，叫做当前栈帧，对应的方法叫当前方法，定义这个方法的类叫当前类。对局部变量表和操作数栈的各种操作，通常指的是当前栈帧进行的操作</p>
<blockquote>
<p>栈帧是线程本地私有的数据，不可能在一个栈帧之中引用另外一条线程的栈帧</p>
<p>如果当前方法调用了其他方法，或者当前方法执行结束，那这个方法的栈帧就不再是当前栈帧了。当一个新的方法被调用，则会新建一个栈帧并成为当前栈帧，当方法返回时会将结果（当前新的栈帧）返回给上一个栈帧，当前栈帧丢弃，上一个栈帧重新成为当前栈帧。</p>
</blockquote>
<h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><p>长度由编译期决定，存储于类和接口的二进制表示之中，既通过方法的Code属性保存及提供给栈帧使用</p>
<ul>
<li>一个局部变量可以保存类型boolean、byte、char、short、float、reference和returnAddress的数据</li>
<li>两个局部变量可以保存类型为long和double的数据</li>
</ul>
<p>当方法被调用时候，参数将会传递至从0开始的连续的局部变量表里。如果是实例方法被调用则第0个局部变量一定是this</p>
<blockquote>
<p>局部变量使用索引来进行定位访问，0-max</p>
<p>long和double这种需要两个局部变量的类型，索引取最小的那个局部变量。</p>
</blockquote>
<h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><p>同局部变量表，长度由编译期决定，存储于类和接口的二进制表示之中，既通过方法的Code属性保存及提供给栈帧使用</p>
<p>操作数栈所属的栈帧在刚刚被创建的时候，操作数栈是空的。</p>
<p>Java虚拟机提供一些字节码指令来从局部变量表或者对象实例的字段中复制常量或变量值到操作数栈中，也提供了一些指令用于从操作数栈取走数据、操作数据和把操作结果重新入栈。在方法调用的时候，操作数栈也用来准备调用方法的参数以及接收方法返回结果，例子参考<a href="http://itliusir.com/2018/JVM-Instruction-Execution-Flow/">初识jvm指令执行流程</a></p>
<blockquote>
<p>一个long或者double类型的数据会占用两个单位的栈深度，其他数据类型则会占用一个单位深度</p>
</blockquote>
<h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h4><p>在Class文件里面，描述一个方法调用了其他方法，或者访问其成员变量是通过符号引用来表示的，动态链接的作用就是将这些符号引用所表示的方法转换为实际方法的直接引用</p>
<p>类加载的过程中将要解析掉尚未被解析的符号引用，并且将变量访问转化为访问这些变量的存储结构所在的运行时内存位置的正确偏移量</p>
<blockquote>
<p>由于动态链接的存在，通过晚期绑定（Late Binding）使用的其他类的方法和变量在发生变化时，将不会对调用它们的方法构成影响</p>
</blockquote>
<h3 id="浮点算法"><a href="#浮点算法" class="headerlink" title="浮点算法"></a>浮点算法</h3><p>Java虚拟机采纳了《IEEE Standard for Binary Floating-Point Arithmetic》（ANSI/IEEE Std. 754-1985，New York）浮点算法规范中的部分子集</p>
<h4 id="Java虚拟机和IEEE-754中的浮点算法"><a href="#Java虚拟机和IEEE-754中的浮点算法" class="headerlink" title="Java虚拟机和IEEE 754中的浮点算法"></a>Java虚拟机和IEEE 754中的浮点算法</h4><ul>
<li><p>在Java虚拟机中的浮点操作在遇到非法操作，如被零除（Divison By Zero）、上限溢出（Overflow）、下限溢出（Underflow）和非精确（Inexact）时，不会抛出exception、trap或者其他IEEE 754异常情况中定义的信号。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> d = <span class="number">1</span>;</div><div class="line">System.out.println(d/<span class="number">0</span>); <span class="comment">//Infinity 非exception</span></div></pre></td></tr></table></figure>
</li>
<li><p>Java虚拟机里面，将浮点数转化为整型数是使用向零舍入(去尾操作)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> d = <span class="number">1.61</span>;</div><div class="line">System.out.println((<span class="keyword">int</span>)d);<span class="comment">//1 非2</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="初始化方法的特殊命名"><a href="#初始化方法的特殊命名" class="headerlink" title="初始化方法的特殊命名"></a>初始化方法的特殊命名</h3><ul>
<li><p><code>&lt;init&gt;</code></p>
<p>在Java虚拟机层面上，Java语言中的构造函数是以一个名为<code>&lt;init&gt;</code>的特殊实例初始化方法的形式出现的</p>
<p><code>&lt;init&gt;</code>这个方法名称是由编译器命名的，因为它并非一个合法的Java方法名字，不可能通过程序编码的方式实现。实例初始化方法只能在实例的初始化期间，通过Java虚拟机的<code>invokespecial</code>令来调用，只有在实例正在构造的时候，实例初始化方法才可以被调用访问</p>
</li>
<li><p><code>&lt;clinit&gt;</code></p>
<p>类或者接口是通过<code>&lt;clinit&gt;</code>方法完成初始化的，这个名字也是由编译器命名的，没有任何虚拟机字节码指令可以调用这个方法，只有在类的初始化阶段中会被虚拟机自身调用</p>
</li>
</ul>
<h3 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h3><p>抛异常的本质实际上是程序控制权的一种即时的、非局部（Nonlocal）的转换——从异常抛出的地方转换至处理异常的地方</p>
<ul>
<li><p>同步异常</p>
<p>当前线程执行的某个操作所导致的异常</p>
</li>
<li><p>异步异常</p>
<p>其他线程中出现的异常</p>
</li>
</ul>
<blockquote>
<p>由Java虚拟机执行的每一个方法都会配有零至多个异常处理器（Exception Handlers），异常处理器描述了其在方法代码中的有效作用范围（通过字节码偏移量范围来描述）、能处理的异常类型以及处理异常的代码所在的位置</p>
<p>当有异常被抛出时，Java虚拟机会搜索当前方法的包含的各个异常处理器，如果能找到可以处理该异常的异常处理器，则将代码控制权转向到异常处理器中描述的处理异常的分支之中</p>
</blockquote>
<h3 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h3><p>Java虚拟机的指令由一个字节长度的、代表着某种特定操作含义的操作码（Opcode）以及跟随其后的零至多个代表此操作所需参数的操作数（Operands）所构成。虚拟机中许多指令并不包含操作数，只有一个操作码。<br>如果忽略异常处理，那Java虚拟机的解释器使用下面这个伪代码的循环即可有效地工作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123; </div><div class="line">  自动计算PC寄存器以及从PC寄存器的位置取出操作码;</div><div class="line">  <span class="keyword">if</span> (存在操作数) 取出操作数;</div><div class="line">  执行操作码所定义的操作</div><div class="line">&#125; <span class="keyword">while</span> (处理下一次循环);</div></pre></td></tr></table></figure>
<p>如果要将一个16位长度的无符号整数使用两个无符号字节存储起来，如下所示</p>
<p><code>(byte1 &lt;&lt; 8) | byte2</code></p>
<h4 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h4><ul>
<li><p>xload</p>
<p>从局部变量加载到操作数栈</p>
</li>
<li><p>xstore</p>
<p>从操作数栈存储到局部变量表</p>
</li>
<li><p>xpush，xdc，xconst</p>
<p>将一个常量加载到操作数栈</p>
</li>
<li><p>wide</p>
<p>扩充局部变量表的访问索引</p>
</li>
</ul>
<h4 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h4><p>对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶</p>
<ul>
<li><p>整型数据运算</p>
<p>如：iadd，isub，imul，idiv</p>
</li>
<li><p>浮点型数据运算</p>
<p>如：fadd，fsub，fmul，fdiv</p>
</li>
</ul>
<h4 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h4><p>将两种Java虚拟机数值类型进行相互转换</p>
<ul>
<li><p>宽化类型转换</p>
<p>小范围类型向大范围类型的安全转换，无需显式的转换指令</p>
</li>
<li><p>窄化类型转换</p>
<p>(i2b，i2c，i2s，l2i，f2i，f2l，d2i，d2l，d2f)可能会导致转换结果产生不同的正负号、不同的数量级，数值丢失精度等</p>
</li>
</ul>
<blockquote>
<p>注意：</p>
<ol>
<li>浮点型转整型 NaN-&gt;0</li>
<li>尽管可能发生上限溢出、下限溢出和精度丢失等情况，但是Java虚拟机中数值类型的窄化转换永远不可能导致虚拟机抛出运行时异常</li>
</ol>
</blockquote>
<h4 id="对象创建与操作"><a href="#对象创建与操作" class="headerlink" title="对象创建与操作"></a>对象创建与操作</h4><ul>
<li>创建类实例：new</li>
<li>创建数组：newarray，anewarray，multianewarray</li>
<li>访问类字段(static)和实例字段(!static)：getfield，putfield，getstatic，putstatic</li>
<li>将一个数组元素加载到操作数栈：xaload</li>
<li>将一个操作数栈值储存到数组元素中：xastore</li>
<li>取数组长度的指令：arraylenth</li>
<li>检查类实例类型的指令：instanceof，checkcast</li>
</ul>
<h4 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h4><ul>
<li><p>条件分支</p>
<p>ifeq，iflt，ifle，ifne，ifgt，ifge，ifnull，ifnonnull，if_icmpeq，if_icmpne，if_icmplt，if_icmpgt，if_icmple，if_icmpge，if_acmpeq和if_acmpne</p>
</li>
<li><p>复合条件分支</p>
<p>tableswitch，lookupswitch</p>
</li>
<li><p>无条件分支</p>
<p>goto，goto_w，jsr，jsr_w，ret</p>
</li>
</ul>
<blockquote>
<p>各种类型的比较最终都会转化为int类型的比较操作：</p>
<p>boolean类型、byte类型、char类型和short类型的条件分支比较操作，都使用int类型的比较指令来完成。而对于long类型、float类型和double类型的条件分支比较操作，则会先执行相应类型的比较运算指令，运算指令会返回一个整形值到操作数栈中，随后再执行int类型的条件分支比较操作来完成整个分支跳转</p>
</blockquote>
<h4 id="方法调用与返回指令"><a href="#方法调用与返回指令" class="headerlink" title="方法调用与返回指令"></a>方法调用与返回指令</h4><ul>
<li><p>方法调用</p>
<p>invokevirtual(调用对象的实例方法)；</p>
<p>invokeinterface(调用接口方法-&gt;找到实现接口的对象-&gt;找出适合的方法；</p>
<p>invokespecial(调用特殊处理的实例方法：初始化方法 私有方法 父类方法)；</p>
<p>invokestatic(调用类方法)</p>
</li>
<li><p>方法返回</p>
<p>return(void)</p>
<p>xreturn(返回类型x)</p>
</li>
</ul>
<h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><p>在程序中显式抛出异常的操作会由athrow指令实现，除了这种情况，还有别的异常会在其他Java虚拟机指令检测到异常状况时由虚拟机自动抛出</p>
<h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>Java虚拟机可以支持方法级的同步和方法内部一段指令序列的同步</p>
<ul>
<li><p>方法级同步</p>
<p>隐式，无需通过字节码指令来控制</p>
</li>
<li><p>指令集序列同步</p>
<p>通常是由Java语言的synchronized块来表示，java虚拟机的指令集有monitorenter和monitorexit两条指令来支持synchronized关键字的语义</p>
</li>
<li><p>结构化锁定</p>
<p>方法调用期间每一个管程退出都与前面的管程进入相匹配的情形，持有与释放次数相等</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM-Spec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初识JVM指令执行流程]]></title>
      <url>http://itliusir.com/2018/JVM-Instruction-Execution-Flow/</url>
      <content type="html"><![CDATA[<p>摘要: 记录下学习JVM指令执行流程的理解<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="初识JVM指令执行流程"><a href="#初识JVM指令执行流程" class="headerlink" title="初识JVM指令执行流程"></a>初识JVM指令执行流程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 0: aload_0</div><div class="line"> * 1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</div><div class="line"> * 4: return</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> liugang</div><div class="line"> * <span class="doctag">@since</span> 2018-04-28</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example1</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为主方法创建一个frame并将其推入线程栈</div><div class="line">     * 用于执行方法的是method frame，该frame由两个主要部分组成:</div><div class="line">     *  1. local variables Array 局部变量数组--存储方法参数和局部变量位置</div><div class="line">     *  2. Operand Stack        操作数栈--执行方法的计算</div><div class="line">     * */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">         <span class="comment">/**</span></div><div class="line">          * Code:</div><div class="line">          * 0: iconst_2</div><div class="line">          * 1: iconst_3</div><div class="line">          * 2: invokestatic  #2                  // Method add:(II)I</div><div class="line">          * 5: istore_1</div><div class="line">          * 6: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">          * 9: iload_1</div><div class="line">          * 10: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V</div><div class="line">          * 13: return</div><div class="line">          *</div><div class="line">          * 步骤：</div><div class="line">          * local variables: args(0) result(1)</div><div class="line">          * 2 3放入操作数栈中</div><div class="line">          * invoke static add a=2 b=3</div><div class="line">          * add(int a, int b);</div><div class="line">          * add GG,main的操作数栈保存add的return值:5</div><div class="line">          * istore_1 将其弹出并将其设置为索引为1(variable result)的变量的值</div><div class="line">          * */</div><div class="line">        <span class="keyword">int</span> result = add(<span class="number">2</span>,<span class="number">3</span>);</div><div class="line">        <span class="comment">/**</span></div><div class="line">         *  get static将java/lang/System.out压入操作数栈</div><div class="line">         *  现在操作数栈里有两个值 out和5</div><div class="line">         *  invoke virtual 调用PrintStream.println方法</div><div class="line">         *  它从操作数栈中弹出两个元素：</div><div class="line">             *  第一个元素是一个要传递给println方法的整数参数</div><div class="line">             *  第二个元素是对将要调用println方法的对象的引用</div><div class="line">         * */</div><div class="line">        System.out.println(result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * iload 将局部变量表的0 1位置int型变量2 3加载到栈顶</div><div class="line">     * iadd从栈顶弹出两个数 相加 把和送入到栈顶</div><div class="line">     * 最后，ireturn弹出顶层元素</div><div class="line">     *</div><div class="line">     * 0: iload_0</div><div class="line">     * 1: iload_1</div><div class="line">     * 2: iadd</div><div class="line">     * 3: ireturn</div><div class="line">     *</div><div class="line">     * <span class="doctag">@author</span> liugang 2018-04-28 10:47</div><div class="line">     * */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a+b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>参考链接:</strong><a href="https://blog.takipi.com/jvm-architecture-101-get-to-know-your-virtual-machine/" target="_blank" rel="external">jvm-architecture-101-get-to-know-your-virtual-machine</a></p>
]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM-Instruction </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[栈的应用——四则运算表达式]]></title>
      <url>http://itliusir.com/2018/Data-Structure-StackApply1/</url>
      <content type="html"><![CDATA[<p>摘要:本文是看《大话数据结构》栈章节的学习总结<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="栈的应用——四则运算表达式"><a href="#栈的应用——四则运算表达式" class="headerlink" title="栈的应用——四则运算表达式"></a>栈的应用——四则运算表达式</h1><blockquote>
<p>栈的应用场景有很多，如浏览器的后退，编辑软件的回退等，今天要谈的是栈的基本应用之四则运算表达式(中缀转后缀表达式)</p>
</blockquote>
<p>大家都知道用计算器可以很方便的计算出两数运算的结果，但是如果遇到有优先级的四则运算，计算器又是如何去精确的计算出结果呢？</p>
<p>在20世纪50年代有一个叫<strong><a href="https://zh.wikipedia.org/wiki/%E6%89%AC%C2%B7%E5%8D%A2%E5%8D%A1%E8%A5%BF%E7%BB%B4%E8%8C%A8" target="_blank" rel="external">Jan Łukasiewicz</a></strong>的波兰数学家想到了<strong>一种不需要括号的后缀表达式，我们称为<a href="https://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="external">逆波兰表示法</a></strong> ，逆波兰记法不需要括号来标识操作符的优先级</p>
<h2 id="中缀转后缀表达式"><a href="#中缀转后缀表达式" class="headerlink" title="中缀转后缀表达式"></a>中缀转后缀表达式</h2><p>我们平时所用的标准四则运算表达式，如：</p>
<p><strong><code>150-(7+5)*2+30*2</code></strong></p>
<p>叫做中缀表达式，因为所有的运算符号都在两个数字之间，现在我们通过使用栈将其转为后缀表达式</p>
<blockquote>
<p>规则：</p>
<p>从左到右遍历上面中缀表达式的每个数字符号</p>
<ol>
<li>如果是数字则直接输出</li>
<li>如果是符号则判断与栈顶中的符号优先级，是右括号的或者比栈顶中符号优先级低的依次去括号出栈输出</li>
<li>否则在栈中等待最后遍历完依次输出</li>
</ol>
</blockquote>
<h3 id="转换过程"><a href="#转换过程" class="headerlink" title="转换过程"></a>转换过程</h3><ol>
<li>按照上述规则依次遍历<code>150-(7+5)*2+30*2</code>，150是数字直接输出，<code>-</code>号进栈，第三个是左括号也是符号依然进栈，7是数字直接输出，如下图一所示。</li>
</ol>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/stack1.png" alt="图一"></p>
<ol>
<li>下面接着<code>+</code>号进栈，5输出，接下注意的是右括号，遇到右括号需要匹配前面的左括号，并依次去括号出栈输出(输出了<code>+</code>)。接着<code>*</code>号进栈，2输出，如下图二所示。</li>
</ol>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/stack2-1.png" alt="图二"></p>
<ol>
<li>此时栈顶是<code>*</code>,然后<code>+</code>号<strong>准备进栈</strong>，对比发现<code>+</code>优先级低于栈顶，则栈顶元素依次输出，完了后<code>+</code>号<strong>进栈</strong> 。接着30输出，<code>*</code>比栈顶<code>+</code>优先级高，直接进栈不输出，然后2输出。如下图三所示。</li>
</ol>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/stack3.png" alt="图三"></p>
<ol>
<li>最后遍历结束栈中符号依次输出，最终的后缀表达式结果是<strong><code>150 7 5 + 2 * - 30 2 * +</code></strong></li>
</ol>
<h2 id="后缀表达式计算结果"><a href="#后缀表达式计算结果" class="headerlink" title="后缀表达式计算结果"></a>后缀表达式计算结果</h2><p>上述结果：<strong><code>150 7 5 + 2 * - 30 2 * +</code></strong>， 可能很多人问转这个有什么用，接下来看的是该后缀表达式的计算过程。</p>
<blockquote>
<p>计算规则：从左到右遍历每个数字和符号，遇到数字就进栈，遇到符号将处于栈顶的两个元素出栈并运算，运算结果进栈，一直到最后算出最终结果</p>
</blockquote>
<ol>
<li><strong>150 7 5</strong>依次进栈，<code>+</code>号是符号，将栈顶的 <strong>7 5</strong>出栈并运算(+)，结果是<strong>12</strong>并进栈，<strong>2</strong>是数字同样进栈。如下图四所示。</li>
</ol>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/stack4.png" alt="图四"></p>
<ol>
<li>接着是<code>*</code>号，将栈顶的两个元素运算并重新入栈(<strong>12 *2</strong>)；然后是<code>-</code>号，栈顶两个元素分别是<strong>150 24</strong>，结果是<strong>126</strong>入栈；然后数字<strong>30 2</strong>依次入栈。如下图五所示。</li>
</ol>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/stack5.png" alt="图五"></p>
<ol>
<li>遍历到<code>*</code>，将栈顶元素<strong>30 2</strong>运算并重新进栈，最后是<code>+</code>号，所以结果是186出栈，栈变为空。如下图六所示。</li>
</ol>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/stack6.png" alt="图六"></p>
<p><strong>上述过程都充分的利用了栈的后进先出特性来处理的，所以该表达式的转换和计算是栈的经典应用之一，对理解栈本身也有很大的帮助~</strong></p>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Zookeeper、kafka部署]]></title>
      <url>http://itliusir.com/2018/middleware-install-zk-kafka/</url>
      <content type="html"><![CDATA[<p>摘要:安装kafka文档<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="安装zookeeper、kafka"><a href="#安装zookeeper、kafka" class="headerlink" title="安装zookeeper、kafka"></a>安装<code>zookeeper</code>、<code>kafka</code></h1><h2 id="解压zk安装包"><a href="#解压zk安装包" class="headerlink" title="解压zk安装包"></a>解压zk安装包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf zookeeper-3.4.10.tar.gz</div></pre></td></tr></table></figure>
<h2 id="添加系统环境变量"><a href="#添加系统环境变量" class="headerlink" title="添加系统环境变量"></a>添加系统环境变量</h2><p><code>vim /etc/profile</code>尾部追加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export ZOOKEEPER_HOME=/software/zookeeper-3.4.10/</div><div class="line">export PATH=$ZOOKEEPER_HOME/bin:$PATH</div><div class="line">export PATH</div></pre></td></tr></table></figure>
<p>输入<code>source /etc/profile</code>重新加载系统环境变量</p>
<h2 id="修改zookeeper配置文件"><a href="#修改zookeeper配置文件" class="headerlink" title="修改zookeeper配置文件"></a>修改<code>zookeeper</code>配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server28 zookeeper-3.4.10]# cd conf/</div><div class="line">[root@server28 conf]# cp zoo_sample.cfg zoo.cfg</div><div class="line">[root@server28 conf]# ls</div><div class="line">configuration.xsl  log4j.properties  zoo.cfg  zoo_sample.cfg</div></pre></td></tr></table></figure>
<p>修改<code>zoo.cfg</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 服务器与客户端之间交互的基本时间单元（ms）</div><div class="line">tickTime=2000</div><div class="line"># The number of ticks that the initial </div><div class="line"># synchronization phase can take</div><div class="line">initLimit=10</div><div class="line"># The number of ticks that can pass between </div><div class="line"># sending a request and getting an acknowledgement</div><div class="line">syncLimit=5</div><div class="line"># 配置保存数据文件夹</div><div class="line">dataDir=/software/zookeeper-3.4.10/data</div><div class="line"># 配置保存日志文件夹，当此配置不存在时默认路径与dataDir一致</div><div class="line">dataLogDir=/software/zookeeper-3.4.10/logs</div><div class="line"># 客户端访问zookeeper的端口号</div><div class="line">clientPort=2181</div></pre></td></tr></table></figure>
<h2 id="启动、关闭zookeeper"><a href="#启动、关闭zookeeper" class="headerlink" title="启动、关闭zookeeper"></a>启动、关闭<code>zookeeper</code></h2><ul>
<li>启动服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server28 bin]# ./zkServer.sh start</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /software/zookeeper-3.4.10/bin/../conf/zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div></pre></td></tr></table></figure>
<ul>
<li>关闭服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server28 bin]# ./zkServer.sh stop</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /software/zookeeper-3.4.10/bin/../conf/zoo.cfg</div><div class="line">Stopping zookeeper ... STOPPED</div></pre></td></tr></table></figure>
<ul>
<li>重启服务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@server28 bin]# ./zkServer.sh restart</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /software/zookeeper-3.4.10/bin/../conf/zoo.cfg</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /software/zookeeper-3.4.10/bin/../conf/zoo.cfg</div><div class="line">Stopping zookeeper ... STOPPED</div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /software/zookeeper-3.4.10/bin/../conf/zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div></pre></td></tr></table></figure>
<h2 id="解压kafka安装包"><a href="#解压kafka安装包" class="headerlink" title="解压kafka安装包"></a>解压kafka安装包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar -zxvf kafka_2.11-0.10.1.1.tgz</div><div class="line">mv kafka_2.11-0.10.1.1 kafka</div><div class="line">cd kafka</div><div class="line">cp config/server.properties bin</div></pre></td></tr></table></figure>
<h2 id="启动kafka服务"><a href="#启动kafka服务" class="headerlink" title="启动kafka服务"></a>启动kafka服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 后台启动</div><div class="line">[root@server28 bin]# ./kafka-server-start.sh -daemon server.properties</div></pre></td></tr></table></figure>
<h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@server28 bin]# jps</div><div class="line">31523 Jps</div><div class="line">1332 jenkins.war</div><div class="line">31032 QuorumPeerMain</div><div class="line">31224 Kafka</div></pre></td></tr></table></figure>
<h2 id="删除Topic"><a href="#删除Topic" class="headerlink" title="删除Topic"></a>删除Topic</h2><h3 id="删除Kafka的topic"><a href="#删除Kafka的topic" class="headerlink" title="删除Kafka的topic"></a>删除Kafka的topic</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.如果kafka启动时加载的配置文件server.properties没有配置delete.topic.enable = true这条命令并不执行删除动作，仅仅是在zookeeper上标记该topic要被删除，需要往下执行.</div><div class="line">[root@server28 bin]# ./kafka-topics.sh -delete -zookeeper 192.168.103.28:2181 -topic mic-service</div><div class="line">Topic mic-service is already marked for deletion.</div><div class="line">2.从kafka manager去删除</div></pre></td></tr></table></figure>
<h3 id="stop-Kafka"><a href="#stop-Kafka" class="headerlink" title="stop Kafka"></a>stop Kafka</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@server28 bin]# ./kafka-server-stop.sh server.properties</div><div class="line">[root@server28 bin]# jps</div><div class="line">23792 Jps</div><div class="line">1332 jenkins.war</div><div class="line">31032 QuorumPeerMain</div></pre></td></tr></table></figure>
<h3 id="删除Kafka的log"><a href="#删除Kafka的log" class="headerlink" title="删除Kafka的log"></a>删除Kafka的log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在配置文件找到kafka日志目录并删除对应目录，这里是全部清空</div><div class="line">[root@server28 tmp]# cd kafka-logs/</div><div class="line">[root@server28 tmp]# rm -rf *</div></pre></td></tr></table></figure>
<h3 id="删除Zookeeper下节点"><a href="#删除Zookeeper下节点" class="headerlink" title="删除Zookeeper下节点"></a>删除Zookeeper下节点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@server28 bin]# zkCli.sh -server 192.168.103.28:2181</div><div class="line">[zk: 192.168.103.28:2181(CONNECTED) 0] rmr /admin/delete_topics/mic-service</div><div class="line">[zk: 192.168.103.28:2181(CONNECTED) 1] rmr /brokers/topics/mic-service</div><div class="line">[zk: 192.168.103.28:2181(CONNECTED) 2] rmr /config/topics/mic-service</div><div class="line">[zk: 192.168.103.28:2181(CONNECTED) 3] ls /admin/delete_topics</div><div class="line">[]</div></pre></td></tr></table></figure>
<p>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=3jvl2yjjxbk04" target="_blank" rel="external">https://cloud.tencent.com/developer/support-plan?invite_code=3jvl2yjjxbk04</a></p>
]]></content>
      
        <categories>
            
            <category> 中间件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis 集群规范]]></title>
      <url>http://itliusir.com/2018/database-redis-cluster-spec/</url>
      <content type="html"><![CDATA[<p>摘要:参考官方文档Redis Cluster spec总结的Redis规范<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="Redis-集群规范"><a href="#Redis-集群规范" class="headerlink" title="Redis 集群规范"></a>Redis 集群规范</h1><h2 id="安全写入"><a href="#安全写入" class="headerlink" title="安全写入"></a>安全写入</h2><p>两个写入丢失的可能</p>
<ul>
<li><p>写入操作到达主节点，主节点异步冗余备份还没传播到从节点时候主节点挂了，该写入会丢失</p>
<blockquote>
<p>几率很小，虽然是异步备份，但主节点写入并回复客户端的时间和传播给slave节点时间大致相同</p>
</blockquote>
</li>
<li><p>故障转移时候，一个没有更新路由表的客户端会在主–&gt;从之前做写入操作（几率更小）</p>
<blockquote>
<p>原因：长时间无法被大多数主节点访问的节点会被故障转移掉，不再接受任何写入操作，其修复好后仍然会有一小段时间拒绝写入。好让其他节点有时间去告知配置信息的变更</p>
</blockquote>
</li>
</ul>
<h2 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h2><p>根据redis选举机制，高可用需要至少3台服务器(3个master节点)，每个master节点都至少要有一个salve节点可达，最好是从节点数量&gt;主节点数量</p>
<blockquote>
<ol>
<li>master遇到故障转移到slave后，集群会再次恢复可用</li>
<li>master故障修复后会重新加入集群成为新master的从节点，防止下次故障</li>
<li>当从节点有两个就可以多一次故障转移</li>
</ol>
</blockquote>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/redis-cluster.png" alt="redis-cluster"></p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>在Redis的集群中，节点并不是把命令转发到负责键的节点上，而是把客户端重定向到服务一定范围内的键的节点上。 最终客户端获得一份最新的集群路由表，里面有写着哪些节点服务哪些键，所以在正常操作中客户端是直接联系到对应的节点来发送指令。</p>
<p>由于使用了异步复制，节点不会等待其他节点对写入操作的回复</p>
<p>所以普通操作是可以被处理得跟在Redis单机版一样的，在一个拥有 N 个master节点的 Redis 集群中，由于线性扩展的设计，你可以认为同样的操作在集群上的性能是Redis单机版的n倍</p>
<h2 id="键分布模型"><a href="#键分布模型" class="headerlink" title="键分布模型"></a>键分布模型</h2><p>Redis 集群的键空间被分割为 <code>16384</code> 个槽（slot）， 集群的最大节点数量也是 <code>16384</code> 个。</p>
<blockquote>
<p>推荐的最大节点数量为 1000 个左右。</p>
</blockquote>
<p>每个主节点都负责处理 <code>16384</code> 个哈希槽的其中一部分。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://redis.io/topics/cluster-spec" target="_blank" rel="external">Redis Cluster Spec</a></p>
<p><a href="http://redisdoc.com/topic/cluster-spec.html" target="_blank" rel="external">Redis 集群规范</a></p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis Cluster spec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis 集群部署]]></title>
      <url>http://itliusir.com/2018/database-redis-cluster/</url>
      <content type="html"><![CDATA[<p>摘要:最近工作搭建redis集群时候的笔记<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="Redis集群搭建"><a href="#Redis集群搭建" class="headerlink" title="Redis集群搭建"></a>Redis集群搭建</h1><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><blockquote>
<p>系统: CentOS 7.4</p>
<p>Redis: redis-4.0.2</p>
<p>ruby: 2.4.2</p>
</blockquote>
<h2 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rpm -ivh gcc-c++-4.8.5-16.el7.x86_64.rpm --nodeps</div><div class="line">Preparing...                          ################################# [100%]</div><div class="line">Updating / installing...</div><div class="line">   1:gcc-c++-4.8.5-16.el7             ################################# [100%]</div></pre></td></tr></table></figure>
<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /opt </div><div class="line">tar xzf redis-4.0.2.tar.gz</div><div class="line">cd redis-4.0.2</div><div class="line">make</div></pre></td></tr></table></figure>
<p><strong>如果因为编译失败可以使用</strong><code>make distclean</code></p>
<h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><ul>
<li><strong>创建redis-cluster目录</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir /opt/redis-4.0.2/redis-cluster</div><div class="line">cd /opt/redis-4.0.2/redis-cluster</div><div class="line">mkdir 7100 7101 7102</div></pre></td></tr></table></figure>
<ul>
<li><strong>分别修改这三个配置文件，把如下<code>redis.conf 配置</code>内容粘贴进去</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi 7100/redis.conf</div><div class="line">vi 7101/redis.conf </div><div class="line">vi 7102/redis.conf</div></pre></td></tr></table></figure>
<ul>
<li><code>redis.conf</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">port 7100</div><div class="line">bind 192.168.103.14</div><div class="line">daemonize yes</div><div class="line">pidfile /var/run/redis_7100.pid</div><div class="line">cluster-enabled yes</div><div class="line">cluster-config-file nodes_7100.conf</div><div class="line">cluster-node-timeout 20100</div><div class="line">appendonly yes</div></pre></td></tr></table></figure>
<ul>
<li><strong>配置说明</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#端口7100,7101,7102</div><div class="line">port 7100</div><div class="line"></div><div class="line">#默认ip为127.0.0.1，需要改为其他节点机器可访问的ip，否则创建集群时无法访问对应的端口，无法创建集群</div><div class="line">bind 192.168.103.14</div><div class="line"></div><div class="line">#redis后台运行</div><div class="line">daemonize yes</div><div class="line"></div><div class="line">#pidfile文件对应7100，7101，7102</div><div class="line">pidfile /var/run/redis_7100.pid</div><div class="line"></div><div class="line">#开启集群，把注释#去掉</div><div class="line">cluster-enabled yes</div><div class="line"></div><div class="line">#集群的配置，配置文件首次启动自动生成 7100，7101，7102          </div><div class="line">cluster-config-file nodes_7100.conf</div><div class="line"></div><div class="line">#请求超时，默认15秒，可自行设置 </div><div class="line">cluster-node-timeout 20100    </div><div class="line">        </div><div class="line">#aof日志开启，有需要就开启，它会每次写操作都记录一条日志</div><div class="line">appendonly yes</div></pre></td></tr></table></figure>
<ul>
<li><strong>在另外一台机器上重复以上操作，目录和端口改为7103、7104、7105</strong></li>
</ul>
<h2 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 第一台机器上执行 3个节点</div><div class="line">for((i=0;i&lt;=2;i++)); do /opt/redis-4.0.2/src/redis-server /opt/redis-4.0.2/redis-cluster/710$i/redis.conf; done</div><div class="line"></div><div class="line">#第二台机器上执行 3个节点</div><div class="line">for((i=3;i&lt;=5;i++)); do /opt/redis-4.0.2/src/redis-server /opt/redis-4.0.2/redis-cluster/710$i/redis.conf; done</div></pre></td></tr></table></figure>
<h2 id="检查服务"><a href="#检查服务" class="headerlink" title="检查服务"></a>检查服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep redis		   //redis是否启动成功</div><div class="line">netstat -tnlp | grep redis  //监听redis端口</div></pre></td></tr></table></figure>
<h2 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h2><p>现在我们已经有了六个正在运行中的 Redis 实例，通过使用 Redis 集群命令行工具 redis-trib ， 编写节点配置文件的工作可以非常容易地完成： redis-trib 位于 Redis 源码的 src 文件夹中， 它是一个 Ruby 程序， 这个程序通过向实例发送特殊命令来完成创建新集群， 检查集群， 或者对集群进行重新分片（reshared）等工作。所以我们先来安装ruby。</p>
<h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><p>通过yum安装的ruby往往版本较低，这里使用安装包安装</p>
<p><a href="http://cache.ruby-lang.org/pub/ruby/" target="_blank" rel="external">下载地址</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tar -xvzf ruby-2.4.2.tar.gz</div><div class="line">cd ruby-2.4.2</div><div class="line">./configure</div><div class="line">make</div><div class="line">sudo make install</div></pre></td></tr></table></figure>
<p>安装完成后，可以查看是否安装成功，若遇到没有输出版本可以重新打开命令窗口试试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -v</div></pre></td></tr></table></figure>
<p>接下来我们安装redis依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install redis</div></pre></td></tr></table></figure>
<h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>接下来我们使用 Redis 集群命令行工具 redis-trib，在其中一台机器上运行如下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/redis-4.0.2/src/redis-trib.rb create --replicas 1 192.168.103.14:7100 192.168.103.14:7101 192.168.103.14:7102 192.168.103.28:7103 192.168.103.28:7104 192.168.103.28:7105</div></pre></td></tr></table></figure>
<p>会出现如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; Creating cluster</div><div class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</div><div class="line">Using 3 masters:</div><div class="line">192.168.103.14:7100</div><div class="line">192.168.103.28:7103</div><div class="line">192.168.103.14:7101</div><div class="line">Adding replica 192.168.103.28:7104 to 192.168.103.14:7100</div><div class="line">Adding replica 192.168.103.14:7102 to 192.168.103.28:7103</div><div class="line">Adding replica 192.168.103.28:7105 to 192.168.103.14:7101</div><div class="line">M: c190d12629fd227c909caa96f5e978ff996364ed 192.168.103.14:7100</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">M: 77ea96b2eb31b0dd44acc986fe8484358cd9863f 192.168.103.14:7101</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">S: b08c0a2e59ef7564eeda7f8d7ca08ec7f3766c1d 192.168.103.14:7102</div><div class="line">   replicates 76d59f4caaf766bea9122b1e6327e13721c8ca3b</div><div class="line">M: 76d59f4caaf766bea9122b1e6327e13721c8ca3b 192.168.103.28:7103</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">S: 77abb939328acb2198fe3e4a495c217d25b91cda 192.168.103.28:7104</div><div class="line">   replicates c190d12629fd227c909caa96f5e978ff996364ed</div><div class="line">S: 82f48a3c8d0d684fe31254fd4115d8c3b5622f4e 192.168.103.28:7105</div><div class="line">   replicates 77ea96b2eb31b0dd44acc986fe8484358cd9863f</div><div class="line">Can I set the above configuration? (type &apos;yes&apos; to accept): yes</div></pre></td></tr></table></figure>
<p><strong>输入yes继续</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; Nodes configuration updated</div><div class="line">&gt;&gt;&gt; Assign a different config epoch to each node</div><div class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</div><div class="line">Waiting for the cluster to join....</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.103.14:7100)</div><div class="line">M: c190d12629fd227c909caa96f5e978ff996364ed 192.168.103.14:7100</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: 77ea96b2eb31b0dd44acc986fe8484358cd9863f 192.168.103.14:7101</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 82f48a3c8d0d684fe31254fd4115d8c3b5622f4e 192.168.103.28:7105</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 77ea96b2eb31b0dd44acc986fe8484358cd9863f</div><div class="line">S: b08c0a2e59ef7564eeda7f8d7ca08ec7f3766c1d 192.168.103.14:7102</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 76d59f4caaf766bea9122b1e6327e13721c8ca3b</div><div class="line">M: 76d59f4caaf766bea9122b1e6327e13721c8ca3b 192.168.103.28:7103</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 77abb939328acb2198fe3e4a495c217d25b91cda 192.168.103.28:7104</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates c190d12629fd227c909caa96f5e978ff996364ed</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check for open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<p>可以看到master节点分别是<code>14:7100(0-5460)</code>、<code>14:7101(10923-16383)</code>、<code>28:7103(5461-10922)</code>，salve节点分别是<code>28:7150</code> 、<code>14:7102</code> 、<code>28:7104</code></p>
<p>对应关系可以根据上面可以看到分别是3主3从</p>
<p><strong>若输入yes后出现</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Can I set the above configuration? (type &apos;yes&apos; to accept): yes</div><div class="line">/usr/local/lib/ruby/gems/2.4.0/gems/redis-4.0.1/lib/redis/client.rb:119:in `call&apos;: ERR Slot 5798 is already busy (Redis::CommandError)</div><div class="line">	from /usr/local/lib/ruby/gems/2.4.0/gems/redis-4.0.1/lib/redis.rb:2764:in `block in method_missing&apos;</div><div class="line">	from /usr/local/lib/ruby/gems/2.4.0/gems/redis-4.0.1/lib/redis.rb:45:in `block in synchronize&apos;</div><div class="line">	from /usr/local/lib/ruby/2.4.0/monitor.rb:214:in `mon_synchronize&apos;</div><div class="line">	from /usr/local/lib/ruby/gems/2.4.0/gems/redis-4.0.1/lib/redis.rb:45:in `synchronize&apos;</div><div class="line">	from /usr/local/lib/ruby/gems/2.4.0/gems/redis-4.0.1/lib/redis.rb:2763:in `method_missing&apos;</div><div class="line">	from /opt/redis-4.0.2/src/redis-trib.rb:212:in `flush_node_config&apos;</div><div class="line">	from /opt/redis-4.0.2/src/redis-trib.rb:776:in `block in flush_nodes_config&apos;</div><div class="line">	from /opt/redis-4.0.2/src/redis-trib.rb:775:in `each&apos;</div><div class="line">	from /opt/redis-4.0.2/src/redis-trib.rb:775:in `flush_nodes_config&apos;</div><div class="line">	from /opt/redis-4.0.2/src/redis-trib.rb:1296:in `create_cluster_cmd&apos;</div><div class="line">	from /opt/redis-4.0.2/src/redis-trib.rb:1700:in `&lt;main&gt;&apos;</div></pre></td></tr></table></figure>
<p><strong>解决办法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 每个节点执行以下命令,然后重新执行创建集群命令</div><div class="line">/opt/redis-4.0.2/src/redis-cli -h 192.168.103.14 -p 7100</div><div class="line">192.168.103.14:7100&gt; flushall</div><div class="line">OK</div><div class="line">192.168.103.14:7100&gt; cluster reset soft</div><div class="line">OK</div><div class="line">192.168.103.14:7100&gt; exit</div><div class="line">...</div><div class="line">/opt/redis-4.0.2/src/redis-cli -h 192.168.103.28 -p 7103</div><div class="line">192.168.103.28:7103&gt; flushall</div><div class="line">OK</div><div class="line">192.168.103.28:7103&gt; cluster reset soft</div><div class="line">OK</div><div class="line">192.168.103.28:7103&gt; exit</div></pre></td></tr></table></figure>
<h3 id="集群验证"><a href="#集群验证" class="headerlink" title="集群验证"></a>集群验证</h3><h4 id="连接集群测试"><a href="#连接集群测试" class="headerlink" title="连接集群测试"></a>连接集群测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 选择一个节点set值</div><div class="line">/opt/redis-4.0.2/src/redis-cli -c -h 192.168.103.28 -p 7104</div><div class="line">192.168.103.28:7104&gt; set name admin</div><div class="line">-&gt; Redirected to slot [5798] located at 192.168.103.28:7103</div><div class="line">OK</div><div class="line">192.168.103.28:7103&gt; get name</div><div class="line">&quot;admin&quot;</div><div class="line">192.168.103.28:7103&gt; exit</div><div class="line"># 换个节点测试</div><div class="line">[root@server28 /]# /opt/redis-4.0.2/src/redis-cli -c -h 192.168.103.14 -p 7101</div><div class="line">192.168.103.14:7101&gt; get name</div><div class="line">-&gt; Redirected to slot [5798] located at 192.168.103.28:7103</div><div class="line">&quot;admin&quot;</div><div class="line">192.168.103.28:7103&gt; exit</div></pre></td></tr></table></figure>
<p>可以发现<code>name &quot;admin&quot;</code>被放置在<code>28:7103</code>主节点上，槽位是(5461-10922)</p>
<blockquote>
<p>注: Redis 集群没有使用一致性hash, 而是引入了 <strong>哈希槽</strong>的概念.</p>
<p>Redis 集群有16384个哈希槽,每个key通过CRC16校验后对16384取模来决定放置哪个槽.集群的每个节点负责一部分hash槽,举个例子,比如当前集群有3个节点,那么:</p>
<ul>
<li><p>节点 A 包含 0 到 5500号哈希槽.</p>
</li>
<li><p>节点 B 包含5501 到 11000 号哈希槽.</p>
</li>
<li><p>节点 C 包含11001 到 16384号哈希槽.</p>
<p>这种结构很容易添加或者删除节点. 比如如果我想新添加个节点D, 我需要从节点 A, B, C中得部分槽到D上. 如果我想移除节点A,需要将A中的槽移到B和C节点上,然后将没有任何槽的A节点从集群中移除即可. 由于从一个节点将哈希槽移动到另一个节点并不会停止服务,所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态.</p>
</li>
</ul>
</blockquote>
<h4 id="检查集群状态"><a href="#检查集群状态" class="headerlink" title="检查集群状态"></a>检查集群状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/opt/redis-4.0.2/src/redis-trib.rb check 192.168.103.14:7100</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.103.14:7100)</div><div class="line">M: c190d12629fd227c909caa96f5e978ff996364ed 192.168.103.14:7100</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: 77ea96b2eb31b0dd44acc986fe8484358cd9863f 192.168.103.14:7101</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 82f48a3c8d0d684fe31254fd4115d8c3b5622f4e 192.168.103.28:7105</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 77ea96b2eb31b0dd44acc986fe8484358cd9863f</div><div class="line">S: b08c0a2e59ef7564eeda7f8d7ca08ec7f3766c1d 192.168.103.14:7102</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 76d59f4caaf766bea9122b1e6327e13721c8ca3b</div><div class="line">M: 76d59f4caaf766bea9122b1e6327e13721c8ca3b 192.168.103.28:7103</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 77abb939328acb2198fe3e4a495c217d25b91cda 192.168.103.28:7104</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates c190d12629fd227c909caa96f5e978ff996364ed</div></pre></td></tr></table></figure>
<h4 id="列出集群节点"><a href="#列出集群节点" class="headerlink" title="列出集群节点"></a>列出集群节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/opt/redis-4.0.2/src/redis-cli -c -h 192.168.103.14 -p 7101</div><div class="line">192.168.103.14:7101&gt; cluster nodes</div><div class="line">77abb939328acb2198fe3e4a495c217d25b91cda 192.168.103.28:7104@17104 slave c190d12629fd227c909caa96f5e978ff996364ed 0 1523435804915 5 connected</div><div class="line">76d59f4caaf766bea9122b1e6327e13721c8ca3b 192.168.103.28:7103@17103 master - 0 1523435804000 4 connected 5461-10922</div><div class="line">82f48a3c8d0d684fe31254fd4115d8c3b5622f4e 192.168.103.28:7105@17105 slave 77ea96b2eb31b0dd44acc986fe8484358cd9863f 0 1523435805918 6 connected</div><div class="line">b08c0a2e59ef7564eeda7f8d7ca08ec7f3766c1d 192.168.103.14:7102@17102 slave 76d59f4caaf766bea9122b1e6327e13721c8ca3b 0 1523435803000 4 connected</div><div class="line">77ea96b2eb31b0dd44acc986fe8484358cd9863f 192.168.103.14:7101@17101 myself,master - 0 1523435803000 2 connected 10923-16383</div><div class="line">c190d12629fd227c909caa96f5e978ff996364ed 192.168.103.14:7100@17100 master - 0 1523435806920 1 connected 0-5460</div></pre></td></tr></table></figure>
<h4 id="打印集群信息"><a href="#打印集群信息" class="headerlink" title="打印集群信息"></a>打印集群信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">192.168.103.14:7101&gt; cluster info</div><div class="line">cluster_state:ok</div><div class="line">cluster_slots_assigned:16384</div><div class="line">cluster_slots_ok:16384</div><div class="line">cluster_slots_pfail:0</div><div class="line">cluster_slots_fail:0</div><div class="line">cluster_known_nodes:6</div><div class="line">cluster_size:3</div><div class="line">cluster_current_epoch:6</div><div class="line">cluster_my_epoch:2</div><div class="line">cluster_stats_messages_ping_sent:1605</div><div class="line">cluster_stats_messages_pong_sent:1682</div><div class="line">cluster_stats_messages_meet_sent:5</div><div class="line">cluster_stats_messages_sent:3292</div><div class="line">cluster_stats_messages_ping_received:1681</div><div class="line">cluster_stats_messages_pong_received:1610</div><div class="line">cluster_stats_messages_meet_received:1</div><div class="line">cluster_stats_messages_received:3292</div></pre></td></tr></table></figure>
<h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><p><code>cluster meet  &lt;ip&gt; &lt;port&gt;</code><strong>将 ip 和 port 所指定的节点添加到集群当中</strong></p>
<p><code>cluster forget &lt;node_id&gt;</code>  <strong>从集群中移除 node_id 指定的节点</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">192.168.103.14:7100&gt; cluster meet 192.168.103.28 7106</div><div class="line">OK</div><div class="line">192.168.103.14:7100&gt; cluster nodes</div><div class="line">047f60047efa74c6f597e935b8b5896c15057cf6 192.168.103.28:7106@17106 master - 0 1523448401000 0 connected</div><div class="line">77ea96b2eb31b0dd44acc986fe8484358cd9863f 192.168.103.14:7101@17101 master - 0 1523448401961 2 connected 10923-16383</div><div class="line">82f48a3c8d0d684fe31254fd4115d8c3b5622f4e 192.168.103.28:7105@17105 slave 77ea96b2eb31b0dd44acc986fe8484358cd9863f 0 1523448402964 6 connected</div><div class="line">b08c0a2e59ef7564eeda7f8d7ca08ec7f3766c1d 192.168.103.14:7102@17102 slave 76d59f4caaf766bea9122b1e6327e13721c8ca3b 0 1523448403965 4 connected</div><div class="line">76d59f4caaf766bea9122b1e6327e13721c8ca3b 192.168.103.28:7103@17103 master - 0 1523448402000 4 connected 5461-10922</div><div class="line">77abb939328acb2198fe3e4a495c217d25b91cda 192.168.103.28:7104@17104 slave c190d12629fd227c909caa96f5e978ff996364ed 0 1523448404969 5 connected</div><div class="line">c190d12629fd227c909caa96f5e978ff996364ed 192.168.103.14:7100@17100 myself,master - 0 1523448401000 1 connected 0-5460</div><div class="line">192.168.103.14:7100&gt; cluster forget 047f60047efa74c6f597e935b8b5896c15057cf6</div><div class="line">OK</div></pre></td></tr></table></figure>
<p><code>cluster nodes</code>命令的结果含义如下：</p>
<ul>
<li>节点ID</li>
<li>IP:端口</li>
<li>标志: master, slave, myself, fail, …</li>
<li>如果是个从节点, 这里是它的主节点的NODE ID</li>
<li>集群最近一次向节点发送 PING 命令之后， 过去了多长时间还没接到回复。.</li>
<li>节点最近一次返回 PONG 回复的时间。</li>
<li>节点的配置纪元（configuration epoch）：详细信息请参考 Redis 集群规范 。</li>
<li>本节点的网络连接情况：例如 connected 。</li>
<li>节点目前包含的槽：例如 192.168.103.28:7103 目前包含号码为 5960 至 10921 的哈希槽。</li>
</ul>
<p><strong>使用redis-trib.rb 新增节点</strong></p>
<ol>
<li>添加master节点</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/redis-4.0.2/src/redis-trib.rb add-node 192.168.103.28:7106 192.168.103.14:7100</div></pre></td></tr></table></figure>
<ol>
<li>添加salve节点(随机选一个主节点),前提是节点要为空</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/redis-4.0.2/src/redis-trib.rb add-node --slave 192.168.103.28:7106 192.168.103.14:7100</div></pre></td></tr></table></figure>
<ol>
<li>添加salve节点(指定主节点为192.168.103.14:7101)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/redis-4.0.2/src/redis-trib.rb add-node --slave --master-id 77ea96b2eb31b0dd44acc986fe8484358cd9863f 192.168.103.28:7106 192.168.103.14:7100</div></pre></td></tr></table></figure>
<p>​    也可以使用cluster replicate</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.103.28:7106&gt; cluster replicate 77ea96b2eb31b0dd44acc986fe8484358cd9863f</div></pre></td></tr></table></figure>
<p><strong>使用redis-trib.rb 移除节点</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/redis-4.0.2/src/redis-trib.rb del-node 192.168.103.14:7100 `&lt;node-id&gt;`</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://segmentfault.com/a/1190000010682551" target="_blank" rel="external">CentOs7.3 搭建 Redis-4.0.1 Cluster 集群服务</a></p>
<p><a href="http://www.redis.cn/topics/cluster-tutorial.html" target="_blank" rel="external">Redis 集群教程</a></p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis Cluster </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Cloud Netflix OSS 学习总结]]></title>
      <url>http://itliusir.com/2018/SpringCloud-Netflix/</url>
      <content type="html"><![CDATA[<p>摘要: 本篇博客是使用SpringCloud框架开发微服务时候的一篇技术分享<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="Spring-Cloud-Netflix-OSS"><a href="#Spring-Cloud-Netflix-OSS" class="headerlink" title="Spring Cloud Netflix OSS"></a><code>Spring Cloud Netflix OSS</code></h1><p>提供了对<code>Netflix</code>开源项目的集成，使我们可以以Spring Boot编程风格使用<code>Netflix</code>旗下相关框架，只需要在程序里添加注解，就可以使用成熟的<code>Netflix</code>组件(<code>Eureka</code>、<code>Hystrix</code>、<code>Zuul</code>、<code>Ribbon</code>、<code>Sidecar</code>)</p>
<h2 id="Spring-Cloud-Eureka"><a href="#Spring-Cloud-Eureka" class="headerlink" title="Spring Cloud Eureka"></a>Spring Cloud Eureka</h2><h3 id="Eureka客户端"><a href="#Eureka客户端" class="headerlink" title="Eureka客户端"></a>Eureka客户端</h3><ul>
<li><p>向<code>Eureka</code>注册服务</p>
</li>
<li><p>高可用(HA)</p>
<ul>
<li><p>多注册中心主机</p>
<p>如果配置了多个Eureka注册服务器，那么默认情况只有一台可用的服务器，存在注册信息。如果Down掉了，则会选择下一台可用的Eureka服务器。</p>
</li>
</ul>
</li>
<li><p>配置</p>
<ul>
<li><p>应用间隔</p>
<p><code>registry-fetch-interval-seconds:</code>30 去服务端获取注册信息的间隔时间</p>
</li>
<li><p>同步间隔</p>
<p><code>instance-info-replication-interval-seconds:</code>30 更新实例信息的变化到服务端的间隔时间</p>
</li>
</ul>
<p><a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR4/single/spring-cloud.html#_appendix_compendium_of_configuration_properties" target="_blank" rel="external">参考链接</a></p>
</li>
<li><p>注意</p>
<ul>
<li>端口不要使用0</li>
<li>Eureka缓存<ol>
<li>Eureka Server对注册列表进行缓存，默认时间为30s。</li>
<li>Eureka Client对获取到的注册信息进行缓存，默认时间为30s。</li>
<li>Ribbon会从上面提到的Eureka Client获取服务列表，将负载均衡后的结果缓存30s。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="Eureka服务端"><a href="#Eureka服务端" class="headerlink" title="Eureka服务端"></a>Eureka服务端</h3><p><img src="http://ok0qzthrb.bkt.clouddn.com/Eureka.png" alt="img"></p>
<ul>
<li>注册中心对比</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center"><code>Feature</code></th>
<th style="text-align:center"><a href="https://github.com/hashicorp/consul" target="_blank" rel="external">Consul</a></th>
<th style="text-align:center"><a href="https://github.com/apache/zookeeper" target="_blank" rel="external">zookeeper</a></th>
<th style="text-align:center"><a href="https://github.com/coreos/etcd" target="_blank" rel="external">etcd</a></th>
<th style="text-align:center"><a href="https://github.com/Netflix/eureka" target="_blank" rel="external">euerka</a></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">服务健康检查</td>
<td style="text-align:center">服务状态，内存，硬盘等</td>
<td style="text-align:center">(弱)长连接，<code>keepalive</code></td>
<td style="text-align:center">连接心跳</td>
<td style="text-align:center">可配支持</td>
</tr>
<tr>
<td style="text-align:center">多数据中心</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">—</td>
<td style="text-align:center">—</td>
<td style="text-align:center">—</td>
</tr>
<tr>
<td style="text-align:center">kv存储服务</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">—</td>
</tr>
<tr>
<td style="text-align:center">一致性</td>
<td style="text-align:center"><code>raft</code></td>
<td style="text-align:center"><code>paxos</code></td>
<td style="text-align:center"><code>raft</code></td>
<td style="text-align:center">—</td>
</tr>
<tr>
<td style="text-align:center"><code>cap</code></td>
<td style="text-align:center"><code>ca</code></td>
<td style="text-align:center"><code>cp</code></td>
<td style="text-align:center"><code>cp</code></td>
<td style="text-align:center"><code>ap</code></td>
</tr>
<tr>
<td style="text-align:center">使用接口(多语言能力)</td>
<td style="text-align:center">支持<code>http</code>和<code>dns</code></td>
<td style="text-align:center">客户端</td>
<td style="text-align:center"><code>http/grpc</code></td>
<td style="text-align:center"><code>http</code>（sidecar）</td>
</tr>
<tr>
<td style="text-align:center">watch支持</td>
<td style="text-align:center">全量/支持long polling</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持 long polling</td>
<td style="text-align:center">支持 long polling/大部分增量</td>
</tr>
<tr>
<td style="text-align:center">自身监控</td>
<td style="text-align:center"><code>metrics</code></td>
<td style="text-align:center">—</td>
<td style="text-align:center"><code>metrics</code></td>
<td style="text-align:center"><code>metrics</code></td>
</tr>
<tr>
<td style="text-align:center">安全</td>
<td style="text-align:center"><code>acl /https</code></td>
<td style="text-align:center"><code>acl</code></td>
<td style="text-align:center"><code>https</code>支持（弱）</td>
<td style="text-align:center">—</td>
</tr>
<tr>
<td style="text-align:center">spring cloud集成</td>
<td style="text-align:center">已支持</td>
<td style="text-align:center">已支持</td>
<td style="text-align:center">已支持</td>
<td style="text-align:center">已支持</td>
</tr>
</tbody>
</table>
<ul>
<li><p>CAP</p>
<ul>
<li><p><em>C</em> <strong>数据一致性</strong>     一致性是指数据的原子性，在经典的数据库中通过事务来保障，事务完成时，无论成功或回滚，数据都会处于一致的状态，在分布式环境下，一致性是指多个节点数据是否一致</p>
<p><a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="external">raft</a> </p>
</li>
<li><p><em>A</em> <strong>服务可用性</strong> 服务一直保持可用的状态，当用户发出一个请求，服务能在一定的时间内返回结果</p>
</li>
<li><p><em>P</em> <strong>网络分区故障的容错性</strong> 在分布式应用中，可能因为一些分布式的原因导致系统无法运转，好的分区容忍性，使应用虽然是一个分布式系统，但是好像一个可以正常运转的整体</p>
</li>
</ul>
</li>
<li><p>Consul</p>
<ul>
<li>服务发现</li>
<li>健康检查</li>
<li>键值存储</li>
<li>多数据中心</li>
</ul>
<p><a href="https://www.consul.io/intro/index.html" target="_blank" rel="external">官网</a></p>
<p><a href="http://cloud.spring.io/spring-cloud-consul/" target="_blank" rel="external">Spring Cloud Consul 参考文档</a></p>
</li>
<li><p>Eureka Server高可用配置</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> peer1</div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> peer1</div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> http://peer2/eureka/</div><div class="line"></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> peer2</div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> peer2</div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> http://peer1/eureka/</div></pre></td></tr></table></figure>
<p><a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR4/single/spring-cloud.html#_peer_awareness" target="_blank" rel="external">参考文档</a></p>
</li>
</ul>
<h2 id="Spring-Cloud-Ribbon"><a href="#Spring-Cloud-Ribbon" class="headerlink" title="Spring Cloud Ribbon"></a>Spring Cloud Ribbon</h2><p>主要功能是为REST客户端实现负载均衡</p>
<h3 id="Netflix-Ribbon"><a href="#Netflix-Ribbon" class="headerlink" title="Netflix Ribbon"></a>Netflix Ribbon</h3><ul>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Ribbon 客户端</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@RibbonClients</span>(&#123;</div><div class="line">        <span class="meta">@RibbonClient</span>(name = <span class="string">"service-provider"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<p><code>application.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service-provider.ribbon.listOfServers = \</div><div class="line">  http://$&#123;host&#125;:$&#123;port&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Netflix-Ribbon-整合-Eureka"><a href="#Netflix-Ribbon-整合-Eureka" class="headerlink" title="Netflix Ribbon 整合 Eureka"></a>Netflix Ribbon 整合 Eureka</h3><ul>
<li><p>Ribbon 客户端</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@RibbonClients</span>(&#123;</div><div class="line">        <span class="meta">@RibbonClient</span>(name = <span class="string">"service-provider"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span></div><div class="line">  	<span class="meta">@LoadBalanced</span></div><div class="line">	<span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
</li>
</ul>
<h2 id="Spring-Cloud-OpenFeign"><a href="#Spring-Cloud-OpenFeign" class="headerlink" title="Spring Cloud OpenFeign"></a>Spring Cloud OpenFeign</h2><ul>
<li><p>发展</p>
<p>9.0.0版本之后groupId <code>io.netflix.feign</code>更改为<code>io.github.openfeign</code></p>
<p>对应依赖<code>spring-cloud-starter-feign</code>–&gt;<code>spring-cloud-starter-openfeign</code></p>
</li>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>feign 客户端</p>
<p><code>Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableFeignClients</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>feignClient.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"ms-business-task-engine-server"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITaskEngineService</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/TaskQueue/addTaskToQueue"</span>,method = RequestMethod.POST)</div><div class="line">    <span class="function">BaseResponse <span class="title">addTaskToQueue</span><span class="params">(@RequestBody List&lt;SubTaskDTO&gt; subTaskDTOList)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配置参考ribbon</p>
</li>
</ul>
<h2 id="Spring-Cloud-Hystrix"><a href="#Spring-Cloud-Hystrix" class="headerlink" title="Spring Cloud Hystrix"></a>Spring Cloud Hystrix</h2><p>hystrix可帮助隔离每个服务，使单个服务的响应失败，避免微服务架构中因个别服务出现异常而引起级联故障蔓延。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>断路器机制(断路–&gt;半开–&gt;恢复)</li>
<li>资源隔离</li>
<li>熔断降级</li>
</ul>
<h3 id="Hystrix-Dashboard-监控"><a href="#Hystrix-Dashboard-监控" class="headerlink" title="Hystrix Dashboard 监控"></a>Hystrix Dashboard 监控</h3><h2 id="Spring-Cloud-Zuul"><a href="#Spring-Cloud-Zuul" class="headerlink" title="Spring Cloud Zuul"></a>Spring Cloud Zuul</h2><p>在没有网关的时候，随着系统不断庞大，运维维护越来越复杂，接口校验逻辑的冗余越来越多，校验逻辑升级更为复杂。</p>
<h3 id="ZuulFilter"><a href="#ZuulFilter" class="headerlink" title="ZuulFilter"></a>ZuulFilter</h3><h4 id="过滤器类型"><a href="#过滤器类型" class="headerlink" title="过滤器类型"></a>过滤器类型</h4><ul>
<li>pre 路由之前执行</li>
<li>route 路由请求时被调用</li>
<li>post 在route和error过滤器之后被过滤</li>
<li>error 处理请求发生错误时候被调用</li>
</ul>
<h4 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h4><ul>
<li>order越小，优先级越高</li>
</ul>
<h4 id="过滤器是否被执行"><a href="#过滤器是否被执行" class="headerlink" title="过滤器是否被执行"></a>过滤器是否被执行</h4><ul>
<li>shouldFilter = true(结合yaml控制开启)</li>
</ul>
<h4 id="过滤器具体逻辑"><a href="#过滤器具体逻辑" class="headerlink" title="过滤器具体逻辑"></a>过滤器具体逻辑</h4><ul>
<li>run()</li>
</ul>
<h3 id="Routes"><a href="#Routes" class="headerlink" title="Routes"></a>Routes</h3><p>路由规则与列表</p>
<h2 id="Spring-Cloud-Sidecar"><a href="#Spring-Cloud-Sidecar" class="headerlink" title="Spring Cloud Sidecar"></a>Spring Cloud Sidecar</h2><h3 id="非JVM语言接入SpringCloud的两种方案"><a href="#非JVM语言接入SpringCloud的两种方案" class="headerlink" title="非JVM语言接入SpringCloud的两种方案"></a>非JVM语言接入SpringCloud的两种方案</h3><ul>
<li>Sidecar<ul>
<li>必须去实现一个健康检查接口</li>
<li>只有状态，服务治理只能从网关层控制流量</li>
</ul>
</li>
<li>自己实现注册中心API Http接口(推荐)</li>
</ul>
<p><strong><a href="https://github.com/itliusir/Spring-Cloud-Netflix-Demo" target="_blank" rel="external">示例代码-github</a></strong></p>
]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
            <category> SpringCloud </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Netflix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK8的ConcurrentHashMap源码学习笔记]]></title>
      <url>http://itliusir.com/2018/javase-Map-ConcurrentHashMap/</url>
      <content type="html"><![CDATA[<p>摘要:继上篇HashMap分析后，接下来分析ConcurrentHashMap的put和扩容…<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>首要目标:保持并发的可读性,同时最小化更新产生的竞争</li>
<li>次要目标:保持与<code>HashMap</code>相同或更好的空间消耗,并支持许多线程在空表上的高初始插入率。</li>
</ul>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ul>
<li>使用CAS代替之前版本的分段锁</li>
<li>红黑树</li>
</ul>
<h3 id="putVal-方法"><a href="#putVal-方法" class="headerlink" title="putVal()方法"></a>putVal()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * sizeCtl：表初始化和调整控制。当负值时，表被初始化或调整大小:-1用于初始化，-(1 +主动调整大小的线程数)用于调整大小，默认为0。初始化完成后，保存下一个元素count值，以调整表的大小。</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</div><div class="line">    <span class="comment">//volatile读</span></div><div class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</div><div class="line">	    <span class="comment">//如果一个线程发现sizeCtl&lt;0，意味着另外的线程执行CAS操作成功，当前线程只需要让出cpu时间片</span></div><div class="line">        <span class="comment">//volatile读</span></div><div class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>) </div><div class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin</span></div><div class="line">        <span class="comment">//第一次put操作的线程会执行Unsafe.compareAndSwapInt方法修改sizeCtl为-1，有且只有一个线程能够修改成功，其它线程通过Thread.yield()让出CPU时间片等待table初始化完成</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</div><div class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</div><div class="line">                    table = tab = nt;</div><div class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                sizeCtl = sc;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tab;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用Unsafe.getObjectVolatile()获取数组元素，原因是Java数组是无法表达元素是volatile、final的</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</div><div class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</div><div class="line">      Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</div><div class="line">      <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">        <span class="comment">//初始化</span></div><div class="line">        tab = initTable();</div><div class="line">      <span class="comment">//为空，则设置为头节点(CAS)</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</div><div class="line">                     <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</div><div class="line">          <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</div><div class="line">        tab = helpTransfer(tab, f);</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//节点添加</span></div><div class="line">        V oldVal = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">          <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">            <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</div><div class="line">              binCount = <span class="number">1</span>;</div><div class="line">              <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class="line">                K ek;</div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((ek = e.key) == key ||</div><div class="line">                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</div><div class="line">                  oldVal = e.val;</div><div class="line">                  <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                    e.val = value;</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                Node&lt;K,V&gt; pred = e;</div><div class="line">                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                  pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</div><div class="line">                                            value, <span class="keyword">null</span>);</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line">              Node&lt;K,V&gt; p;</div><div class="line">              binCount = <span class="number">2</span>;</div><div class="line">              <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class="line">                                                    value)) != <span class="keyword">null</span>) &#123;</div><div class="line">                oldVal = p.val;</div><div class="line">                <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                  p.val = value;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</div><div class="line">          <span class="comment">//达到阈值转为红黑树</span></div><div class="line">          <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</div><div class="line">            treeifyBin(tab, i);</div><div class="line">          <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> oldVal;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    addCount(<span class="number">1L</span>, binCount);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 如果当前table的个数未达到MIN_TREEIFY_CAPACITY(64)则先进行扩容</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; b; <span class="keyword">int</span> n, sc;</div><div class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</div><div class="line">        tryPresize(n &lt;&lt; <span class="number">1</span>);</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">synchronized</span> (b) &#123;</div><div class="line">          <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</div><div class="line">            TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">              TreeNode&lt;K,V&gt; p =</div><div class="line">                <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</div><div class="line">                                  <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">              <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>)</div><div class="line">                hd = p;</div><div class="line">              <span class="keyword">else</span></div><div class="line">                tl.next = p;</div><div class="line">              tl = p;</div><div class="line">            &#125;</div><div class="line">            setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 扩容(size = 2n)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryPresize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">    <span class="comment">//size如果大于max(Int)/2 则直接扩为max(Int),否则为大于3*size + 1的最小二次幂</span></div><div class="line">    <span class="keyword">int</span> c = (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY :</div><div class="line">    tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> sc;</div><div class="line">    <span class="comment">//volatile读，sizeCtl大于0指没有进行初始化和扩容的操作</span></div><div class="line">    <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123;</div><div class="line">      Node&lt;K,V&gt;[] tab = table; <span class="keyword">int</span> n;</div><div class="line">      <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</div><div class="line">        n = (sc &gt; c) ? sc : c;</div><div class="line">        <span class="comment">//执行Unsafe.compareAndSwapInt方法修改sizeCtl为-1，有且只有一个线程能够修改成功，其它线程通过Thread.yield()让出CPU时间片等待table初始化完成</span></div><div class="line">        <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (table == tab) &#123;</div><div class="line">              <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">              <span class="comment">//初始化</span></div><div class="line">              Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</div><div class="line">              table = nt;</div><div class="line">              sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">          &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            sizeCtl = sc;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//最大了</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123;</div><div class="line">        <span class="keyword">int</span> rs = resizeStamp(n);</div><div class="line">        <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</div><div class="line">          <span class="comment">//竞争失败</span></div><div class="line">          Node&lt;K,V&gt;[] nt;</div><div class="line">		 <span class="comment">//正在咨询大佬...</span></div><div class="line">          <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</div><div class="line">              sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</div><div class="line">              transferIndex &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</div><div class="line">            transfer(tab, nt);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//竞争成功</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</div><div class="line">                                     (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</div><div class="line">          transfer(tab, <span class="keyword">null</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="transfer-方法"><a href="#transfer-方法" class="headerlink" title="transfer()方法"></a>transfer()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = tab.length, stride;</div><div class="line">    <span class="comment">//分片</span></div><div class="line">    <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</div><div class="line">      stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></div><div class="line">    <span class="comment">//nextTab初始化(CAS保证只有一个线程调用此方法)</span></div><div class="line">    <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//根据当前数组长度n，新建一个两倍长度的数组nextTable</span></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</div><div class="line">        nextTab = nt;</div><div class="line">      &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></div><div class="line">        sizeCtl = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      nextTable = nextTab;</div><div class="line">      transferIndex = n;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> nextn = nextTab.length;</div><div class="line">    <span class="comment">//初始化ForwardingNode(nextTab) 用于并发移动时，其它线程可以知道这个节点正在被移动，或已经被移动</span></div><div class="line">    ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</div><div class="line">    <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</div><div class="line">    <span class="comment">//循环的关键变量，判断是否已经扩容完成，完成就return，退出循环</span></div><div class="line">    <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</div><div class="line">      Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</div><div class="line">      <span class="keyword">while</span> (advance) &#123;</div><div class="line">        <span class="keyword">int</span> nextIndex, nextBound;</div><div class="line">        <span class="comment">//i指当前处理的槽位序号，bound指需要处理的槽位边界</span></div><div class="line">        <span class="keyword">if</span> (--i &gt;= bound || finishing)</div><div class="line">          advance = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</div><div class="line">          i = -<span class="number">1</span>;</div><div class="line">          advance = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</div><div class="line">                 (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</div><div class="line">                  nextBound = (nextIndex &gt; stride ?</div><div class="line">                               nextIndex - stride : <span class="number">0</span>))) &#123;</div><div class="line">          bound = nextBound;</div><div class="line">          i = nextIndex - <span class="number">1</span>;</div><div class="line">          advance = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</div><div class="line">        <span class="keyword">int</span> sc;</div><div class="line">        <span class="keyword">if</span> (finishing) &#123;</div><div class="line">          nextTable = <span class="keyword">null</span>;</div><div class="line">          table = nextTab;</div><div class="line">          <span class="comment">//sizeCtl设为新数组大小的3/4(2n-n/2)</span></div><div class="line">          sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//resizeStamp()没看懂</span></div><div class="line">        <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</div><div class="line">          <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">          finishing = advance = <span class="keyword">true</span>;</div><div class="line">          i = n; <span class="comment">// recheck before commit</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</div><div class="line">        advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</div><div class="line">        advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">          <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">            Node&lt;K,V&gt; ln, hn;</div><div class="line">            <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</div><div class="line">              <span class="comment">//使用fn&amp;n可以快速把链表中的元素分为两份</span></div><div class="line">              <span class="keyword">int</span> runBit = fh &amp; n;</div><div class="line">              Node&lt;K,V&gt; lastRun = f;</div><div class="line">              <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</div><div class="line">                <span class="keyword">int</span> b = p.hash &amp; n;</div><div class="line">                <span class="keyword">if</span> (b != runBit) &#123;</div><div class="line">                  runBit = b;</div><div class="line">                  lastRun = p;</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</div><div class="line">                ln = lastRun;</div><div class="line">                hn = <span class="keyword">null</span>;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">else</span> &#123;</div><div class="line">                hn = lastRun;</div><div class="line">                ln = <span class="keyword">null</span>;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</div><div class="line">                <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</div><div class="line">                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</div><div class="line">                  ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                  hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</div><div class="line">              &#125;</div><div class="line">              <span class="comment">//放到新Tab</span></div><div class="line">              setTabAt(nextTab, i, ln);</div><div class="line">              setTabAt(nextTab, i + n, hn);</div><div class="line">              setTabAt(tab, i, fwd);</div><div class="line">              advance = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line">              TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</div><div class="line">              TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">              TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">              <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</div><div class="line">              <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">                <span class="keyword">int</span> h = e.hash;</div><div class="line">                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</div><div class="line">                  (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                <span class="comment">//红黑树同样是根据h&amp;n分为两份</span></div><div class="line">                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</div><div class="line">                  <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</div><div class="line">                    lo = p;</div><div class="line">                  <span class="keyword">else</span></div><div class="line">                    loTail.next = p;</div><div class="line">                  loTail = p;</div><div class="line">                  ++lc;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</div><div class="line">                    hi = p;</div><div class="line">                  <span class="keyword">else</span></div><div class="line">                    hiTail.next = p;</div><div class="line">                  hiTail = p;</div><div class="line">                  ++hc;</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">              <span class="comment">//拆分之后如果长度小于默认阈值(6)则转为链表</span></div><div class="line">              ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</div><div class="line">              (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</div><div class="line">              hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</div><div class="line">              (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</div><div class="line">              <span class="comment">//设置新的Tab</span></div><div class="line">              setTabAt(nextTab, i, ln);</div><div class="line">              setTabAt(nextTab, i + n, hn);</div><div class="line">              setTabAt(tab, i, fwd);</div><div class="line">              advance = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="HashMap-vs-ConcurrentHashMap"><a href="#HashMap-vs-ConcurrentHashMap" class="headerlink" title="HashMap vs ConcurrentHashMap"></a><code>HashMap</code> vs <code>ConcurrentHashMap</code></h2><ul>
<li><code>ConcurrentHashMap</code>是线程安全的，在并发环境下不需要额外同步</li>
<li><code>ConcurrentHashMap</code>有很好的扩展性，在多线程环境下性能方面比做了同步的<code>HashMap</code>要好，但是在单线程环境下，<code>HashMap</code>会比<code>ConcurrentHashMap</code>好一点</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.jianshu.com/p/f6730d5784ad" target="_blank" rel="external">深入分析ConcurrentHashMap1.8的扩容实现</a></li>
<li><a href="https://github.com/seaswalker/JDK/blob/master/note/ConcurrentHashMap/concurrenthashmap.md" target="_blank" rel="external">seaswalker/JDK</a></li>
</ul>
<h1 id="晚安"><a href="#晚安" class="headerlink" title="晚安~"></a>晚安~</h1>]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ConcurrentHashMap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK8的HashMap源码学习笔记]]></title>
      <url>http://itliusir.com/2018/javase-Map-HashMap/</url>
      <content type="html"><![CDATA[<p>摘要:接下来开始学习JDK常用类的源码部分，从HashMap开始….<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>HashMap</code>是数组+链表+红黑树实现的，红黑树是在JDK8中增加的，优化了链表过长的效率问题</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/hashmap.png" alt="HashMap"></p>
<h3 id="泊松分布"><a href="#泊松分布" class="headerlink" title="泊松分布"></a>泊松分布</h3><p><code>HashMap</code>源码注释有提到这个概念，泊松分布是单位时间内独立事件发生次数的概率分布，指数分布是独立事件的时间间隔的概率分布，可以参考<a href="http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html" target="_blank" rel="external">阮一峰泊松分布博客</a></p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><ul>
<li>都会带hash值作为参数(通常由公共参数提供)，允许它们彼此调用而无需重新计算用户哈希代码。</li>
</ul>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;		<span class="comment">// 默认初始容量</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;		<span class="comment">//最大容量(超出则扩为(2^31)-1)</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;		<span class="comment">//默认加载因子</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;				<span class="comment">//转树的阈值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;			<span class="comment">//当桶数组容量小于该值时，优先进行扩容，而不是树化(容量大小会影响碰撞率)</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;			<span class="comment">//红黑树转链表阈值(扩容时候红黑树拆分用到)</span></div><div class="line"><span class="keyword">int</span> threshold;		<span class="comment">//当前HashMap所能容纳键值对数量的最大值</span></div></pre></td></tr></table></figure>
<p>算threshold的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</div><div class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>tableSizeFor()</code>方法作用是算出大于或等于cap的最小2的幂，如2^5+1的结果则是2^6也就是64</p>
<h3 id="hash-方法"><a href="#hash-方法" class="headerlink" title="hash()方法"></a>hash()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h;</div><div class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/hash.png" alt="hash"></p>
<p>可以看到在JDK8的实现中，优化了高位运算的算法，自己的高半区和低半区做异或，减少了低位的碰撞率。</p>
<h3 id="putVal-方法"><a href="#putVal-方法" class="headerlink" title="putVal()方法"></a>putVal()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></div><div class="line">                   <span class="keyword">boolean</span> evict) &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</div><div class="line">    <span class="comment">//初始化buckets table+为null扩容</span></div><div class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">      n = (tab = resize()).length;</div><div class="line">    <span class="comment">//位置为null直接插入新的节点</span></div><div class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</div><div class="line">      tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      Node&lt;K,V&gt; e; K k;</div><div class="line">      <span class="comment">//如果hash值相同并且key相同则直接覆盖</span></div><div class="line">      <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">          ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">        e = p;</div><div class="line">      <span class="comment">//判断该链是不是红黑树，是的话走Tree版本的putVal</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</div><div class="line">        e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</div><div class="line">      <span class="comment">//否则则是链表</span></div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</div><div class="line">          <span class="comment">//如果下个节点为空则放入下个节点</span></div><div class="line">          <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</div><div class="line">            p.next = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">            <span class="comment">//链表长度大于8转换为红黑树进行处理</span></div><div class="line">            <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></div><div class="line">              treeifyBin(tab, hash);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="comment">//覆盖</span></div><div class="line">          <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">              ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          p = e;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></div><div class="line">        V oldValue = e.value;</div><div class="line">        <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</div><div class="line">          e.value = value;</div><div class="line">        afterNodeAccess(e);</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    ++modCount;</div><div class="line">    <span class="comment">//超出当前容量最大值就扩容</span></div><div class="line">    <span class="keyword">if</span> (++size &gt; threshold)</div><div class="line">      resize();</div><div class="line">    afterNodeInsertion(evict);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="resize-方法"><a href="#resize-方法" class="headerlink" title="resize()方法"></a>resize()方法</h3><p>我们先来看下扩容机制，在<code>HashMap</code>中元素位置都是2的幂，接下来我们来看具体代码实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class="line">    Node&lt;K,V&gt;[] oldTab = table;</div><div class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</div><div class="line">    <span class="keyword">int</span> oldThr = threshold;</div><div class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="comment">//如果当前容量大于默认值2^30，则扩容至2^31-1</span></div><div class="line">      <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class="line">        threshold = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">return</span> oldTab;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//double</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class="line">               oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class="line">        newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//initial capacity</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></div><div class="line">      newCap = oldThr;</div><div class="line">  	<span class="comment">//默认构造方法初始化Cap</span></div><div class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></div><div class="line">      newCap = DEFAULT_INITIAL_CAPACITY;</div><div class="line">      newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class="line">    &#125;</div><div class="line">  	<span class="comment">//newThr 为 0 时，按阈值计算公式进行计算</span></div><div class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</div><div class="line">      newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</div><div class="line">                (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</div><div class="line">    &#125;</div><div class="line">    threshold = newThr;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</div><div class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</div><div class="line">    table = newTab;</div><div class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">//把每个bucket都移动到新的buckets中</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</div><div class="line">        Node&lt;K,V&gt; e;</div><div class="line">        <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</div><div class="line">          oldTab[j] = <span class="keyword">null</span>;</div><div class="line">          <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</div><div class="line">            newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</div><div class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</div><div class="line">            <span class="comment">//对红黑树进行拆分</span></div><div class="line">            ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</div><div class="line">          <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></div><div class="line">            Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">            Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">            Node&lt;K,V&gt; next;</div><div class="line">            <span class="comment">//遍历链表</span></div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">              next = e.next;</div><div class="line">              <span class="comment">//原位置(根据0和非0判断是否扩容)</span></div><div class="line">              <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</div><div class="line">                  loHead = e;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                  loTail.next = e;</div><div class="line">                loTail = e;</div><div class="line">              &#125;</div><div class="line">              <span class="comment">//原位置+oldCap</span></div><div class="line">              <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</div><div class="line">                  hiHead = e;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                  hiTail.next = e;</div><div class="line">                hiTail = e;</div><div class="line">              &#125;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</div><div class="line">            <span class="comment">//原位置的放到bucket里</span></div><div class="line">            <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</div><div class="line">              loTail.next = <span class="keyword">null</span>;</div><div class="line">              newTab[j] = loHead;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//原位置+oldCap的放到bucket里</span></div><div class="line">            <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</div><div class="line">              hiTail.next = <span class="keyword">null</span>;</div><div class="line">              newTab[j + oldCap] = hiHead;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newTab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h3><p>该方法是红黑树拆分方法，普通链表需要拆分，红黑树也同样需要拆分</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> bit)</span> </span>&#123;</div><div class="line">    TreeNode&lt;K,V&gt; b = <span class="keyword">this</span>;</div><div class="line">    <span class="comment">// Relink into lo and hi lists, preserving order</span></div><div class="line">    TreeNode&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">    TreeNode&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</div><div class="line">  	<span class="comment">//对红黑树节点进行分组(同链表一个原理)</span></div><div class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="keyword">null</span>; e = next) &#123;</div><div class="line">      next = (TreeNode&lt;K,V&gt;)e.next;</div><div class="line">      e.next = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> ((e.prev = loTail) == <span class="keyword">null</span>)</div><div class="line">          loHead = e;</div><div class="line">        <span class="keyword">else</span></div><div class="line">          loTail.next = e;</div><div class="line">        loTail = e;</div><div class="line">        ++lc;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> ((e.prev = hiTail) == <span class="keyword">null</span>)</div><div class="line">          hiHead = e;</div><div class="line">        <span class="keyword">else</span></div><div class="line">          hiTail.next = e;</div><div class="line">        hiTail = e;</div><div class="line">        ++hc;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (loHead != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">//如果 loHead 不为空，且链表长度小于等于 6，则将红黑树转成链表</span></div><div class="line">      <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</div><div class="line">        tab[index] = loHead.untreeify(map);</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//原位置的放到bucket里</span></div><div class="line">        tab[index] = loHead;</div><div class="line">        <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) <span class="comment">// (else is already treeified)</span></div><div class="line">          loHead.treeify(tab);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</div><div class="line">        tab[index + bit] = hiHead.untreeify(map);</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//原位置+oldCap的放到bucket里</span></div><div class="line">        tab[index + bit] = hiHead;</div><div class="line">        <span class="keyword">if</span> (loHead != <span class="keyword">null</span>)</div><div class="line">          hiHead.treeify(tab);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="untreeify-方法"><a href="#untreeify-方法" class="headerlink" title="untreeify()方法"></a>untreeify()方法</h3><p>此方法是将红黑树转为链表</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">untreeify</span><span class="params">(HashMap&lt;K,V&gt; map)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt; q = <span class="keyword">this</span>; q != <span class="keyword">null</span>; q = q.next) &#123;</div><div class="line">      <span class="comment">//转为Node</span></div><div class="line">      Node&lt;K,V&gt; p = map.replacementNode(q, <span class="keyword">null</span>);</div><div class="line">      <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</div><div class="line">        hd = p;</div><div class="line">      <span class="keyword">else</span></div><div class="line">        tl.next = p;</div><div class="line">      tl = p;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> hd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node&lt;K,V&gt; <span class="title">replacementNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(p.hash, p.key, p.value, next);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="晚安"><a href="#晚安" class="headerlink" title="晚安~"></a>晚安~</h1>]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XXL-JOB使用笔记]]></title>
      <url>http://itliusir.com/2018/scheduler-xxl-job/</url>
      <content type="html"><![CDATA[<p>摘要:<code>XXL-JOB</code>是一个轻量级分布式任务调度框架，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用<br><a id="more"></a><br>正文:</p>
<h1 id="XXL-JOB的介绍"><a href="#XXL-JOB的介绍" class="headerlink" title="XXL-JOB的介绍"></a>XXL-JOB的介绍</h1><p><code>XXL-JOB</code>是一个轻量级分布式任务调度框架，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用</p>
<h1 id="XXL-JOB快速入门"><a href="#XXL-JOB快速入门" class="headerlink" title="XXL-JOB快速入门"></a>XXL-JOB快速入门</h1><h2 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h2><ul>
<li><a href="http://www.xuxueli.com/xxl-job/#/" target="_blank" rel="external">中文文档</a></li>
<li><a href="http://www.xuxueli.com/xxl-job/en/" target="_blank" rel="external">English Documentation</a></li>
</ul>
<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><table>
<thead>
<tr>
<th>源码仓库地址</th>
<th>Release Download</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/xuxueli/xxl-job" target="_blank" rel="external">https://github.com/xuxueli/xxl-job</a></td>
<td><a href="https://github.com/xuxueli/xxl-job/releases" target="_blank" rel="external">Download</a></td>
</tr>
<tr>
<td><a href="http://gitee.com/xuxueli0323/xxl-job" target="_blank" rel="external">http://gitee.com/xuxueli0323/xxl-job</a></td>
<td><a href="http://gitee.com/xuxueli0323/xxl-job/releases" target="_blank" rel="external">Download</a></td>
</tr>
</tbody>
</table>
<h2 id="配置部署”调度中心”"><a href="#配置部署”调度中心”" class="headerlink" title="配置部署”调度中心”"></a>配置部署”调度中心”</h2><h3 id="初始化“调度数据库”"><a href="#初始化“调度数据库”" class="headerlink" title="初始化“调度数据库”"></a>初始化“调度数据库”</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxl-job\doc\db\tables_xxl_job.sql</div></pre></td></tr></table></figure>
<h3 id="修改数据库配置信息"><a href="#修改数据库配置信息" class="headerlink" title="修改数据库配置信息"></a>修改数据库配置信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxl-job\xxl-job-admin\src\main\resources\xxl-job-admin.properties</div></pre></td></tr></table></figure>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>在<code>xxl-job</code>根目录下执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean package</div></pre></td></tr></table></figure>
<h3 id="部署“调度中心”"><a href="#部署“调度中心”" class="headerlink" title="部署“调度中心”"></a>部署“调度中心”</h3><ol>
<li>找到<code>xxl-job-admin</code>的target目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxl-job\xxl-job-admin\target\xxl-job-admin-1.9.1-SNAPSHOT.war</div></pre></td></tr></table></figure>
<ol>
<li><p>更改名字为<code>xxl-job-admin.war</code>,放在tomcat的<code>webapps</code>下,在bin文件夹双击执行<code>startup.bat</code></p>
</li>
<li><p>访问<a href="http://localhost:8080/xxl-job-admin" target="_blank" rel="external">http://localhost:8080/xxl-job-admin</a></p>
</li>
<li><p>登录(密码在<code>xxl-job-admin.properties</code>)后界面如下图所示:</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/xxl-job2.png" alt="调度中心"></p>
</li>
</ol>
<h3 id="Docker部署”调度中心”"><a href="#Docker部署”调度中心”" class="headerlink" title="Docker部署”调度中心”"></a>Docker部署”调度中心”</h3><ul>
<li><code>PreBuild.sh</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">docker rm -f $(docker ps -a  | grep &quot;tomcat/xxl-job-admim&quot;| awk &apos;&#123; print $1 &#125;&apos;)  &gt;/dev/null 2&gt;&amp;1</div><div class="line">docker rmi -f tomcat/xxl-job-admim  &gt;/dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>
<ul>
<li><code>Dockerfile</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FROM tomcat:8</div><div class="line">## db设置为获取环境变量 方便动态传参</div><div class="line">ENV driverClass com.mysql.jdbc.Driver</div><div class="line">ENV url jdbc:mysql://localhost:3306/xxl-job?useUnicode=true&amp;characterEncoding=UTF-8</div><div class="line">ENV user root</div><div class="line">ENV password root</div><div class="line">ADD xxl-job-admin.war /usr/local/tomcat/webapps/</div><div class="line">CMD [&quot;catalina.sh&quot;, &quot;run&quot;]</div></pre></td></tr></table></figure>
<ul>
<li><code>Dockerbuild.sh</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t tomcat/xxl-job-admim .</div></pre></td></tr></table></figure>
<ul>
<li><code>DockerRun.sh</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --restart=always -d -p 8997:8080 tomcat/xxl-job-admim &gt;/dev/null 2&gt;&amp;1</div></pre></td></tr></table></figure>
<h2 id="配置部署“执行器项目”"><a href="#配置部署“执行器项目”" class="headerlink" title="配置部署“执行器项目”"></a>配置部署“执行器项目”</h2><h3 id="参考官方Demo"><a href="#参考官方Demo" class="headerlink" title="参考官方Demo"></a>参考<a href="https://github.com/xuxueli/xxl-job/tree/master/xxl-job-executor-samples/xxl-job-executor-sample-springboot" target="_blank" rel="external">官方Demo</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxl-job\xxl-job-executor-samples\xxl-job-executor-sample-springboot</div></pre></td></tr></table></figure>
<p>在根目录 <code>mvn clean package</code>然后执行<code>java -jar xxx.jar</code>或者IDE启动<code>SpringBoot</code></p>
<h3 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h3><ol>
<li><p>新增执行器</p>
<p>打开“调度中心”的执行器管理，发现有一个默认的，<code>AppName</code>正对应<code>xxl-job-executor-sample-springboot</code>服务配置的<code>xxl.job.executor.appname</code>，此时可以使用默认的无需添加。</p>
</li>
<li><p>新增任务</p>
<p>打开”调度中心”的任务管理，点击新增任务：</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/xxl-job3.png" alt="新增任务"></p>
<p>配置参考如下配置，<code>JobHandler</code>填写<code>xxl-job-executor-sample-springboot</code>的<code>DemoJobHandler.java</code>类上的<code>@JobHandler(value=&quot;demoJobHandler&quot;)</code>value值，Cron表达式可以参考<a href="http://cron.qqe2.com/" target="_blank" rel="external">在线Cron表达式生成器</a></p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/xxl-job4.png" alt="新增任务"></p>
<p>保存成功后点击执行按钮</p>
</li>
</ol>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>点击任务右侧的日志按钮，可以查看该任务的日志：</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/xxl-job6.png" alt="日志列表"></p>
<p>点击执行日志可以看到当前执行的log,对应<code>xxl-job-executor-sample-springboot</code>Demo的<code>DemoJobHandler.java</code>的代码:</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/xxl-job5.png" alt="log"></p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/xxl-job7.png" alt="log"></p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> scheduler </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xxl-job </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Validator 使用总结]]></title>
      <url>http://itliusir.com/2018/frame-validator/</url>
      <content type="html"><![CDATA[<p>摘要:祝大家元旦快乐！在日常开发中，前台对参数校验后，为了避免用户直接使用http工具直接向后台发起不合法请求，后台往往也需要校验，本文将要介绍的是使用Validator对数据进行校验。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>首先说下大家常用的hibernate-validator，它是对<a href="http://download.oracle.com/otndocs/jcp/bean_validation-1.0-fr-oth-JSpec/" target="_blank" rel="external">JSR-303</a>/<a href="http://download.oracle.com/otndocs/jcp/bean_validation-1_1-fr-eval-spec/" target="_blank" rel="external">JSR-349</a>标准的实现，然后spring为了给开发者提供便捷集成了 <code>hibernate-validator</code>，默认在springmvc模块。</p>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>本文所介绍皆在springboot应用的基础上，首先加上web模块：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以查看其子依赖，发现web模块默认使用了hibernate-validator：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="对实体类添加校验"><a href="#对实体类添加校验" class="headerlink" title="对实体类添加校验"></a>对实体类添加校验</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentTrustor</span> <span class="keyword">implements</span> <span class="title">Serializable</span>,<span class="title">UniqueVerifiableVO</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4095871718305603749L</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 主键ID</div><div class="line">     */</div><div class="line">    <span class="meta">@Id</span></div><div class="line">	<span class="meta">@ApiModelProperty</span>(value=<span class="string">"主键ID"</span>, required = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Integer fid;</div><div class="line">	</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 代理人代码</div><div class="line">     */</div><div class="line">	<span class="meta">@Length</span>(min = <span class="number">3</span>,message = <span class="string">"代理人代码位数至少三位"</span>)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"ftrustor_id"</span>)</div><div class="line">	<span class="meta">@ApiModelProperty</span>(value=<span class="string">"代理人代码"</span>, required = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String ftrustorId;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 联系人邮箱</div><div class="line">     */</div><div class="line">	<span class="meta">@Email</span>(message = <span class="string">"邮箱格式错误"</span>)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"femail"</span>)</div><div class="line">	<span class="meta">@ApiModelProperty</span>(value=<span class="string">"联系人邮箱"</span>, required = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String femail;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过注释名即可推断出校验的内容，message用作校验失败时的提示信息。</p>
<h1 id="对Rest层添加校验"><a href="#对Rest层添加校验" class="headerlink" title="对Rest层添加校验"></a>对Rest层添加校验</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ApiOperation</span>(value=<span class="string">"新增"</span>, notes=<span class="string">""</span>)</div><div class="line">   <span class="meta">@PostMapping</span>(value = <span class="string">""</span>)</div><div class="line">   <span class="comment">//@Transactional(rollbackFor=Exception.class)</span></div><div class="line">   <span class="function"><span class="keyword">public</span> ObjectRestResponse&lt;AgentTrustor&gt; <span class="title">add</span><span class="params">(@RequestBody @Validated AgentTrustor agentTrustor)</span> <span class="keyword">throws</span> BaseException</span>&#123;</div><div class="line">       agentTrustorBiz.bizInsertSelective(agentTrustor);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ObjectRestResponse&lt;AgentTrustor&gt;().rel(<span class="keyword">true</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h1 id="统一异常的处理"><a href="#统一异常的处理" class="headerlink" title="统一异常的处理"></a>统一异常的处理</h1><p>经过对校验异常的debug发现，该异常为<code>MethodArgumentNotValidException</code>：</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/bindingResult.png" alt="MethodArgumentNotValidException"></p>
<p>可以看到该异常对象的结构，同样我们可以根据其结构解析出想要的结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</div><div class="line">   <span class="function"><span class="keyword">public</span> BaseResponse <span class="title">validExceptionHandler</span><span class="params">(HttpServletResponse response, 		  			MethodArgumentNotValidException ex)</span> </span>&#123;</div><div class="line">       BindingResult bindingResult = ex.getBindingResult();</div><div class="line">       StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">       <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</div><div class="line">           <span class="keyword">for</span> (FieldError fieldError : bindingResult.getFieldErrors()) &#123;</div><div class="line">               <span class="comment">//该格式仅仅作为response展示和log作用，前端应自己做校验</span></div><div class="line">               stringBuffer.append(fieldError.getObjectName() + <span class="string">"--"</span> + 							fieldError.getDefaultMessage() + <span class="string">" "</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       logger.error(stringBuffer.toString());</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> BaseResponse(HttpStatus.BAD_REQUEST.value(),stringBuffer.toString());</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上面代码是统一异常处理中的一部分，主要是用来处理参数校验产生的<code>MethodArgumentNotValidException</code>异常。</p>
<h1 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h1><p>当我们遇到不同场景需要有不同的校验规则时候，我们可以使用分组校验。如：一个请求只校验id,一个请求只校验email：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentTrustor</span> <span class="keyword">implements</span> <span class="title">Serializable</span>,<span class="title">UniqueVerifiableVO</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4095871718305603749L</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 主键ID</div><div class="line">     */</div><div class="line">    <span class="meta">@Id</span></div><div class="line">	<span class="meta">@ApiModelProperty</span>(value=<span class="string">"主键ID"</span>, required = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Integer fid;</div><div class="line">	</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 代理人代码</div><div class="line">     */</div><div class="line">	<span class="meta">@Length</span>(min = <span class="number">3</span>,message = <span class="string">"代理人代码位数至少三位"</span>,groups = &#123;ID.class&#125;)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"ftrustor_id"</span>)</div><div class="line">	<span class="meta">@ApiModelProperty</span>(value=<span class="string">"代理人代码"</span>, required = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String ftrustorId;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 联系人邮箱</div><div class="line">     */</div><div class="line">	<span class="meta">@Email</span>(message = <span class="string">"邮箱格式错误"</span>,groups = &#123;EMAIL.class&#125;)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"femail"</span>)</div><div class="line">	<span class="meta">@ApiModelProperty</span>(value=<span class="string">"联系人邮箱"</span>, required = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String femail;</div><div class="line">  </div><div class="line">  	<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ID</span></span>&#123;&#125;;</div><div class="line">  </div><div class="line">  	<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EMAIL</span></span>&#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据需要在@Validated属性中指定需要校验的分组名，可以指定1到多个。指定到的分组名会全部进行校验，不指定的不校验</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ApiOperation</span>(value=<span class="string">"新增"</span>, notes=<span class="string">""</span>)</div><div class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">""</span>)</div><div class="line">    <span class="comment">//@Transactional(rollbackFor=Exception.class)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ObjectRestResponse&lt;AgentTrustor&gt; <span class="title">add</span><span class="params">(@RequestBody @Validated(AgentTrustor.ID.class)</span> AgentTrustor agentTrustor) <span class="keyword">throws</span> BaseException</span>&#123;</div><div class="line">        agentTrustorBiz.bizInsertSelective(agentTrustor);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjectRestResponse&lt;AgentTrustor&gt;().rel(<span class="keyword">true</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p><strong>JSR提供的校验注解</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Null   被注释的元素必须为 null    </div><div class="line">@NotNull    被注释的元素必须不为 null    </div><div class="line">@AssertTrue     被注释的元素必须为 true    </div><div class="line">@AssertFalse    被注释的元素必须为 false    </div><div class="line">@Min(value)     被注释的元素必须是一个数字，其值必须大于等于指定的最小值    </div><div class="line">@Max(value)     被注释的元素必须是一个数字，其值必须小于等于指定的最大值    </div><div class="line">@DecimalMin(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值    </div><div class="line">@DecimalMax(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值    </div><div class="line">@Size(max=, min=)   被注释的元素的大小必须在指定的范围内    </div><div class="line">@Digits (integer, fraction)     被注释的元素必须是一个数字，其值必须在可接受的范围内    </div><div class="line">@Past   被注释的元素必须是一个过去的日期    </div><div class="line">@Future     被注释的元素必须是一个将来的日期    </div><div class="line">@Pattern(regex=,flag=)  被注释的元素必须符合指定的正则表达式</div></pre></td></tr></table></figure>
<p><strong>Hibernate Validator提供的校验注解</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@NotBlank(message =)   验证字符串非null，且长度必须大于0    </div><div class="line">@Email  被注释的元素必须是电子邮箱地址    </div><div class="line">@Length(min=,max=)  被注释的字符串的大小必须在指定的范围内    </div><div class="line">@NotEmpty   被注释的字符串的必须非空    </div><div class="line">@Range(min=,max=,message=)  被注释的元素必须在合适的范围内</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> SpringMVC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Validator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker部署基于nodejs的vue应用]]></title>
      <url>http://itliusir.com/2017/Docker-Nodejs-Vue/</url>
      <content type="html"><![CDATA[<p>摘要:use Docker containers for Vue.js applications<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>安装<a href="https://www.docker.com/" target="_blank" rel="external">docker</a>，具体操作参考<a href="https://docs.docker.com/engine/installation/" target="_blank" rel="external">官方文档</a>。</p>
<h1 id="Vue项目准备"><a href="#Vue项目准备" class="headerlink" title="Vue项目准备"></a>Vue项目准备</h1><h2 id="在项目根目录下，添加Dockerfile文件，Dockerfile是一个文本文档，其中包含用户可以在命令行上调用以构建镜像的所有命令-注意要先清除node-modules文件夹内容"><a href="#在项目根目录下，添加Dockerfile文件，Dockerfile是一个文本文档，其中包含用户可以在命令行上调用以构建镜像的所有命令-注意要先清除node-modules文件夹内容" class="headerlink" title="- 在项目根目录下，添加Dockerfile文件，Dockerfile是一个文本文档，其中包含用户可以在命令行上调用以构建镜像的所有命令(注意要先清除node_modules文件夹内容)"></a>- 在项目根目录下，添加<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="external">Dockerfile</a>文件，Dockerfile是一个文本文档，其中包含用户可以在命令行上调用以构建镜像的所有命令(注意要先清除node_modules文件夹内容)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#指定我们的基础镜像是node，版本是v8.0.0 指定的基础image可以是官方远程仓库中的，也可以位于本地仓库</div><div class="line">	FROM node:8.0.0</div><div class="line"></div><div class="line">	#指定维护者的信息</div><div class="line">	MAINTAINER mser</div><div class="line"></div><div class="line">	#将根目录下的文件都copy到container（运行此镜像的容器）文件系统的app文件夹下</div><div class="line">	ADD . /app/</div><div class="line"></div><div class="line">	#cd到app文件夹下</div><div class="line">	WORKDIR /app</div><div class="line"></div><div class="line">#安装项目依赖包</div><div class="line">	RUN npm install</div><div class="line">	RUN npm rebuild node-sass --force</div><div class="line"></div><div class="line">	#配置环境变量</div><div class="line">	ENV HOST 0.0.0.0</div><div class="line">	ENV PORT 9528</div><div class="line"></div><div class="line">	#容器对外暴露的端口号</div><div class="line">	EXPOSE 9528</div><div class="line"></div><div class="line">	#容器启动时执行的命令 每个Dockerfile只有一个CMD命令 多了则会覆盖之前的CMD</div><div class="line">	CMD [&quot;npm&quot;, &quot;run&quot;,&quot;dev&quot;]</div></pre></td></tr></table></figure>
<h1 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h1><h2 id="查看本地docker镜像"><a href="#查看本地docker镜像" class="headerlink" title="- 查看本地docker镜像"></a>- 查看本地docker镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost AG-Admin-v2.0]# docker images</div><div class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">docker.io/sebp/elk   latest              2918030b8729        8 days ago          1.051 GB</div><div class="line">docker.io/node       8.0.0               065e283f68bd        5 months ago        666.5 MB</div></pre></td></tr></table></figure>
<h2 id="build"><a href="#build" class="headerlink" title="- build"></a>- build</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@localhost AG-Admin-v2.0]# docker build -t ms-ui:1.0 .</div><div class="line">Sending build context to Docker daemon 3.897 MB</div><div class="line">Step 1 : FROM node:8.0.0</div><div class="line">	---&gt; 065e283f68bd</div><div class="line">Step 2 : MAINTAINER EOI</div><div class="line">---&gt; Running in 275025d855c0</div><div class="line">	---&gt; e66a97693ac5</div><div class="line">Removing intermediate container 275025d855c0</div><div class="line">Step 3 : ADD . /app/</div><div class="line">	---&gt; bbb817cfbb8b</div><div class="line">.....省略一万行</div><div class="line">Successfully built 6af9d7ffb2ab</div></pre></td></tr></table></figure>
<h2 id="启动镜像"><a href="#启动镜像" class="headerlink" title="- 启动镜像"></a>- 启动镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost AG-Admin-v2.0]# docker images</div><div class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">ms-ui                1.0                 6af9d7ffb2ab        2 minutes ago       920.5 MB</div><div class="line">docker.io/sebp/elk   latest              2918030b8729        8 days ago          1.051 GB</div><div class="line">docker.io/node       8.0.0               065e283f68bd        5 months ago        666.5 MB</div><div class="line"></div><div class="line">[root@localhost AG-Admin-v2.0]# docker run -d -p 9528:9528 ms-ui:1.0</div><div class="line">1ffc51cbea42bb4ee9f43a5987ed2569923cfe42bb5f140cf8268fd38d9dd37a</div></pre></td></tr></table></figure>
<p>docker run -d -p 9528:9528 ms-ui:1.0中的 -d 代表是后台运行、-p 9528:9528代表本地9528映射到容器内的9528端口，ms-ui:1.0是我们要运行的镜像</p>
<h2 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="- 测试是否成功"></a>- 测试是否成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@localhost AG-Admin-v2.0]# docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                     PORTS                    NAMES</div><div class="line">1ffc51cbea42        ms-ui:1.0           &quot;npm run dev&quot;            About a minute ago   Up About a minute          0.0.0.0:9528-&gt;9528/tcp   zen_lamarr</div><div class="line">ea9400d0259b        sebp/elk            &quot;/usr/local/bin/start&quot;   6 days ago           Exited (137) 2 hours ago                            test_elk_1</div><div class="line">73e22237ef4e        sebp/elk            &quot;/usr/local/bin/start&quot;   6 days ago           Exited (1) 6 days ago                               elk</div><div class="line"></div><div class="line">[root@localhost AG-Admin-v2.0]# docker logs 1ffc51cbea42</div><div class="line">npm info it worked if it ends with ok</div><div class="line">npm info using npm@5.0.0</div><div class="line">npm info using node@v8.0.0</div><div class="line">&gt; juicy@1.2.0 dev /app</div><div class="line">&gt; node build/dev-server.js</div><div class="line">npm info lifecycle juicy@1.2.0~predev: juicy@1.2.0</div><div class="line">npm info lifecycle juicy@1.2.0~dev: juicy@1.2.0</div><div class="line">[HPM] Proxy created: /jwt  -&gt;  http://localhost:8765</div><div class="line">[HPM] Proxy rewrite rule created: &quot;^/jwt&quot; ~&gt; &quot;/jwt&quot;</div><div class="line">[HPM] Proxy created: /api  -&gt;  http://localhost:8765</div><div class="line">[HPM] Proxy rewrite rule created: &quot;^/api&quot; ~&gt; &quot;/api&quot;</div><div class="line">(node:15) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Exited with code 3</div><div class="line">(node:15) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</div><div class="line"> DONE  Compiled successfully in 10673ms07:51:55</div><div class="line">&gt; Listening at http://localhost:9528</div></pre></td></tr></table></figure>
<p>docker ps -a可以查看docker的运行容器，发现我们的容器正在运行，可以通过docker logs <container id=""> 来查看运行日志，当看到我们熟悉的Listening at <a href="http://localhost:9528" target="_blank" rel="external">http://localhost:9528</a> 就知道成功啦，可以在本地通过浏览器访问UI。</container></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="- 常用命令"></a>- 常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker stop &lt;CONTAINER ID&gt;可以停止容器运行</div><div class="line"></div><div class="line">	docker start &lt;CONTAINER ID&gt;可以启动容器运行</div><div class="line"></div><div class="line">	docker restart &lt;CONTAINER ID&gt;可以重启容器</div><div class="line"></div><div class="line">	docker rm &lt;CONTAINER ID&gt; -f可以强制删除在运行的容器</div><div class="line"></div><div class="line">docker rmi &lt;IMAGE NAME&gt; 可以删除镜像</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> nodejs </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK8的CAS实现学习笔记]]></title>
      <url>http://itliusir.com/2017/javase-CAS/</url>
      <content type="html"><![CDATA[<p>摘要:CAS全称为compare and swap，是原子操作的一种，可用于在多线程编程中实现不被打断的数据交换操作，从而避免多线程同时改写某一数据时由于执行顺序不确定性以及中断的不可预知性产生的数据不一致问题。 该操作通过将内存中的值与指定数据进行比较，当数值一样时将内存中的数据替换为新的值。<br>                                                        –<strong>from Wikipedia</strong><br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>在使用上，通常会记录下某块内存中的旧值，通过对旧值进行一系列的操作后得到新值，然后通过CAS操作将新值与旧值进行交换。如果这块内存的值在这期间内没被修改过，则旧值会与内存中的数据相同，这时CAS操作将会成功执行 使内存中的数据变为新值。如果内存中的值在这期间内被修改过，则一般来说旧值会与内存中的数据不同，这时CAS操作将会失败，新值将不会被写入内存。</p>
<h1 id="CAS的实现"><a href="#CAS的实现" class="headerlink" title="CAS的实现"></a>CAS的实现</h1><p>接下来我们去看CAS在java中的实现，<a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/misc/Unsafe.java" target="_blank" rel="external">sun.misc.Unsafe</a>提供了compareAndSwap系列函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Atomically update Java variable to &lt;tt&gt;x&lt;/tt&gt; if it is currently</div><div class="line">    * holding &lt;tt&gt;expected&lt;/tt&gt;.</div><div class="line">    * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if successful</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapObject</span><span class="params">(Object o, <span class="keyword">long</span> offset,</span></span></div><div class="line">                                                    Object expected,</div><div class="line">                                                    Object x);</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Atomically update Java variable to &lt;tt&gt;x&lt;/tt&gt; if it is currently</div><div class="line">    * holding &lt;tt&gt;expected&lt;/tt&gt;.</div><div class="line">    * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if successful</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object o, <span class="keyword">long</span> offset,</span></span></div><div class="line">                                                 <span class="keyword">int</span> expected,</div><div class="line">                                                 <span class="keyword">int</span> x);</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Atomically update Java variable to &lt;tt&gt;x&lt;/tt&gt; if it is currently</div><div class="line">    * holding &lt;tt&gt;expected&lt;/tt&gt;.</div><div class="line">    * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if successful</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapLong</span><span class="params">(Object o, <span class="keyword">long</span> offset,</span></span></div><div class="line">                                                  <span class="keyword">long</span> expected,</div><div class="line">                                                  <span class="keyword">long</span> x);</div></pre></td></tr></table></figure>
<p>可以看到native发现这是一个本地方法调用，可以去查看对应的OpenJDK中调用代码<a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/os_cpu/linux_x86/vm/atomic_linux_x86.inline.hpp" target="_blank" rel="external">atomic_linux_x86.inline.hpp</a>  /  <a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/os_cpu/windows_x86/vm/atomic_windows_x86.inline.hpp" target="_blank" rel="external">atomic_windows_x86.inline.hpp</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//linux(int 类型)</div><div class="line">inline jint Atomic::cmpxchg(jint exchange_value, volatile jint* dest, jint compare_value) &#123;</div><div class="line">  	int mp = os::is_MP();</div><div class="line">  	__asm__ volatile (LOCK_IF_MP(%4) "cmpxchgl %1,(%3)"</div><div class="line">                    : "=a" (exchange_value)</div><div class="line">                    : "r" (exchange_value), "a" (compare_value), "r" (dest), "r" (mp)</div><div class="line">                    : "cc", "memory");</div><div class="line">  	return exchange_value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//windows(int 类型)</div><div class="line">inline jint Atomic::cmpxchg(jint exchange_value, volatile jint* dest, jint compare_value) &#123;</div><div class="line"> 		return (*os::atomic_cmpxchg_func)(exchange_value, dest, compare_value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到其实现方式是基于硬件平台的汇编指令cmpxchg指令完成的，JVM只是封装了汇编调用。以linux x86处理器为例子，int mp = os::is_MP()中的MP是multiprocessor，即多处理器，当遇到是多处理器的情况下加上LOCK。cmpxchgl指的应该是compare and exchange指令。</p>
<h1 id="CAS在Java中的使用"><a href="#CAS在Java中的使用" class="headerlink" title="CAS在Java中的使用"></a>CAS在Java中的使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeTest</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> Unsafe unsafe;</div><div class="line">	</div><div class="line">		<span class="keyword">static</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// 通过反射获取rt.jar下的Unsafe类</span></div><div class="line">				Field field = Unsafe.class.getDeclaredField(<span class="string">"theUnsafe"</span>);</div><div class="line">				field.setAccessible(<span class="keyword">true</span>);</div><div class="line">				unsafe = (Unsafe) field.get(<span class="keyword">null</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				System.out.println(<span class="string">"Get Unsafe instance occur error"</span> + e);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">			Class clazz = Target.class;</div><div class="line">			Field[] fields = clazz.getDeclaredFields();</div><div class="line">			Target target = <span class="keyword">new</span> Target();</div><div class="line">			Field intFiled = clazz.getDeclaredField(<span class="string">"intParam"</span>);</div><div class="line">			Field longFiled = clazz.getDeclaredField(<span class="string">"longParam"</span>);</div><div class="line">			Field strFiled = clazz.getDeclaredField(<span class="string">"strParam"</span>);</div><div class="line">			Field strFiled2 = clazz.getDeclaredField(<span class="string">"strParam2"</span>);</div><div class="line">	</div><div class="line">			<span class="comment">// intParam</span></div><div class="line">			System.out.print(unsafe.compareAndSwapInt(target, <span class="number">12</span>, <span class="number">3</span>, <span class="number">10</span>) + <span class="string">":"</span>);</div><div class="line">			System.out.println((Integer) intFiled.get(target));</div><div class="line">			<span class="comment">// longParam</span></div><div class="line">			System.out.print(unsafe.compareAndSwapLong(target, <span class="number">16</span>, <span class="number">1l</span>, <span class="number">2l</span>) + <span class="string">":"</span>);</div><div class="line">			System.out.println((Long) longFiled.get(target));</div><div class="line">			<span class="comment">// strParam</span></div><div class="line">			System.out.print(unsafe.compareAndSwapObject(target, <span class="number">24</span>, <span class="keyword">null</span>, <span class="string">"5"</span>)</div><div class="line">					+ <span class="string">":"</span>);</div><div class="line">			System.out.println((String) strFiled.get(target));</div><div class="line">			<span class="comment">// strParam2</span></div><div class="line">			System.out.print(unsafe.compareAndSwapObject(target, <span class="number">28</span>, <span class="keyword">null</span>, <span class="string">"6"</span>)</div><div class="line">					+ <span class="string">":"</span>);</div><div class="line">			System.out.println((String) strFiled2.get(target));</div><div class="line">	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> intParam = <span class="number">3</span>;</div><div class="line">	<span class="keyword">long</span> longParam = <span class="number">1l</span>;</div><div class="line">	String strParam;</div><div class="line">	String strParam2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如代码所示，compareAndSwapXx方法会根据第二个参数”偏移量”去拿偏移量这么多的属性的值和第三个参数对比，如果相同则将该属性值替换为第四个参数。该偏移量是指某个字段相对Java对象的起始位置的偏移量，可以通过unsafe.objectFieldOffset(param)去获取对应属性的偏移量。</p>
<p>顺便介绍个查看对象的属性位置分布的一个小工具：<a href="http://openjdk.java.net/projects/code-tools/jol/" target="_blank" rel="external">jol</a></p>
<h2 id="使用Demo"><a href="#使用Demo" class="headerlink" title="使用Demo:"></a>使用Demo:</h2><p>首先引用jol-core包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jol/jol-core --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jol-core&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.9&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>然后在项目里简单使用下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOffset</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		out.println(VM.current().details());</div><div class="line">		out.println(ClassLayout.parseClass(Throwable.class).toPrintable());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下，根据偏移量界面化的显示属性分布的位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Running 64-bit HotSpot VM.</div><div class="line"># Using compressed oop with 3-bit shift.</div><div class="line"># Using compressed klass with 3-bit shift.</div><div class="line"># Objects are 8 bytes aligned.</div><div class="line"># Field sizes by type: 4, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]</div><div class="line"># Array element sizes: 4, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]</div><div class="line"></div><div class="line">java.lang.Throwable object internals:</div><div class="line"> OFFSET  SIZE                            TYPE DESCRIPTION                               VALUE</div><div class="line">      0    12                                 (object header)                           N/A</div><div class="line">     12     4                                 (alignment/padding gap)                  </div><div class="line">     16     4                java.lang.String Throwable.detailMessage                   N/A</div><div class="line">     20     4             java.lang.Throwable Throwable.cause                           N/A</div><div class="line">     24     4   java.lang.StackTraceElement[] Throwable.stackTrace                      N/A</div><div class="line">     28     4                  java.util.List Throwable.suppressedExceptions            N/A</div><div class="line">Instance size: 32 bytes</div><div class="line">Space losses: 4 bytes internal + 0 bytes external = 4 bytes total</div></pre></td></tr></table></figure>
<h1 id="CAS存在的ABA问题"><a href="#CAS存在的ABA问题" class="headerlink" title="CAS存在的ABA问题"></a>CAS存在的ABA问题</h1><p>CAS普遍存在的一个问题就是ABA问题，即是当线程一将变量A修改为B，之后又修改为A，线程二去对比A发现没变化就会判断出错。目前很多都是使用加上版本号来解决，加个version字段，每次修改就++，每次判断时候多判断下版本号是否变化来确定某变量是否被修改。</p>
<p>下班啦，暂且到这里，祝大家十一玩的开心~~~</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/xixi.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CAS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Method的invoke方法源码分析]]></title>
      <url>http://itliusir.com/2017/javase-Method-invoke/</url>
      <content type="html"><![CDATA[<p>摘要:最近有使用到Method的invoke方法，于是就学习了下Method的invoke方法源码(暂未深入到native)<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>首先看一下invoke方法的代码实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessibleObject</span> <span class="keyword">implements</span> <span class="title">AnnotatedElement</span> </span>&#123;</div><div class="line">	<span class="keyword">boolean</span> override;</div><div class="line">	<span class="comment">//访问权限</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccessible</span><span class="params">()</span> </span>&#123;</div><div class="line">       	<span class="keyword">return</span> override;</div><div class="line">   	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//Method.class</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></div><div class="line">       <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException,</div><div class="line">          InvocationTargetException</div><div class="line">   &#123;</div><div class="line">       <span class="keyword">if</span> (!override) &#123;</div><div class="line">           <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</div><div class="line">               Class&lt;?&gt; caller = Reflection.getCallerClass();</div><div class="line">               checkAccess(caller, clazz, obj, modifiers);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       MethodAccessor ma = methodAccessor;             <span class="comment">// read volatile</span></div><div class="line">       <span class="keyword">if</span> (ma == <span class="keyword">null</span>) &#123;</div><div class="line">           ma = acquireMethodAccessor();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> ma.invoke(obj, args);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以看到在该方法第一步会先去判断AccessibleObject的override属性是否为true</p>
<ul>
<li>若为true则忽略访问权限的控制</li>
<li>若为false则会去调用Reflection.quickCheckMemberAccess()判断是不是public，若不是则会使用Reflection.getCallerClass()获取调用此方法的class，然后校验其是否有权限</li>
<li>最后会调用MethodAccessor的invoke()方法</li>
</ul>
<p>MethodAccessor的invoke方法源码如下所示，就是一个接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodAccessor</span> </span>&#123;</div><div class="line">   <span class="comment">/** Matches specification in &#123;<span class="doctag">@link</span> java.lang.reflect.Method&#125; */</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></div><div class="line">       <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到它只是一个单方法接口，其invoke()方法与Method.invoke()的对应。 创建MethodAccessor实例的是ReflectionFactory。</p>
<p><a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/ReflectionFactory.java" target="_blank" rel="external">sun.reflect.ReflectionFactory</a>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionFactory</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> initted = <span class="keyword">false</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// "Inflation" mechanism. Loading bytecodes to implement</span></div><div class="line">    <span class="comment">// Method.invoke() and Constructor.newInstance() currently costs</span></div><div class="line">    <span class="comment">// 3-4x more than an invocation via native code for the first</span></div><div class="line">    <span class="comment">// invocation (though subsequent invocations have been benchmarked</span></div><div class="line">    <span class="comment">// to be over 20x faster). Unfortunately this cost increases</span></div><div class="line">    <span class="comment">// startup time for certain applications that use reflection</span></div><div class="line">    <span class="comment">// intensively (but only once per class) to bootstrap themselves.</span></div><div class="line">    <span class="comment">// To avoid this penalty we reuse the existing JVM entry points</span></div><div class="line">    <span class="comment">// for the first few invocations of Methods and Constructors and</span></div><div class="line">    <span class="comment">// then switch to the bytecode-based implementations.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// Package-private to be accessible to NativeMethodAccessorImpl</span></div><div class="line">    <span class="comment">// and NativeConstructorAccessorImpl</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> noInflation        = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>     inflationThreshold = <span class="number">15</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// ...</span></div><div class="line">    </div><div class="line">    <span class="comment">/** We have to defer full initialization of this class until after</span></div><div class="line">        the static initializer is run since java.lang.reflect.Method's</div><div class="line">        static initializer (more properly, that for</div><div class="line">        java.lang.reflect.AccessibleObject) causes this class's to be</div><div class="line">        run, before the system properties are set up. */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkInitted</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (initted) <span class="keyword">return</span>;</div><div class="line">        AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="comment">// Tests to ensure the system properties table is fully</span></div><div class="line">                    <span class="comment">// initialized. This is needed because reflection code is</span></div><div class="line">                    <span class="comment">// called very early in the initialization process (before</span></div><div class="line">                    <span class="comment">// command-line arguments have been parsed and therefore</span></div><div class="line">                    <span class="comment">// these user-settable properties installed.) We assume that</span></div><div class="line">                    <span class="comment">// if System.out is non-null then the System class has been</span></div><div class="line">                    <span class="comment">// fully initialized and that the bulk of the startup code</span></div><div class="line">                    <span class="comment">// has been run.</span></div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (System.out == <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="comment">// java.lang.System not yet fully initialized</span></div><div class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    String val = System.getProperty(<span class="string">"sun.reflect.noInflation"</span>);</div><div class="line">                    <span class="keyword">if</span> (val != <span class="keyword">null</span> &amp;&amp; val.equals(<span class="string">"true"</span>)) &#123;</div><div class="line">                        noInflation = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    val = System.getProperty(<span class="string">"sun.reflect.inflationThreshold"</span>);</div><div class="line">                    <span class="keyword">if</span> (val != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            inflationThreshold = Integer.parseInt(val);</div><div class="line">                        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">                            <span class="keyword">throw</span> (RuntimeException) </div><div class="line">                                <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to parse property sun.reflect.inflationThreshold"</span>).</div><div class="line">                                    initCause(e);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    initted = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// ...</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> MethodAccessor <span class="title">newMethodAccessor</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">        checkInitted();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (noInflation) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MethodAccessorGenerator().</div><div class="line">                generateMethod(method.getDeclaringClass(),</div><div class="line">                               method.getName(),</div><div class="line">                               method.getParameterTypes(),</div><div class="line">                               method.getReturnType(),</div><div class="line">                               method.getExceptionTypes(),</div><div class="line">                               method.getModifiers());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            NativeMethodAccessorImpl acc =</div><div class="line">                <span class="keyword">new</span> NativeMethodAccessorImpl(method);</div><div class="line">            DelegatingMethodAccessorImpl res =</div><div class="line">                <span class="keyword">new</span> DelegatingMethodAccessorImpl(acc);</div><div class="line">            acc.setParent(res);</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，实际的MethodAccessor实现有两个版本，一个是Java实现的，另一个是native code实现的。Java实现的版本在初始化时需要较多时间，但长久来说性能较好；native版本正好相反，启动时相对较快，但运行时间长了之后速度就比不过Java版了。</p>
<p>这个需要注意的是inflationThreshold的值是15，也就是说前15次是使用的native版本，之后使用的是java版本，具体实现可以往下看。</p>
<p>为了权衡两个版本的性能，Sun的JDK使用了“inflation”的技巧：让Java方法在被反射调用时，开头若干次使用native版，等反射调用次数超过阈值时则生成一个专用的MethodAccessor实现类，生成其中的invoke()方法的字节码，以后对该Java方法的反射调用就会使用Java版。 (Sun的JDK是从1.4系开始采用这种优化的)</p>
<p>可以在启动命令里加上-Dsun.reflect.noInflation=true，就会RefactionFactorynoInflation属性就变成true了，这样不用等到15调用后，程序一开始就会用java版的MethodAccessor了</p>
<p>可以在上段代码newMethodAccessor()方法看到DelegatingMethodAccessorImpl res = new DelegatingMethodAccessorImpl(acc);</p>
<p><a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/DelegatingMethodAccessorImpl.java" target="_blank" rel="external">sun.reflect.DelegatingMethodAccessorImpl</a>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelegatingMethodAccessorImpl</span> <span class="keyword">extends</span> <span class="title">MethodAccessorImpl</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MethodAccessorImpl delegate;</div><div class="line"></div><div class="line">    DelegatingMethodAccessorImpl(MethodAccessorImpl delegate) &#123;</div><div class="line">        setDelegate(delegate);</div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></div><div class="line">        <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> delegate.invoke(obj, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDelegate</span><span class="params">(MethodAccessorImpl delegate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.delegate = delegate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个类是方便在native与Java版的MethodAccessor之间实现切换。</p>
<p><a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/NativeMethodAccessorImpl.java" target="_blank" rel="external">sun.reflect.NativeMethodAccessorImpl</a>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NativeMethodAccessorImpl</span> <span class="keyword">extends</span> <span class="title">MethodAccessorImpl</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Method method;</div><div class="line">    <span class="keyword">private</span> DelegatingMethodAccessorImpl parent;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numInvocations;</div><div class="line"></div><div class="line">    NativeMethodAccessorImpl(Method method) &#123;</div><div class="line">        <span class="keyword">this</span>.method = method;</div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></div><div class="line">        <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (++numInvocations &gt; ReflectionFactory.inflationThreshold()) &#123;</div><div class="line">            MethodAccessorImpl acc = (MethodAccessorImpl)</div><div class="line">                <span class="keyword">new</span> MethodAccessorGenerator().</div><div class="line">                    generateMethod(method.getDeclaringClass(),</div><div class="line">                                   method.getName(),</div><div class="line">                                   method.getParameterTypes(),</div><div class="line">                                   method.getReturnType(),</div><div class="line">                                   method.getExceptionTypes(),</div><div class="line">                                   method.getModifiers());</div><div class="line">            parent.setDelegate(acc);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> invoke0(method, obj, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(DelegatingMethodAccessorImpl parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.parent = parent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title">invoke0</span><span class="params">(Method m, Object obj, Object[] args)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到在每次调用invoke方法时候会++numInvocations，inflationThreshold的值是15，该块就是上文所说的native版本和java版本的切换实现部分。当numInvocations超过inflationThreshold的值调用MethodAccessorGenerator.generateMethod()来生成Java版的MethodAccessor的实现类，并且改变DelegatingMethodAccessorImpl所引用的MethodAccessor为Java版。后续经由DelegatingMethodAccessorImpl.invoke()调用到的就是Java版的实现了。</p>
<h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><p>可以使用<a href="https://github.com/itliusir/Test/blob/master/Test/src/testinvoke/TestClassLoad.java#L1" target="_blank" rel="external">demo</a>测试invoke方法执行的流程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Hello,"</span> + name);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Test</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassLoad</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">			Class&lt;?&gt; clz = Class.forName(<span class="string">"testinvoke.A"</span>);</div><div class="line">			Object o = clz.newInstance();</div><div class="line">			Method m = clz.getMethod(<span class="string">"foo"</span>, String.class);</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</div><div class="line">				m.invoke(o, Integer.toString(i));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以在运行的时候使用-XX:+TraceClassLoading参数监控类加载情况：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">[Loaded testinvoke.A from file:/C:/Users/itliusir/git/test/Test/bin/]</div><div class="line">[Loaded sun.reflect.NativeMethodAccessorImpl from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.DelegatingMethodAccessorImpl from D:\jdk8\jre\lib\rt.jar]</div><div class="line">Hello,<span class="number">0</span></div><div class="line">Hello,<span class="number">1</span></div><div class="line">Hello,<span class="number">2</span></div><div class="line">Hello,<span class="number">3</span></div><div class="line">Hello,<span class="number">4</span></div><div class="line">Hello,<span class="number">5</span></div><div class="line">Hello,<span class="number">6</span></div><div class="line">Hello,<span class="number">7</span></div><div class="line">Hello,<span class="number">8</span></div><div class="line">Hello,<span class="number">9</span></div><div class="line">Hello,<span class="number">10</span></div><div class="line">Hello,<span class="number">11</span></div><div class="line">Hello,<span class="number">12</span></div><div class="line">Hello,<span class="number">13</span></div><div class="line">Hello,<span class="number">14</span></div><div class="line">[Loaded sun.reflect.ClassFileConstants from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.AccessorGenerator from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.MethodAccessorGenerator from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.ByteVectorFactory from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.ByteVector from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.ByteVectorImpl from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.ClassFileAssembler from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.UTF8 from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.Label from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.Label$PatchInfo from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded java.util.ArrayList$Itr from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.MethodAccessorGenerator$<span class="number">1</span> from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.ClassDefiner from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.ClassDefiner$<span class="number">1</span> from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded java.util.concurrent.ConcurrentHashMap$ForwardingNode from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded sun.reflect.GeneratedMethodAccessor1 from __JVM_DefineClass__]</div><div class="line">Hello,<span class="number">15</span></div><div class="line">[Loaded java.lang.Shutdown from D:\jdk8\jre\lib\rt.jar]</div><div class="line">[Loaded java.lang.Shutdown$Lock from D:\jdk8\jre\lib\rt.jar]</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Method </tag>
            
            <tag> invoke </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAT内存分析工具使用]]></title>
      <url>http://itliusir.com/2017/JVM-MAT/</url>
      <content type="html"><![CDATA[<p>摘要:Eclipse Memory Analysis Tools (MAT) 是一个分析 Java堆数据的专业工具,用它可以定位内存泄漏的原因。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p><strong>Memory Analyzer的安装</strong></p>
<ul>
<li>Eclipse-&gt;Help-&gt;Eclipse Marketplace</li>
</ul>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/eclipse-install-plugins.png" alt="install plugins"></p>
<ul>
<li>安装完成后可以调用jdk工具jps查看当前的java进程，然后调用jmap将该进程的内存heap输出到文件。</li>
</ul>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/dump.png" alt="dump"></p>
<ul>
<li>通过MAT以图像形式直观的展示内存泄漏报表等</li>
</ul>
<p>首先Eclipse-&gt;File-&gt;Open File 打开上一步生成的文件</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/openfile.png" alt="openfile"></p>
<p>第一个选项是内存泄漏报表（自动检查可能存在内存泄露的对象，通过报表展示存活的对象以及为什么他们没有被垃圾收集）；</p>
<p>第二个是对象报表（对可疑对象进行分析，如字符串是否定义重了，空的collection、finalizer以及弱引用等）；</p>
<p>这里我们打开第一个：</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/mat2.png" alt="MAT View"></p>
<p><strong>Memory Analyzer主界面介绍</strong></p>
<ul>
<li>下面的Histogram（列出内存中的对象，对象的个数以及大小）这里我们可以使用正则去进行匹配</li>
</ul>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/mat5.png" alt="Histogram"></p>
<p>可以在具体的Class右键List objects-&gt;with incoming…./outgoing…查看该Class的实例</p>
<pre><code>1. outgoing references ：表示该对象的出节点（被该对象引用的对象）。
2. incoming references ：表示该对象的入节点（引用到该对象的对象）。
</code></pre><ul>
<li>下面的Dominator Tree是列出最大的对象以及其依赖存活的Object （大小是以Retained Heap为标准排序的）</li>
</ul>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/dominator.png" alt="dominator"></p>
<ul>
<li>而Top Consumers则是通过图形列出最大的Object</li>
</ul>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/top_consumers1.png" alt="top_consumers"></p>
<ul>
<li>Duplicate Class是通过MAT自动分析泄漏的原因</li>
</ul>
<p>一般Histogram和 Dominator Tree是最常用的。</p>
<p><strong>Memory Analyzer中概念介绍</strong></p>
<ul>
<li>Shallow heap</li>
</ul>
<p>Shallow size就是对象本身占用内存的大小，不包含其引用的对象。</p>
<pre><code>1. 常规对象（非数组）的Shallow size由其成员变量的数量和类型决定。
2. 数组的shallow size由数组元素的类型（对象类型、基本类型）和数组长度决定
</code></pre><ul>
<li>Retained Heap</li>
</ul>
<p>它表示如果一个对象被释放，那么因为该对象的释放而减少引用从而导致释放所有的对象所占用的heap大小</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/histogram.png" alt="retained"></p>
<p>为了计算Retained Memory，MAT引入了Dominator Tree。加入对象A引用B和C，B和C又都引用到D（一个菱形）。此时要计算Retained Memory，A的包括A本身和B，C，D。B和C因为共同引用D，所以他俩的Retained Memory都只是他们本身。D当然也只是自己。我觉得是为了加快计算的速度，MAT改变了对象引用图，而转换成一个对象引用树。在这里例子中，树根是A，而B，C，D是他的三个儿子。B，C，D不再有相互关系。把引用图变成引用树，计算Retained Heap就会非常方便，显示也非常方便。对应到MAT UI上，在dominator tree这个view中，显示了每个对象的shallow heap和retained heap。然后可以以该节点位树根，一步步的细化看看retained heap到底是用在什么地方了。要说一下的是，这种从图到树的转换确实方便了内存分析，但有时候会让人有些疑惑。本来对象B是对象A的一个成员，但因为B还被C引用，所以B在树中并不在A下面，而很可能是平级，如下图所示。</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/histogram1.png" alt="retained"></p>
<p>为了纠正这点，MAT中点击右键，可以List objects中选择with outgoing references和with incoming references。这是个真正的引用图的概念</p>
<ul>
<li>GC Root</li>
</ul>
<p>GC发现通过任何reference chain(引用链)无法访问某个对象的时候，该对象即被回收。名词GC Roots正是分析这一过程的起点，例如JVM自己确保了对象的可到达性(那么JVM就是GC Roots)，所以GC Roots就是这样在内存中保持对象可到达性的，一旦不可到达，即被回收。通常GC Roots是一个在current thread(当前线程)的call stack(调用栈)上的对象（例如方法参数和局部变量），或者是线程自身或者是system class loader(系统类加载器)加载的类以及native code(本地代码)保留的活动对象。所以GC Roots是分析对象为何还存活于内存中的利器。</p>
<p>在Histogram或者Domiantor Tree的某一个条目上，右键可以查看其GC Root Path</p>
<p>参考：</p>
<p><a href="http://blog.csdn.net/yxz329130952/article/details/50288145" title="利用MAT进行内存泄露分析" target="_blank" rel="external">http://blog.csdn.net/yxz329130952/article/details/50288145</a></p>
<p><a href="http://www.jianshu.com/p/d8e247b1e7b2" title="MAT使用入门" target="_blank" rel="external">http://www.jianshu.com/p/d8e247b1e7b2</a></p>
<h1 id="晚安"><a href="#晚安" class="headerlink" title="晚安~"></a>晚安~</h1>]]></content>
      
        <categories>
            
            <category> JVM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MAT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK8的LinkedList源码学习笔记]]></title>
      <url>http://itliusir.com/2017/javase-List-LinkedList1/</url>
      <content type="html"><![CDATA[<p>摘要:上一篇分析了ArrayList之后接下来分析下LinkedList的底层设计,它与ArrayList在底层的实现上有所不同。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>首先，LinkedList的继承和实现了的类和接口：<br><img src="http://ok0qzthrb.bkt.clouddn.com/LinkedList.png" alt="LinkedList实现的接口"></p>
<p>LinkedList 是一个继承于AbstractSequentialList的双向链表。它也可以被当作堆栈、队列或双端队列进行操作。同时实现了Deque接口，即能将LinkedList当作双端队列使用。</p>
<p>另外实现了Cloneable接口，Serializable接口。<br>接下来看LinkedList的构造方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Constructs an empty list.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Constructs a list containing the elements of the specified</div><div class="line">    * collection, in the order they are returned by the collection's</div><div class="line">    * iterator.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span>  c the collection whose elements are to be placed into this list</div><div class="line">    * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>();</div><div class="line">       addAll(c);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>LinkedList提供了两个构造方法，第一个是默认无参的，第二个是带Collection的类型参数：</p>
<ul>
<li>使用this()调用默认的构造方法</li>
</ul>
<p><strong>成员变量分析</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 当前有多少个节点</div><div class="line">    */</div><div class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 第一个节点.</div><div class="line">    * Invariant: (first == null &amp;&amp; last == null) ||</div><div class="line">    *            (first.prev == null &amp;&amp; first.item != null)</div><div class="line">    */</div><div class="line">   <span class="keyword">transient</span> Node&lt;E&gt; first;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 最后一个节点.</div><div class="line">    * Invariant: (first == null &amp;&amp; last == null) ||</div><div class="line">    *            (last.next == null &amp;&amp; last.item != null)</div><div class="line">    */</div><div class="line">   <span class="keyword">transient</span> Node&lt;E&gt; last;</div></pre></td></tr></table></figure>
<p><strong>核心方法分析</strong></p>
<p><strong><em>1. addAll()方法</em></strong></p>
<p>addAll有两个重载函数，addAll(Collection&lt;? extends E&gt;)型和addAll(int, Collection&lt;? extends E&gt;)型，我们平时习惯调用的addAll(Collection&lt;? extends E&gt;)型会转化为addAll(int, Collection&lt;? extends E&gt;)型，所以我们着重分析此函数即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">	<span class="comment">//JDK8将对index的判断封装了一个方法checkPositionIndex(index);</span></div><div class="line">	<span class="comment">//这个就不用说了，集合转为数组</span></div><div class="line">       Object[] a = c.toArray();</div><div class="line">       <span class="keyword">int</span> numNew = a.length;</div><div class="line">       <span class="keyword">if</span> (numNew == <span class="number">0</span>)</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	<span class="comment">//succ指向当前需要插入节点的位置，pred指向其前一个节点</span></div><div class="line">       Node&lt;E&gt; pred, succ;</div><div class="line">	<span class="comment">//在列表尾部插入的时候</span></div><div class="line">       <span class="keyword">if</span> (index == size) &#123;</div><div class="line">           succ = <span class="keyword">null</span>;</div><div class="line">           pred = last;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">//若不是在尾部插入时候则先去根据索引查询对应的元素可见该块最下面的node()方法</span></div><div class="line">           succ = node(index);</div><div class="line">           pred = succ.prev;</div><div class="line">       &#125;</div><div class="line">	<span class="comment">//遍历collection中的所有元素将其依次插入到此链表中指定位置</span></div><div class="line">       <span class="keyword">for</span> (Object o : a) &#123;</div><div class="line">           <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) o;</div><div class="line">           Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</div><div class="line">           <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</div><div class="line">               first = newNode;</div><div class="line">           <span class="keyword">else</span></div><div class="line">               pred.next = newNode;</div><div class="line">           pred = newNode;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</div><div class="line">           last = pred;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           pred.next = succ;</div><div class="line">           succ.prev = pred;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       size += numNew;</div><div class="line">       modCount++;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">    * 根据index返回对应元素.</div><div class="line">    */</div><div class="line">   <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">       <span class="comment">// assert isElementIndex(index);</span></div><div class="line">	<span class="comment">//若index&lt;size/2正序移位获取索引位置</span></div><div class="line">       <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</div><div class="line">           Node&lt;E&gt; x = first;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</div><div class="line">               x = x.next;</div><div class="line">           <span class="keyword">return</span> x;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           Node&lt;E&gt; x = last;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</div><div class="line">               x = x.prev;</div><div class="line">           <span class="keyword">return</span> x;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong><em>2. removeXXX()方法</em></strong></p>
<p>LinkedList提供了头删除removeFirst()、尾删除removeLast()、remove(int index)、remove(Object o)、clear()这些删除元素的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Removes and returns the first element from this list.</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">       <span class="keyword">if</span> (f == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">       <span class="keyword">return</span> unlinkFirst(f);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Removes and returns the last element from this list.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">       <span class="keyword">if</span> (l == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">       <span class="keyword">return</span> unlinkLast(l);</div><div class="line">   &#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">    * Unlinks non-null first node f.</div><div class="line">    * 删除非空的首节点f.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</div><div class="line">       <span class="comment">// assert f == first &amp;&amp; f != null;</span></div><div class="line">       <span class="keyword">final</span> E element = f.item;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</div><div class="line">       f.item = <span class="keyword">null</span>;</div><div class="line">       f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">	<span class="comment">//将原首节点的next节点设置为首节点</span></div><div class="line">       first = next;</div><div class="line">       <span class="keyword">if</span> (next == <span class="keyword">null</span>)</div><div class="line">           last = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">else</span></div><div class="line">           next.prev = <span class="keyword">null</span>;</div><div class="line">       size--;</div><div class="line">       modCount++;</div><div class="line">       <span class="keyword">return</span> element;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Unlinks non-null last node l.</div><div class="line">    * 删除非空的尾节点f.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> E <span class="title">unlinkLast</span><span class="params">(Node&lt;E&gt; l)</span> </span>&#123;</div><div class="line">       <span class="comment">// assert l == last &amp;&amp; l != null;</span></div><div class="line">       <span class="keyword">final</span> E element = l.item;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</div><div class="line">       l.item = <span class="keyword">null</span>;</div><div class="line">       l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">	<span class="comment">//将原尾节点的prev节点设置为尾节点</span></div><div class="line">       last = prev;</div><div class="line">       <span class="keyword">if</span> (prev == <span class="keyword">null</span>)</div><div class="line">           first = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">else</span></div><div class="line">           prev.next = <span class="keyword">null</span>;</div><div class="line">       size--;</div><div class="line">       modCount++;</div><div class="line">       <span class="keyword">return</span> element;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">    * Remove.</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">               <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</div><div class="line">                   unlink(x);</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">               <span class="keyword">if</span> (o.equals(x.item)) &#123;</div><div class="line">                   unlink(x);</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">    * Unlinks non-null node x.</div><div class="line">    * 删除非空节点.</div><div class="line">    */</div><div class="line">   <span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</div><div class="line">       <span class="comment">// assert x != null;</span></div><div class="line">       <span class="keyword">final</span> E element = x.item;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</div><div class="line">	<span class="comment">//如果被删除节点为头节点</span></div><div class="line">       <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</div><div class="line">           first = next;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           prev.next = next;</div><div class="line">           x.prev = <span class="keyword">null</span>;</div><div class="line">       &#125;</div><div class="line">	<span class="comment">//如果被删除节点为尾节点</span></div><div class="line">       <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</div><div class="line">           last = prev;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           next.prev = prev;</div><div class="line">           x.next = <span class="keyword">null</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       x.item = <span class="keyword">null</span>;</div><div class="line">       size--; <span class="comment">//size-1</span></div><div class="line">       modCount++;</div><div class="line">       <span class="keyword">return</span> element;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">    * Removes all of the elements from this list.</div><div class="line">    * 清空所有节点.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">// Clearing all of the links between nodes is "unnecessary", but:</span></div><div class="line">       <span class="comment">// - helps a generational GC if the discarded nodes inhabit</span></div><div class="line">       <span class="comment">//   more than one generation</span></div><div class="line">       <span class="comment">// - is sure to free memory even if there is a reachable Iterator</span></div><div class="line">       <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; ) &#123;</div><div class="line">           Node&lt;E&gt; next = x.next;</div><div class="line">           x.item = <span class="keyword">null</span>;</div><div class="line">           x.next = <span class="keyword">null</span>;</div><div class="line">           x.prev = <span class="keyword">null</span>;</div><div class="line">           x = next;</div><div class="line">       &#125;</div><div class="line">       first = last = <span class="keyword">null</span>;</div><div class="line">       size = <span class="number">0</span>;</div><div class="line">       modCount++;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong><em>3. set()方法</em></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//很容易分析，先检查index，然后根据index返回对应元素，最后将元素--&gt;x.item</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">       checkElementIndex(index);</div><div class="line">       Node&lt;E&gt; x = node(index);</div><div class="line">       E oldVal = x.item;</div><div class="line">       x.item = element;</div><div class="line">       <span class="keyword">return</span> oldVal;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong><em>4. getXXX()方法</em></strong></p>
<p>LinkedList提供了getFirst()、getLast()、contains(Object o)、get(int index)、indexOf(Object o)、lastIndexOf(Object o)这些查找元素的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Returns the first element in this list.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">       <span class="keyword">if</span> (f == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">       <span class="keyword">return</span> f.item;</div><div class="line">   &#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">    * Returns the last element in this list.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">       <span class="keyword">if</span> (l == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">       <span class="keyword">return</span> l.item;</div><div class="line">   &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</div><div class="line">   &#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">    * 正向查找，返回LinkedList中元素值Object o第一次出现的位置，如果元素不存在，则返回-1</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123; <span class="comment">//正向</span></div><div class="line">               <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</div><div class="line">                   <span class="keyword">return</span> index;</div><div class="line">               index++;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">               <span class="keyword">if</span> (o.equals(x.item))</div><div class="line">                   <span class="keyword">return</span> index;</div><div class="line">               index++;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">   &#125;</div><div class="line"><span class="comment">//逆向查找，返回LinkedList中元素值Object o最后一次出现的位置，如果元素不存在，则返回-1</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> index = size;</div><div class="line">	<span class="comment">//LinkedList可以为null</span></div><div class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;	<span class="comment">//逆向</span></div><div class="line">               index--;</div><div class="line">               <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</div><div class="line">                   <span class="keyword">return</span> index;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</div><div class="line">               index--;</div><div class="line">               <span class="keyword">if</span> (o.equals(x.item))</div><div class="line">                   <span class="keyword">return</span> index;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">   &#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">    * 根据index获取当前元素.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">       checkElementIndex(index);</div><div class="line">       <span class="keyword">return</span> node(index).item;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong><em>5. Queue操作</em></strong></p>
<p>Queue操作提供了peek()、element()、poll()、remove()、offer(E e)这些方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//获取但不移除此队列的头；如果此队列为空，则返回 null</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">       <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//获取但不移除此队列的头；如果此队列为空，则抛出NoSuchElementException异常</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">element</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> getFirst();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//获取并移除此队列的头，如果此队列为空，则返回 null</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">       <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//获取并移除此队列的头，如果此队列为空，则抛出NoSuchElementException异常</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> removeFirst();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//将指定的元素值(E e)插入此列表末尾</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> add(e);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong><em>6. Deque操作</em></strong></p>
<p>Deque操作提供了offerFirst(E e)、offerLast(E e)、peekFirst()、peekLast()、pollFirst()、pollLast()、push(E e)、pop()、removeFirstOccurrence(Object o)、removeLastOccurrence(Object o)这些方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//将指定的元素值(E e)插入此列表末尾</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> add(e);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// Deque operations</span></div><div class="line"></div><div class="line">   <span class="comment">//将指定的元素插入此双端队列的开头</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">       addFirst(e);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//将指定的元素插入此双端队列的末尾</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">       addLast(e);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//获取，但不移除此双端队列的第一个元素；如果此双端队列为空，则返回 null</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">peekFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">       <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">//获取，但不移除此双端队列的最后一个元素；如果此双端队列为空，则返回 null</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">peekLast</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">       <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : l.item;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//获取并移除此双端队列的第一个元素；如果此双端队列为空，则返回 null</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">       <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//获取并移除此双端队列的最后一个元素；如果此双端队列为空，则返回 null</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">       <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkLast(l);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//将一个元素推入此双端队列所表示的堆栈（换句话说，此双端队列的头部）</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">       addFirst(e);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//从此双端队列所表示的堆栈中弹出一个元素（换句话说，移除并返回此双端队列的头部）</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> removeFirst();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//从此双端队列移除第一次出现的指定元素，如果列表中不包含次元素，则没有任何改变</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeFirstOccurrence</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> remove(o);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">//从此双端队列移除最后一次出现的指定元素,如果列表中不包含次元素，则没有任何改变</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeLastOccurrence</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">       <span class="comment">//由于LinkedList中允许存放null，因此下面通过两种情况来分别处理</span></div><div class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123; <span class="comment">//逆向向前</span></div><div class="line">               <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</div><div class="line">                   unlink(x);</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</div><div class="line">               <span class="keyword">if</span> (o.equals(x.item)) &#123;</div><div class="line">                   unlink(x);</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>LinkedList同样也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。</p>
<h1 id="晚安"><a href="#晚安" class="headerlink" title="晚安~"></a>晚安~</h1>]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LinkedList </tag>
            
            <tag> Deque </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK8的ArrayList源码学习笔记]]></title>
      <url>http://itliusir.com/2017/javase-List-ArrayList1/</url>
      <content type="html"><![CDATA[<p>摘要:ArrayList基本上是我们在java编程中用得最多的集合类了，是一个动态的数组，在我们用ArrayList的时候发现其非常方面，功能也很强大，但是其这强大的功能是底层是怎么实现的呢？<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>首先，ArrayList的继承和实现了的类和接口：<br><img src="http://ok0qzthrb.bkt.clouddn.com/list-interface.png" alt="ArrayList实现的接口"></p>
<p>可以看出，ArrayList不仅实现了Cloneable、Serializable接口，还实现了RandomAccess接口、List接口。</p>
<p>RandomAccess是一个标记接口，用于标明实现该接口的List支持快速随机访问，主要目的是使算法能够在随机和顺序访问的list中表现的更加高效。<br>因为这个接口是没有任何实现的，实现了这个接口的类，就表明这个类支持快速访问，就相当于实现了Serializable就等于支持序列化和反序列化，这是个标准。</p>
<p>接下来看ArrayList的构造方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+initialCapacity);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">       elementData = c.toArray();</div><div class="line">       <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</div><div class="line">           <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></div><div class="line">           <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">               elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">// replace with empty array.</span></div><div class="line">           <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>ArrayList提供了三个构造方法，第一个是由调用者传入指定List的大小来创建elementData数组。第二个是默认的构造方法，默认数组容量是10。第三个是根据传入的一个集合，将集合转化成数组，然后赋给elementData。面试题里经常出现ArrayList list = new ArrayList(20)一共扩容了几次，虽然ArrayList默认容量是10，但是它有一个是指定list大小的构造方法，会在new ArrayList(20)时候自动生成一个20容量的集合，所以是不会发生扩容也即是0次。</p>
<p><strong>成员变量分析</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认容量</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</div><div class="line">   <span class="comment">//空数组</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"><span class="comment">//空数组，新增元素时候用</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"><span class="comment">//数组</span></div><div class="line">   <span class="keyword">transient</span> Object[] elementData; </div><div class="line"><span class="comment">//数组大小</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line"><span class="comment">//数组最大容量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</div></pre></td></tr></table></figure>
<p><strong>核心方法分析</strong></p>
<p><strong><em>1. trim to size 压缩空间</em></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</div><div class="line">       modCount++;</div><div class="line">	<span class="comment">//一个精简的三元表达式</span></div><div class="line">       <span class="keyword">if</span> (size &lt; elementData.length) &#123;</div><div class="line">           elementData = (size == <span class="number">0</span>)</div><div class="line">             ? EMPTY_ELEMENTDATA</div><div class="line">             : Arrays.copyOf(elementData, size);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong><em>2. grow 扩容</em></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">       <span class="comment">// overflow-conscious code</span></div><div class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">       <span class="comment">//新空间分配直接扩大50%</span></div><div class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line">       <span class="comment">//得出较大的值</span></div><div class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">           newCapacity = minCapacity;</div><div class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">           newCapacity = hugeCapacity(minCapacity);</div><div class="line">       <span class="comment">// minCapacity is usually close to size, so this is a win:</span></div><div class="line">       <span class="comment">//元素复制</span></div><div class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">       <span class="comment">/**</span></div><div class="line">	 * hugeCapacity的判断小于0则为溢出，由于在jvm内部是以反</div><div class="line">	 * 码存储的数据，首位为符号位，当容量扩增后，若溢出，首位  * 则变为1，此时变为负数，则可以快速判断出是否溢出。</div><div class="line">	 */</div><div class="line">       <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</div><div class="line">       <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class="line">           Integer.MAX_VALUE :</div><div class="line">           MAX_ARRAY_SIZE;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong><em>3. fail-fast机制</em></strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 子类使用这个字段是可选的，若子类希望提供fail-fast(快速失败) iterators或者list iterators 可以在方法里使用该方法.</div><div class="line">  */</div><div class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>这个变量用于快速判断该实例是否有变化，若在进行迭代的时候有变更，那么就抛出一个并发修改异常(ConcurrentModificationException)。<br>fail-fast是Java集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制。</p>
<p><strong><em>4. add 新增一个元素</em></strong></p>
<p>指定位置插入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">       <span class="comment">//下标检查，是否越界了</span></div><div class="line">       rangeCheckForAdd(index);</div><div class="line">       <span class="comment">//扩增容量，同时改变modcount</span></div><div class="line">       ensureCapacityInternal(size + <span class="number">1</span>);</div><div class="line">       <span class="comment">//index后面的元素后移</span></div><div class="line">       System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</div><div class="line">       <span class="comment">//指定位置放置元素</span></div><div class="line">       elementData[index] = element;</div><div class="line">       <span class="comment">//元素数量大小自增</span></div><div class="line">       size++;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>向后插入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">       <span class="comment">//扩大容量,修改modcount</span></div><div class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">       <span class="comment">//注意</span></div><div class="line">       <span class="comment">//数组是从0开始的存元素的，而数组个数是从1开始计数的</span></div><div class="line">       <span class="comment">//这个地方是往第size个位置上存元素</span></div><div class="line">       <span class="comment">//再将元素个数加1</span></div><div class="line">       elementData[size++] = e;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>由此可见，向后插入没有使用数组复制，因此效率会高于指定位置插入。</p>
<p><strong><em>5. remove 移除一个元素</em></strong></p>
<p>由上面的插入方法可以看到List底层的数组处理使用到了System.arraycopy()方法,下面综合删除和数组复制方法讲下删除原理，下面是删除代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayList</span> </span>&#123;</div><div class="line">	    <span class="keyword">static</span> Object[] elementData = <span class="keyword">null</span>;</div><div class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	        list.add(<span class="string">"A"</span>);</div><div class="line">	        list.add(<span class="string">"B"</span>);</div><div class="line">	        list.add(<span class="string">"C"</span>);</div><div class="line">	        list.add(<span class="string">"D"</span>);</div><div class="line">	        list.add(<span class="string">"E"</span>);</div><div class="line">	        <span class="keyword">int</span> size = list.size();</div><div class="line">	        elementData = list.toArray();</div><div class="line">	        <span class="comment">/**</span></div><div class="line">	         * removeMyList(要删除元素的位置,size);</div><div class="line">	         * */</div><div class="line">	        removeMyList(<span class="number">2</span>,size);</div><div class="line">	        <span class="keyword">for</span>(Object ele:elementData)&#123;</div><div class="line">	            System.out.println(ele);</div><div class="line">	        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeMyList</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">	        <span class="comment">/**</span></div><div class="line">	         * arraycopy(Object src,int srcPos,</div><div class="line">	         *           Object dest,int destPos,</div><div class="line">	         *           int length);</div><div class="line">	         * src:源数组； srcPos:源数组要复制的起始位置；</div><div class="line">	         * dest:目的数组；  destPos:目的数组放置的起始位置；</div><div class="line">	         * length:复制的长度。</div><div class="line">	         * </div><div class="line">	         * 若自己到自己复制实现过程是先生成一个长度为length的临时数组,</div><div class="line">	         * 将elementData数组中srcPos到srcPos+length-1之间的数据拷贝到临时数组中，</div><div class="line">	         * 再执行System.arraycopy(临时数组,index+1,elementData,index,size-index-1).</div><div class="line">	         * index:要删除元素的位置</div><div class="line">	         * list删除元素时候是srcPos=index+1,destPos=index,length=size-index-1</div><div class="line">	         * 意思是将要删除的元素和之后元素复制到自己元素和之后的位置将自己覆盖</div><div class="line">	         * */</div><div class="line">	        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, size-index-<span class="number">1</span>);</div><div class="line">	        elementData[--size] = <span class="keyword">null</span>; <span class="comment">//相当于往前移了一位将最后一位重复的置null</span></div><div class="line">	    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其删除操作如下图所示：<br><img src="http://ok0qzthrb.bkt.clouddn.com/ArrayList-remove.png" alt="ArrayList删除原理"></p>
<p>下一篇将要写关于LinkedList的源码分析~</p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ArrayList </tag>
            
            <tag> remove </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Spring事务的传播特性]]></title>
      <url>http://itliusir.com/2017/spring-Transactional/</url>
      <content type="html"><![CDATA[<p>摘要:Spring事务管理基于底层数据库本身的事务处理机制，对数据库事务操作的一次封装，相当于把使用JDBC代码开启、提交、回滚事务进行了封装。其传播特性共有七个<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h2 id="事务的传播特性"><a href="#事务的传播特性" class="headerlink" title="事务的传播特性"></a>事务的传播特性</h2><ol>
<li><p>Propagation.REQUIRED</p>
<p> 方法被调用时自动开启事务，在事务范围内使用则使用同一个事务，如果当前线程中已经存在事务, 方法调用会加入此事务, 如果当前没有事务，就新建一个事务。</p>
</li>
<li><p>Propagation.REQUIRES_NEW</p>
<p> 无论何时自身都会开启事务，这个事务不依赖于外部事务，它拥有自己的隔离范围，自己的锁，等等。当内部事务开始执行时，外部事务将被挂起，内部事务结束时，外部事务将继续执行。</p>
</li>
<li><p>Propagation.SUPPORTS</p>
<p> 自身不会开启事务，在事务范围内使用挂起事务，运行完毕不使用事务</p>
</li>
<li><p>Propagation.NOT_SUPPORTED</p>
<p> 自身不会开启事务，在事务范围内使用挂起事务，运行完毕恢复事务</p>
</li>
<li><p>Propagation.MANDATORY</p>
<p> 自身不会开启事务，必须在事务环境使用否则报错</p>
</li>
<li><p>Propagation.NEVER</p>
<p> 自身不会开启事务，在事务范围内使用抛出异常</p>
</li>
<li><p>Propagation.NESTED</p>
<p> 如果当前存在事务，则在嵌套的事务中执行，如果没有则按照TransactionDefinition.PROPAGATION_REQUIRED 属性执行。可以认为是已经存在事务的一个真正的子事务。嵌套事务开始执行时，它将取得一个 save point。如果这个嵌套事务失败，我们将回滚到此save point。嵌套事务是外部事务的一部分，只有外部事务结束后它才会被提交。</p>
<p>Propagation.REQUIRES_NEW和Propagation.NESTED 的最大区别在于，Propagation.REQUIRES_NEW完全是一个新的事务，而 Propagation.NESTED 则是外部事务的子事务。如果外部事务 commit，嵌套事务也会被 commit，这个规则同样适用于rollback。</p>
</li>
</ol>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>因为业务的需要，业务逻辑优先在单个Service中实现，同样为了保证数据的一致性需要使用事务，在单个Service中实现会出现嵌套事务。</p>
<p>如我们使用service C同时调用service A和service B ，如果service B抛出异常那么service C（外部事务）如果没有特殊配置（如异常时事务提交）那么整个事务是一定会rollback的。</p>
<p>测试代码：<br>Service C：<br>如下代码所示，使用声明式注解@Transactional(rollbackFor=Exception.class)默认传播特性是Propagation.REQUIRED。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	<span class="keyword">int</span> i = users1Service.insert(users);</div><div class="line">	<span class="keyword">int</span> j = users2Service.insert1(users);</div><div class="line">	<span class="keyword">return</span> i+j;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Controller层：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.POST)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseInfo <span class="title">postUser1</span><span class="params">(@RequestBody Users user)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	ResponseInfo resInfo = <span class="keyword">new</span> ResponseInfo();</div><div class="line">	<span class="keyword">int</span> i = usersService.insert(user);</div><div class="line">	resInfo.setResponseInfo(<span class="string">"users一共新增了"</span> + i + <span class="string">"条数据"</span>);</div><div class="line">	<span class="keyword">return</span> resInfo;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Service A：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(rollbackFor=Exception.class,propagation=Propagation.REQUIRES_NEW)</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Users users)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	<span class="keyword">return</span> usersMapper.insert(users);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Service B：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert1</span><span class="params">(Users users)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	<span class="keyword">return</span> usersMapper.insert1(users);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据以上代码可以通过测试两张表同时插入而一张表失败最后返回的数据进行分析：<br>本次使用Postman测试工具，数据库oracle 11g。<br>两张表其中一张age字段为number6位，一张为number2位，测试数据为三位，会有一张表插入失败，测试数据如下图所示。<br><img src="http://ok0qzthrb.bkt.clouddn.com/5.png" alt="测试数据"></p>
<p>结果是两张表都没有插入，如下图所示。<br><img src="http://ok0qzthrb.bkt.clouddn.com/6.png" alt="测试结果"></p>
<p>经过测试，说明嵌套事务与事务的传播特性有关，都使用默认的传播属性REQUIRED第一张插入后，第二张失败会导致外部事务（Service C）rollback，保证了数据的一致性。<br>若内部事务有使用REQUIRES_NEW属性，则会单独开一事务其运行结果不会影响外部数据会出现数据不一致。<br>若内部事务有使用NESTED属性，内部事务如果出现异常则会rollback到save point，从而外部事务可以使用try-catch进行分支执行（try里执行Service A，catch里执行Service B）。<br>查询语句应该设置为read-only，传播范围设置为NOT_SUPPORTED<br>如下代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line">    * &#123;<span class="doctag">@link</span> newframe.business.demo.service.SecurityInfoService#queryAll()&#125;</div><div class="line">    * */</div><div class="line">   <span class="meta">@Transactional</span>(propagation = Propagation.NOT_SUPPORTED, readOnly = <span class="keyword">true</span>)</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> List&lt;SecurityInfo&gt; <span class="title">queryAll</span><span class="params">()</span> <span class="keyword">throws</span> MessageException </span>&#123;</div><div class="line">       List&lt;SecurityInfo&gt; list = securityInfoMapper.queryAll();</div><div class="line">       <span class="keyword">return</span> list;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>具体使用哪个属性根据业务来进行选择。</p>
<h2 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h2><p>在项目中如果大量组件采用xml的bean定义来配置，显然会增加配置文件的体积，查找不太方便。而注解可以很方便的标注完将其放入spring容器管理。</p>
<p><strong>业务层注解</strong><br>@Service：用于标注业务层组件。<br>@Controller：用于标注控制层组件。<br>@Repository：用于标注数据访问组件，即Dao组件。<br>@Component：泛指组件，不容易归类可以使用该组件。</p>
<p><strong>Bean容器相关的注解</strong><br>@Autowired：等同autowire=byType，根据类型的自动注入依赖。<br>@Qualifier：等同autowire=byName，当@Autowired注解需要判断多个    bean类型相同时，就需要使用@Qualifier(“xxBean”)来指定依赖的bean    的id。<br>@Resource：属于JSR250标准，作用同@Autowired，是属于byName类    型的依赖注入，使用方式：@Resource(name=”xxBean”)，不带参数是默    认类名首字母小写。</p>
<p>@RequestBody：用于读取request请求的body部分数据(Json串或XML数据)，将其转化为需要的对象。<br>@ResponseBody：将Controller的方法返回的对象通过适当的转换(通过配置可以返回Json或XML数据)，写入response对象的body数据区。新框架可以在Controller里使用该注解返回Json数据。</p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> Spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> Transactional </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[很方便的密码加密算法BCrypt]]></title>
      <url>http://itliusir.com/2017/Algorithm-BCrypt/</url>
      <content type="html"><![CDATA[<p>摘要:用户表的密码一般都不是使用明文，使用明文坏处可以参考之前CSDN数据库被黑导致用户密码泄露造成的影响。虽然使用明文也有一定的方便之处(毕竟现在的加密都是单向的，比如客户打电话问密码、老大或者上级问密码)，但是我们完全可以根据用户提供的其他信息(比如密保让客户自己输入密码进行更改而不是直接告诉用户密码)，无论怎么样明文存储密码的坏处一定大于好处。下面将介绍使用Spring Security时候遇到的默认密码加密算法BCrypt：<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>BCrypt算法将salt随机并混入最终加密后的密码，验证时也无需单独提供之前的salt，从而无需单独处理salt问题。</p>
<p>salt随机部分代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据SecureRandom对象与gensalt()方法产生随机值</span></div><div class="line">String salt = gensalt(xx, <span class="keyword">new</span> SecureRandom());</div><div class="line">String BCpwd = hashpw(<span class="string">"123456"</span>, salt);</div></pre></td></tr></table></figure>
<p>用法很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BCpwd是加密后的密文</span></div><div class="line">String BCpwd = BCrypt.hashpw(password, BCrypt.gensalt());</div></pre></td></tr></table></figure>
<p>加密后的格式一般为：</p>
<p>$2a$10$/bTVvqqlH9UiE0ZJZ7N2Me3RIgUCdgMheyTgV0B4cMCSokPa.6oCa</p>
<p>其中：$是分割符，无意义；2a是bcrypt加密版本号；10是cost的值；而后的前22位是salt值；再然后的字符串就是密码的密文了。</p>
<p>这块代码的格式拼接可以查看gensalt()方法源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">gensalt</span><span class="params">(<span class="keyword">int</span> log_rounds, SecureRandom random)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (log_rounds &lt; <span class="number">4</span> || log_rounds &gt; <span class="number">31</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Bad number of rounds"</span>);</div><div class="line">	&#125;</div><div class="line">	StringBuilder rs = <span class="keyword">new</span> StringBuilder();</div><div class="line">	<span class="keyword">byte</span> rnd[] = <span class="keyword">new</span> <span class="keyword">byte</span>[BCRYPT_SALT_LEN];</div><div class="line"></div><div class="line">	random.nextBytes(rnd);</div><div class="line"></div><div class="line">	rs.append(<span class="string">"$2a$"</span>);</div><div class="line">	<span class="keyword">if</span> (log_rounds &lt; <span class="number">10</span>) &#123;</div><div class="line">		rs.append(<span class="string">"0"</span>);</div><div class="line">	&#125;</div><div class="line">	rs.append(log_rounds);</div><div class="line">	rs.append(<span class="string">"$"</span>);</div><div class="line">	encode_base64(rnd, rnd.length, rs);</div><div class="line">	<span class="keyword">return</span> rs.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是我整理的一套BCrypt算法源码，可以很方便的直接拿来用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> bcrypt;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</div><div class="line"><span class="keyword">import</span> java.security.SecureRandom;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBCrypt</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Pattern BCRYPT_PATTERN = Pattern</div><div class="line">			.compile(<span class="string">"\\A\\$2a?\\$\\d\\d\\$[./0-9A-Za-z]&#123;53&#125;"</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GENSALT_DEFAULT_LOG2_ROUNDS = <span class="number">10</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BCRYPT_SALT_LEN = <span class="number">16</span>;</div><div class="line">	<span class="comment">// Blowfish parameters</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BLOWFISH_NUM_ROUNDS = <span class="number">16</span>;</div><div class="line">	<span class="comment">// Initial contents of key schedule</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> P_orig[] = &#123; <span class="number">0x243f6a88</span>, <span class="number">0x85a308d3</span>, <span class="number">0x13198a2e</span>, <span class="number">0x03707344</span>,</div><div class="line">			<span class="number">0xa4093822</span>, <span class="number">0x299f31d0</span>, <span class="number">0x082efa98</span>, <span class="number">0xec4e6c89</span>, <span class="number">0x452821e6</span>, <span class="number">0x38d01377</span>,</div><div class="line">			<span class="number">0xbe5466cf</span>, <span class="number">0x34e90c6c</span>, <span class="number">0xc0ac29b7</span>, <span class="number">0xc97c50dd</span>, <span class="number">0x3f84d5b5</span>, <span class="number">0xb5470917</span>,</div><div class="line">			<span class="number">0x9216d5d9</span>, <span class="number">0x8979fb1b</span> &#125;;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> S_orig[] = &#123; <span class="number">0xd1310ba6</span>, <span class="number">0x98dfb5ac</span>, <span class="number">0x2ffd72db</span>, <span class="number">0xd01adfb7</span>,</div><div class="line">			<span class="number">0xb8e1afed</span>, <span class="number">0x6a267e96</span>, <span class="number">0xba7c9045</span>, <span class="number">0xf12c7f99</span>, <span class="number">0x24a19947</span>, <span class="number">0xb3916cf7</span>,</div><div class="line">			<span class="number">0x0801f2e2</span>, <span class="number">0x858efc16</span>, <span class="number">0x636920d8</span>, <span class="number">0x71574e69</span>, <span class="number">0xa458fea3</span>, <span class="number">0xf4933d7e</span>,</div><div class="line">			<span class="number">0x0d95748f</span>, <span class="number">0x728eb658</span>, <span class="number">0x718bcd58</span>, <span class="number">0x82154aee</span>, <span class="number">0x7b54a41d</span>, <span class="number">0xc25a59b5</span>,</div><div class="line">			<span class="number">0x9c30d539</span>, <span class="number">0x2af26013</span>, <span class="number">0xc5d1b023</span>, <span class="number">0x286085f0</span>, <span class="number">0xca417918</span>, <span class="number">0xb8db38ef</span>,</div><div class="line">			<span class="number">0x8e79dcb0</span>, <span class="number">0x603a180e</span>, <span class="number">0x6c9e0e8b</span>, <span class="number">0xb01e8a3e</span>, <span class="number">0xd71577c1</span>, <span class="number">0xbd314b27</span>,</div><div class="line">			<span class="number">0x78af2fda</span>, <span class="number">0x55605c60</span>, <span class="number">0xe65525f3</span>, <span class="number">0xaa55ab94</span>, <span class="number">0x57489862</span>, <span class="number">0x63e81440</span>,</div><div class="line">			<span class="number">0x55ca396a</span>, <span class="number">0x2aab10b6</span>, <span class="number">0xb4cc5c34</span>, <span class="number">0x1141e8ce</span>, <span class="number">0xa15486af</span>, <span class="number">0x7c72e993</span>,</div><div class="line">			<span class="number">0xb3ee1411</span>, <span class="number">0x636fbc2a</span>, <span class="number">0x2ba9c55d</span>, <span class="number">0x741831f6</span>, <span class="number">0xce5c3e16</span>, <span class="number">0x9b87931e</span>,</div><div class="line">			<span class="number">0xafd6ba33</span>, <span class="number">0x6c24cf5c</span>, <span class="number">0x7a325381</span>, <span class="number">0x28958677</span>, <span class="number">0x3b8f4898</span>, <span class="number">0x6b4bb9af</span>,</div><div class="line">			<span class="number">0xc4bfe81b</span>, <span class="number">0x66282193</span>, <span class="number">0x61d809cc</span>, <span class="number">0xfb21a991</span>, <span class="number">0x487cac60</span>, <span class="number">0x5dec8032</span>,</div><div class="line">			<span class="number">0xef845d5d</span>, <span class="number">0xe98575b1</span>, <span class="number">0xdc262302</span>, <span class="number">0xeb651b88</span>, <span class="number">0x23893e81</span>, <span class="number">0xd396acc5</span>,</div><div class="line">			<span class="number">0x0f6d6ff3</span>, <span class="number">0x83f44239</span>, <span class="number">0x2e0b4482</span>, <span class="number">0xa4842004</span>, <span class="number">0x69c8f04a</span>, <span class="number">0x9e1f9b5e</span>,</div><div class="line">			<span class="number">0x21c66842</span>, <span class="number">0xf6e96c9a</span>, <span class="number">0x670c9c61</span>, <span class="number">0xabd388f0</span>, <span class="number">0x6a51a0d2</span>, <span class="number">0xd8542f68</span>,</div><div class="line">			<span class="number">0x960fa728</span>, <span class="number">0xab5133a3</span>, <span class="number">0x6eef0b6c</span>, <span class="number">0x137a3be4</span>, <span class="number">0xba3bf050</span>, <span class="number">0x7efb2a98</span>,</div><div class="line">			<span class="number">0xa1f1651d</span>, <span class="number">0x39af0176</span>, <span class="number">0x66ca593e</span>, <span class="number">0x82430e88</span>, <span class="number">0x8cee8619</span>, <span class="number">0x456f9fb4</span>,</div><div class="line">			<span class="number">0x7d84a5c3</span>, <span class="number">0x3b8b5ebe</span>, <span class="number">0xe06f75d8</span>, <span class="number">0x85c12073</span>, <span class="number">0x401a449f</span>, <span class="number">0x56c16aa6</span>,</div><div class="line">			<span class="number">0x4ed3aa62</span>, <span class="number">0x363f7706</span>, <span class="number">0x1bfedf72</span>, <span class="number">0x429b023d</span>, <span class="number">0x37d0d724</span>, <span class="number">0xd00a1248</span>,</div><div class="line">			<span class="number">0xdb0fead3</span>, <span class="number">0x49f1c09b</span>, <span class="number">0x075372c9</span>, <span class="number">0x80991b7b</span>, <span class="number">0x25d479d8</span>, <span class="number">0xf6e8def7</span>,</div><div class="line">			<span class="number">0xe3fe501a</span>, <span class="number">0xb6794c3b</span>, <span class="number">0x976ce0bd</span>, <span class="number">0x04c006ba</span>, <span class="number">0xc1a94fb6</span>, <span class="number">0x409f60c4</span>,</div><div class="line">			<span class="number">0x5e5c9ec2</span>, <span class="number">0x196a2463</span>, <span class="number">0x68fb6faf</span>, <span class="number">0x3e6c53b5</span>, <span class="number">0x1339b2eb</span>, <span class="number">0x3b52ec6f</span>,</div><div class="line">			<span class="number">0x6dfc511f</span>, <span class="number">0x9b30952c</span>, <span class="number">0xcc814544</span>, <span class="number">0xaf5ebd09</span>, <span class="number">0xbee3d004</span>, <span class="number">0xde334afd</span>,</div><div class="line">			<span class="number">0x660f2807</span>, <span class="number">0x192e4bb3</span>, <span class="number">0xc0cba857</span>, <span class="number">0x45c8740f</span>, <span class="number">0xd20b5f39</span>, <span class="number">0xb9d3fbdb</span>,</div><div class="line">			<span class="number">0x5579c0bd</span>, <span class="number">0x1a60320a</span>, <span class="number">0xd6a100c6</span>, <span class="number">0x402c7279</span>, <span class="number">0x679f25fe</span>, <span class="number">0xfb1fa3cc</span>,</div><div class="line">			<span class="number">0x8ea5e9f8</span>, <span class="number">0xdb3222f8</span>, <span class="number">0x3c7516df</span>, <span class="number">0xfd616b15</span>, <span class="number">0x2f501ec8</span>, <span class="number">0xad0552ab</span>,</div><div class="line">			<span class="number">0x323db5fa</span>, <span class="number">0xfd238760</span>, <span class="number">0x53317b48</span>, <span class="number">0x3e00df82</span>, <span class="number">0x9e5c57bb</span>, <span class="number">0xca6f8ca0</span>,</div><div class="line">			<span class="number">0x1a87562e</span>, <span class="number">0xdf1769db</span>, <span class="number">0xd542a8f6</span>, <span class="number">0x287effc3</span>, <span class="number">0xac6732c6</span>, <span class="number">0x8c4f5573</span>,</div><div class="line">			<span class="number">0x695b27b0</span>, <span class="number">0xbbca58c8</span>, <span class="number">0xe1ffa35d</span>, <span class="number">0xb8f011a0</span>, <span class="number">0x10fa3d98</span>, <span class="number">0xfd2183b8</span>,</div><div class="line">			<span class="number">0x4afcb56c</span>, <span class="number">0x2dd1d35b</span>, <span class="number">0x9a53e479</span>, <span class="number">0xb6f84565</span>, <span class="number">0xd28e49bc</span>, <span class="number">0x4bfb9790</span>,</div><div class="line">			<span class="number">0xe1ddf2da</span>, <span class="number">0xa4cb7e33</span>, <span class="number">0x62fb1341</span>, <span class="number">0xcee4c6e8</span>, <span class="number">0xef20cada</span>, <span class="number">0x36774c01</span>,</div><div class="line">			<span class="number">0xd07e9efe</span>, <span class="number">0x2bf11fb4</span>, <span class="number">0x95dbda4d</span>, <span class="number">0xae909198</span>, <span class="number">0xeaad8e71</span>, <span class="number">0x6b93d5a0</span>,</div><div class="line">			<span class="number">0xd08ed1d0</span>, <span class="number">0xafc725e0</span>, <span class="number">0x8e3c5b2f</span>, <span class="number">0x8e7594b7</span>, <span class="number">0x8ff6e2fb</span>, <span class="number">0xf2122b64</span>,</div><div class="line">			<span class="number">0x8888b812</span>, <span class="number">0x900df01c</span>, <span class="number">0x4fad5ea0</span>, <span class="number">0x688fc31c</span>, <span class="number">0xd1cff191</span>, <span class="number">0xb3a8c1ad</span>,</div><div class="line">			<span class="number">0x2f2f2218</span>, <span class="number">0xbe0e1777</span>, <span class="number">0xea752dfe</span>, <span class="number">0x8b021fa1</span>, <span class="number">0xe5a0cc0f</span>, <span class="number">0xb56f74e8</span>,</div><div class="line">			<span class="number">0x18acf3d6</span>, <span class="number">0xce89e299</span>, <span class="number">0xb4a84fe0</span>, <span class="number">0xfd13e0b7</span>, <span class="number">0x7cc43b81</span>, <span class="number">0xd2ada8d9</span>,</div><div class="line">			<span class="number">0x165fa266</span>, <span class="number">0x80957705</span>, <span class="number">0x93cc7314</span>, <span class="number">0x211a1477</span>, <span class="number">0xe6ad2065</span>, <span class="number">0x77b5fa86</span>,</div><div class="line">			<span class="number">0xc75442f5</span>, <span class="number">0xfb9d35cf</span>, <span class="number">0xebcdaf0c</span>, <span class="number">0x7b3e89a0</span>, <span class="number">0xd6411bd3</span>, <span class="number">0xae1e7e49</span>,</div><div class="line">			<span class="number">0x00250e2d</span>, <span class="number">0x2071b35e</span>, <span class="number">0x226800bb</span>, <span class="number">0x57b8e0af</span>, <span class="number">0x2464369b</span>, <span class="number">0xf009b91e</span>,</div><div class="line">			<span class="number">0x5563911d</span>, <span class="number">0x59dfa6aa</span>, <span class="number">0x78c14389</span>, <span class="number">0xd95a537f</span>, <span class="number">0x207d5ba2</span>, <span class="number">0x02e5b9c5</span>,</div><div class="line">			<span class="number">0x83260376</span>, <span class="number">0x6295cfa9</span>, <span class="number">0x11c81968</span>, <span class="number">0x4e734a41</span>, <span class="number">0xb3472dca</span>, <span class="number">0x7b14a94a</span>,</div><div class="line">			<span class="number">0x1b510052</span>, <span class="number">0x9a532915</span>, <span class="number">0xd60f573f</span>, <span class="number">0xbc9bc6e4</span>, <span class="number">0x2b60a476</span>, <span class="number">0x81e67400</span>,</div><div class="line">			<span class="number">0x08ba6fb5</span>, <span class="number">0x571be91f</span>, <span class="number">0xf296ec6b</span>, <span class="number">0x2a0dd915</span>, <span class="number">0xb6636521</span>, <span class="number">0xe7b9f9b6</span>,</div><div class="line">			<span class="number">0xff34052e</span>, <span class="number">0xc5855664</span>, <span class="number">0x53b02d5d</span>, <span class="number">0xa99f8fa1</span>, <span class="number">0x08ba4799</span>, <span class="number">0x6e85076a</span>,</div><div class="line">			<span class="number">0x4b7a70e9</span>, <span class="number">0xb5b32944</span>, <span class="number">0xdb75092e</span>, <span class="number">0xc4192623</span>, <span class="number">0xad6ea6b0</span>, <span class="number">0x49a7df7d</span>,</div><div class="line">			<span class="number">0x9cee60b8</span>, <span class="number">0x8fedb266</span>, <span class="number">0xecaa8c71</span>, <span class="number">0x699a17ff</span>, <span class="number">0x5664526c</span>, <span class="number">0xc2b19ee1</span>,</div><div class="line">			<span class="number">0x193602a5</span>, <span class="number">0x75094c29</span>, <span class="number">0xa0591340</span>, <span class="number">0xe4183a3e</span>, <span class="number">0x3f54989a</span>, <span class="number">0x5b429d65</span>,</div><div class="line">			<span class="number">0x6b8fe4d6</span>, <span class="number">0x99f73fd6</span>, <span class="number">0xa1d29c07</span>, <span class="number">0xefe830f5</span>, <span class="number">0x4d2d38e6</span>, <span class="number">0xf0255dc1</span>,</div><div class="line">			<span class="number">0x4cdd2086</span>, <span class="number">0x8470eb26</span>, <span class="number">0x6382e9c6</span>, <span class="number">0x021ecc5e</span>, <span class="number">0x09686b3f</span>, <span class="number">0x3ebaefc9</span>,</div><div class="line">			<span class="number">0x3c971814</span>, <span class="number">0x6b6a70a1</span>, <span class="number">0x687f3584</span>, <span class="number">0x52a0e286</span>, <span class="number">0xb79c5305</span>, <span class="number">0xaa500737</span>,</div><div class="line">			<span class="number">0x3e07841c</span>, <span class="number">0x7fdeae5c</span>, <span class="number">0x8e7d44ec</span>, <span class="number">0x5716f2b8</span>, <span class="number">0xb03ada37</span>, <span class="number">0xf0500c0d</span>,</div><div class="line">			<span class="number">0xf01c1f04</span>, <span class="number">0x0200b3ff</span>, <span class="number">0xae0cf51a</span>, <span class="number">0x3cb574b2</span>, <span class="number">0x25837a58</span>, <span class="number">0xdc0921bd</span>,</div><div class="line">			<span class="number">0xd19113f9</span>, <span class="number">0x7ca92ff6</span>, <span class="number">0x94324773</span>, <span class="number">0x22f54701</span>, <span class="number">0x3ae5e581</span>, <span class="number">0x37c2dadc</span>,</div><div class="line">			<span class="number">0xc8b57634</span>, <span class="number">0x9af3dda7</span>, <span class="number">0xa9446146</span>, <span class="number">0x0fd0030e</span>, <span class="number">0xecc8c73e</span>, <span class="number">0xa4751e41</span>,</div><div class="line">			<span class="number">0xe238cd99</span>, <span class="number">0x3bea0e2f</span>, <span class="number">0x3280bba1</span>, <span class="number">0x183eb331</span>, <span class="number">0x4e548b38</span>, <span class="number">0x4f6db908</span>,</div><div class="line">			<span class="number">0x6f420d03</span>, <span class="number">0xf60a04bf</span>, <span class="number">0x2cb81290</span>, <span class="number">0x24977c79</span>, <span class="number">0x5679b072</span>, <span class="number">0xbcaf89af</span>,</div><div class="line">			<span class="number">0xde9a771f</span>, <span class="number">0xd9930810</span>, <span class="number">0xb38bae12</span>, <span class="number">0xdccf3f2e</span>, <span class="number">0x5512721f</span>, <span class="number">0x2e6b7124</span>,</div><div class="line">			<span class="number">0x501adde6</span>, <span class="number">0x9f84cd87</span>, <span class="number">0x7a584718</span>, <span class="number">0x7408da17</span>, <span class="number">0xbc9f9abc</span>, <span class="number">0xe94b7d8c</span>,</div><div class="line">			<span class="number">0xec7aec3a</span>, <span class="number">0xdb851dfa</span>, <span class="number">0x63094366</span>, <span class="number">0xc464c3d2</span>, <span class="number">0xef1c1847</span>, <span class="number">0x3215d908</span>,</div><div class="line">			<span class="number">0xdd433b37</span>, <span class="number">0x24c2ba16</span>, <span class="number">0x12a14d43</span>, <span class="number">0x2a65c451</span>, <span class="number">0x50940002</span>, <span class="number">0x133ae4dd</span>,</div><div class="line">			<span class="number">0x71dff89e</span>, <span class="number">0x10314e55</span>, <span class="number">0x81ac77d6</span>, <span class="number">0x5f11199b</span>, <span class="number">0x043556f1</span>, <span class="number">0xd7a3c76b</span>,</div><div class="line">			<span class="number">0x3c11183b</span>, <span class="number">0x5924a509</span>, <span class="number">0xf28fe6ed</span>, <span class="number">0x97f1fbfa</span>, <span class="number">0x9ebabf2c</span>, <span class="number">0x1e153c6e</span>,</div><div class="line">			<span class="number">0x86e34570</span>, <span class="number">0xeae96fb1</span>, <span class="number">0x860e5e0a</span>, <span class="number">0x5a3e2ab3</span>, <span class="number">0x771fe71c</span>, <span class="number">0x4e3d06fa</span>,</div><div class="line">			<span class="number">0x2965dcb9</span>, <span class="number">0x99e71d0f</span>, <span class="number">0x803e89d6</span>, <span class="number">0x5266c825</span>, <span class="number">0x2e4cc978</span>, <span class="number">0x9c10b36a</span>,</div><div class="line">			<span class="number">0xc6150eba</span>, <span class="number">0x94e2ea78</span>, <span class="number">0xa5fc3c53</span>, <span class="number">0x1e0a2df4</span>, <span class="number">0xf2f74ea7</span>, <span class="number">0x361d2b3d</span>,</div><div class="line">			<span class="number">0x1939260f</span>, <span class="number">0x19c27960</span>, <span class="number">0x5223a708</span>, <span class="number">0xf71312b6</span>, <span class="number">0xebadfe6e</span>, <span class="number">0xeac31f66</span>,</div><div class="line">			<span class="number">0xe3bc4595</span>, <span class="number">0xa67bc883</span>, <span class="number">0xb17f37d1</span>, <span class="number">0x018cff28</span>, <span class="number">0xc332ddef</span>, <span class="number">0xbe6c5aa5</span>,</div><div class="line">			<span class="number">0x65582185</span>, <span class="number">0x68ab9802</span>, <span class="number">0xeecea50f</span>, <span class="number">0xdb2f953b</span>, <span class="number">0x2aef7dad</span>, <span class="number">0x5b6e2f84</span>,</div><div class="line">			<span class="number">0x1521b628</span>, <span class="number">0x29076170</span>, <span class="number">0xecdd4775</span>, <span class="number">0x619f1510</span>, <span class="number">0x13cca830</span>, <span class="number">0xeb61bd96</span>,</div><div class="line">			<span class="number">0x0334fe1e</span>, <span class="number">0xaa0363cf</span>, <span class="number">0xb5735c90</span>, <span class="number">0x4c70a239</span>, <span class="number">0xd59e9e0b</span>, <span class="number">0xcbaade14</span>,</div><div class="line">			<span class="number">0xeecc86bc</span>, <span class="number">0x60622ca7</span>, <span class="number">0x9cab5cab</span>, <span class="number">0xb2f3846e</span>, <span class="number">0x648b1eaf</span>, <span class="number">0x19bdf0ca</span>,</div><div class="line">			<span class="number">0xa02369b9</span>, <span class="number">0x655abb50</span>, <span class="number">0x40685a32</span>, <span class="number">0x3c2ab4b3</span>, <span class="number">0x319ee9d5</span>, <span class="number">0xc021b8f7</span>,</div><div class="line">			<span class="number">0x9b540b19</span>, <span class="number">0x875fa099</span>, <span class="number">0x95f7997e</span>, <span class="number">0x623d7da8</span>, <span class="number">0xf837889a</span>, <span class="number">0x97e32d77</span>,</div><div class="line">			<span class="number">0x11ed935f</span>, <span class="number">0x16681281</span>, <span class="number">0x0e358829</span>, <span class="number">0xc7e61fd6</span>, <span class="number">0x96dedfa1</span>, <span class="number">0x7858ba99</span>,</div><div class="line">			<span class="number">0x57f584a5</span>, <span class="number">0x1b227263</span>, <span class="number">0x9b83c3ff</span>, <span class="number">0x1ac24696</span>, <span class="number">0xcdb30aeb</span>, <span class="number">0x532e3054</span>,</div><div class="line">			<span class="number">0x8fd948e4</span>, <span class="number">0x6dbc3128</span>, <span class="number">0x58ebf2ef</span>, <span class="number">0x34c6ffea</span>, <span class="number">0xfe28ed61</span>, <span class="number">0xee7c3c73</span>,</div><div class="line">			<span class="number">0x5d4a14d9</span>, <span class="number">0xe864b7e3</span>, <span class="number">0x42105d14</span>, <span class="number">0x203e13e0</span>, <span class="number">0x45eee2b6</span>, <span class="number">0xa3aaabea</span>,</div><div class="line">			<span class="number">0xdb6c4f15</span>, <span class="number">0xfacb4fd0</span>, <span class="number">0xc742f442</span>, <span class="number">0xef6abbb5</span>, <span class="number">0x654f3b1d</span>, <span class="number">0x41cd2105</span>,</div><div class="line">			<span class="number">0xd81e799e</span>, <span class="number">0x86854dc7</span>, <span class="number">0xe44b476a</span>, <span class="number">0x3d816250</span>, <span class="number">0xcf62a1f2</span>, <span class="number">0x5b8d2646</span>,</div><div class="line">			<span class="number">0xfc8883a0</span>, <span class="number">0xc1c7b6a3</span>, <span class="number">0x7f1524c3</span>, <span class="number">0x69cb7492</span>, <span class="number">0x47848a0b</span>, <span class="number">0x5692b285</span>,</div><div class="line">			<span class="number">0x095bbf00</span>, <span class="number">0xad19489d</span>, <span class="number">0x1462b174</span>, <span class="number">0x23820e00</span>, <span class="number">0x58428d2a</span>, <span class="number">0x0c55f5ea</span>,</div><div class="line">			<span class="number">0x1dadf43e</span>, <span class="number">0x233f7061</span>, <span class="number">0x3372f092</span>, <span class="number">0x8d937e41</span>, <span class="number">0xd65fecf1</span>, <span class="number">0x6c223bdb</span>,</div><div class="line">			<span class="number">0x7cde3759</span>, <span class="number">0xcbee7460</span>, <span class="number">0x4085f2a7</span>, <span class="number">0xce77326e</span>, <span class="number">0xa6078084</span>, <span class="number">0x19f8509e</span>,</div><div class="line">			<span class="number">0xe8efd855</span>, <span class="number">0x61d99735</span>, <span class="number">0xa969a7aa</span>, <span class="number">0xc50c06c2</span>, <span class="number">0x5a04abfc</span>, <span class="number">0x800bcadc</span>,</div><div class="line">			<span class="number">0x9e447a2e</span>, <span class="number">0xc3453484</span>, <span class="number">0xfdd56705</span>, <span class="number">0x0e1e9ec9</span>, <span class="number">0xdb73dbd3</span>, <span class="number">0x105588cd</span>,</div><div class="line">			<span class="number">0x675fda79</span>, <span class="number">0xe3674340</span>, <span class="number">0xc5c43465</span>, <span class="number">0x713e38d8</span>, <span class="number">0x3d28f89e</span>, <span class="number">0xf16dff20</span>,</div><div class="line">			<span class="number">0x153e21e7</span>, <span class="number">0x8fb03d4a</span>, <span class="number">0xe6e39f2b</span>, <span class="number">0xdb83adf7</span>, <span class="number">0xe93d5a68</span>, <span class="number">0x948140f7</span>,</div><div class="line">			<span class="number">0xf64c261c</span>, <span class="number">0x94692934</span>, <span class="number">0x411520f7</span>, <span class="number">0x7602d4f7</span>, <span class="number">0xbcf46b2e</span>, <span class="number">0xd4a20068</span>,</div><div class="line">			<span class="number">0xd4082471</span>, <span class="number">0x3320f46a</span>, <span class="number">0x43b7d4b7</span>, <span class="number">0x500061af</span>, <span class="number">0x1e39f62e</span>, <span class="number">0x97244546</span>,</div><div class="line">			<span class="number">0x14214f74</span>, <span class="number">0xbf8b8840</span>, <span class="number">0x4d95fc1d</span>, <span class="number">0x96b591af</span>, <span class="number">0x70f4ddd3</span>, <span class="number">0x66a02f45</span>,</div><div class="line">			<span class="number">0xbfbc09ec</span>, <span class="number">0x03bd9785</span>, <span class="number">0x7fac6dd0</span>, <span class="number">0x31cb8504</span>, <span class="number">0x96eb27b3</span>, <span class="number">0x55fd3941</span>,</div><div class="line">			<span class="number">0xda2547e6</span>, <span class="number">0xabca0a9a</span>, <span class="number">0x28507825</span>, <span class="number">0x530429f4</span>, <span class="number">0x0a2c86da</span>, <span class="number">0xe9b66dfb</span>,</div><div class="line">			<span class="number">0x68dc1462</span>, <span class="number">0xd7486900</span>, <span class="number">0x680ec0a4</span>, <span class="number">0x27a18dee</span>, <span class="number">0x4f3ffea2</span>, <span class="number">0xe887ad8c</span>,</div><div class="line">			<span class="number">0xb58ce006</span>, <span class="number">0x7af4d6b6</span>, <span class="number">0xaace1e7c</span>, <span class="number">0xd3375fec</span>, <span class="number">0xce78a399</span>, <span class="number">0x406b2a42</span>,</div><div class="line">			<span class="number">0x20fe9e35</span>, <span class="number">0xd9f385b9</span>, <span class="number">0xee39d7ab</span>, <span class="number">0x3b124e8b</span>, <span class="number">0x1dc9faf7</span>, <span class="number">0x4b6d1856</span>,</div><div class="line">			<span class="number">0x26a36631</span>, <span class="number">0xeae397b2</span>, <span class="number">0x3a6efa74</span>, <span class="number">0xdd5b4332</span>, <span class="number">0x6841e7f7</span>, <span class="number">0xca7820fb</span>,</div><div class="line">			<span class="number">0xfb0af54e</span>, <span class="number">0xd8feb397</span>, <span class="number">0x454056ac</span>, <span class="number">0xba489527</span>, <span class="number">0x55533a3a</span>, <span class="number">0x20838d87</span>,</div><div class="line">			<span class="number">0xfe6ba9b7</span>, <span class="number">0xd096954b</span>, <span class="number">0x55a867bc</span>, <span class="number">0xa1159a58</span>, <span class="number">0xcca92963</span>, <span class="number">0x99e1db33</span>,</div><div class="line">			<span class="number">0xa62a4a56</span>, <span class="number">0x3f3125f9</span>, <span class="number">0x5ef47e1c</span>, <span class="number">0x9029317c</span>, <span class="number">0xfdf8e802</span>, <span class="number">0x04272f70</span>,</div><div class="line">			<span class="number">0x80bb155c</span>, <span class="number">0x05282ce3</span>, <span class="number">0x95c11548</span>, <span class="number">0xe4c66d22</span>, <span class="number">0x48c1133f</span>, <span class="number">0xc70f86dc</span>,</div><div class="line">			<span class="number">0x07f9c9ee</span>, <span class="number">0x41041f0f</span>, <span class="number">0x404779a4</span>, <span class="number">0x5d886e17</span>, <span class="number">0x325f51eb</span>, <span class="number">0xd59bc0d1</span>,</div><div class="line">			<span class="number">0xf2bcc18f</span>, <span class="number">0x41113564</span>, <span class="number">0x257b7834</span>, <span class="number">0x602a9c60</span>, <span class="number">0xdff8e8a3</span>, <span class="number">0x1f636c1b</span>,</div><div class="line">			<span class="number">0x0e12b4c2</span>, <span class="number">0x02e1329e</span>, <span class="number">0xaf664fd1</span>, <span class="number">0xcad18115</span>, <span class="number">0x6b2395e0</span>, <span class="number">0x333e92e1</span>,</div><div class="line">			<span class="number">0x3b240b62</span>, <span class="number">0xeebeb922</span>, <span class="number">0x85b2a20e</span>, <span class="number">0xe6ba0d99</span>, <span class="number">0xde720c8c</span>, <span class="number">0x2da2f728</span>,</div><div class="line">			<span class="number">0xd0127845</span>, <span class="number">0x95b794fd</span>, <span class="number">0x647d0862</span>, <span class="number">0xe7ccf5f0</span>, <span class="number">0x5449a36f</span>, <span class="number">0x877d48fa</span>,</div><div class="line">			<span class="number">0xc39dfd27</span>, <span class="number">0xf33e8d1e</span>, <span class="number">0x0a476341</span>, <span class="number">0x992eff74</span>, <span class="number">0x3a6f6eab</span>, <span class="number">0xf4f8fd37</span>,</div><div class="line">			<span class="number">0xa812dc60</span>, <span class="number">0xa1ebddf8</span>, <span class="number">0x991be14c</span>, <span class="number">0xdb6e6b0d</span>, <span class="number">0xc67b5510</span>, <span class="number">0x6d672c37</span>,</div><div class="line">			<span class="number">0x2765d43b</span>, <span class="number">0xdcd0e804</span>, <span class="number">0xf1290dc7</span>, <span class="number">0xcc00ffa3</span>, <span class="number">0xb5390f92</span>, <span class="number">0x690fed0b</span>,</div><div class="line">			<span class="number">0x667b9ffb</span>, <span class="number">0xcedb7d9c</span>, <span class="number">0xa091cf0b</span>, <span class="number">0xd9155ea3</span>, <span class="number">0xbb132f88</span>, <span class="number">0x515bad24</span>,</div><div class="line">			<span class="number">0x7b9479bf</span>, <span class="number">0x763bd6eb</span>, <span class="number">0x37392eb3</span>, <span class="number">0xcc115979</span>, <span class="number">0x8026e297</span>, <span class="number">0xf42e312d</span>,</div><div class="line">			<span class="number">0x6842ada7</span>, <span class="number">0xc66a2b3b</span>, <span class="number">0x12754ccc</span>, <span class="number">0x782ef11c</span>, <span class="number">0x6a124237</span>, <span class="number">0xb79251e7</span>,</div><div class="line">			<span class="number">0x06a1bbe6</span>, <span class="number">0x4bfb6350</span>, <span class="number">0x1a6b1018</span>, <span class="number">0x11caedfa</span>, <span class="number">0x3d25bdd8</span>, <span class="number">0xe2e1c3c9</span>,</div><div class="line">			<span class="number">0x44421659</span>, <span class="number">0x0a121386</span>, <span class="number">0xd90cec6e</span>, <span class="number">0xd5abea2a</span>, <span class="number">0x64af674e</span>, <span class="number">0xda86a85f</span>,</div><div class="line">			<span class="number">0xbebfe988</span>, <span class="number">0x64e4c3fe</span>, <span class="number">0x9dbc8057</span>, <span class="number">0xf0f7c086</span>, <span class="number">0x60787bf8</span>, <span class="number">0x6003604d</span>,</div><div class="line">			<span class="number">0xd1fd8346</span>, <span class="number">0xf6381fb0</span>, <span class="number">0x7745ae04</span>, <span class="number">0xd736fccc</span>, <span class="number">0x83426b33</span>, <span class="number">0xf01eab71</span>,</div><div class="line">			<span class="number">0xb0804187</span>, <span class="number">0x3c005e5f</span>, <span class="number">0x77a057be</span>, <span class="number">0xbde8ae24</span>, <span class="number">0x55464299</span>, <span class="number">0xbf582e61</span>,</div><div class="line">			<span class="number">0x4e58f48f</span>, <span class="number">0xf2ddfda2</span>, <span class="number">0xf474ef38</span>, <span class="number">0x8789bdc2</span>, <span class="number">0x5366f9c3</span>, <span class="number">0xc8b38e74</span>,</div><div class="line">			<span class="number">0xb475f255</span>, <span class="number">0x46fcd9b9</span>, <span class="number">0x7aeb2661</span>, <span class="number">0x8b1ddf84</span>, <span class="number">0x846a0e79</span>, <span class="number">0x915f95e2</span>,</div><div class="line">			<span class="number">0x466e598e</span>, <span class="number">0x20b45770</span>, <span class="number">0x8cd55591</span>, <span class="number">0xc902de4c</span>, <span class="number">0xb90bace1</span>, <span class="number">0xbb8205d0</span>,</div><div class="line">			<span class="number">0x11a86248</span>, <span class="number">0x7574a99e</span>, <span class="number">0xb77f19b6</span>, <span class="number">0xe0a9dc09</span>, <span class="number">0x662d09a1</span>, <span class="number">0xc4324633</span>,</div><div class="line">			<span class="number">0xe85a1f02</span>, <span class="number">0x09f0be8c</span>, <span class="number">0x4a99a025</span>, <span class="number">0x1d6efe10</span>, <span class="number">0x1ab93d1d</span>, <span class="number">0x0ba5a4df</span>,</div><div class="line">			<span class="number">0xa186f20f</span>, <span class="number">0x2868f169</span>, <span class="number">0xdcb7da83</span>, <span class="number">0x573906fe</span>, <span class="number">0xa1e2ce9b</span>, <span class="number">0x4fcd7f52</span>,</div><div class="line">			<span class="number">0x50115e01</span>, <span class="number">0xa70683fa</span>, <span class="number">0xa002b5c4</span>, <span class="number">0x0de6d027</span>, <span class="number">0x9af88c27</span>, <span class="number">0x773f8641</span>,</div><div class="line">			<span class="number">0xc3604c06</span>, <span class="number">0x61a806b5</span>, <span class="number">0xf0177a28</span>, <span class="number">0xc0f586e0</span>, <span class="number">0x006058aa</span>, <span class="number">0x30dc7d62</span>,</div><div class="line">			<span class="number">0x11e69ed7</span>, <span class="number">0x2338ea63</span>, <span class="number">0x53c2dd94</span>, <span class="number">0xc2c21634</span>, <span class="number">0xbbcbee56</span>, <span class="number">0x90bcb6de</span>,</div><div class="line">			<span class="number">0xebfc7da1</span>, <span class="number">0xce591d76</span>, <span class="number">0x6f05e409</span>, <span class="number">0x4b7c0188</span>, <span class="number">0x39720a3d</span>, <span class="number">0x7c927c24</span>,</div><div class="line">			<span class="number">0x86e3725f</span>, <span class="number">0x724d9db9</span>, <span class="number">0x1ac15bb4</span>, <span class="number">0xd39eb8fc</span>, <span class="number">0xed545578</span>, <span class="number">0x08fca5b5</span>,</div><div class="line">			<span class="number">0xd83d7cd3</span>, <span class="number">0x4dad0fc4</span>, <span class="number">0x1e50ef5e</span>, <span class="number">0xb161e6f8</span>, <span class="number">0xa28514d9</span>, <span class="number">0x6c51133c</span>,</div><div class="line">			<span class="number">0x6fd5c7e7</span>, <span class="number">0x56e14ec4</span>, <span class="number">0x362abfce</span>, <span class="number">0xddc6c837</span>, <span class="number">0xd79a3234</span>, <span class="number">0x92638212</span>,</div><div class="line">			<span class="number">0x670efa8e</span>, <span class="number">0x406000e0</span>, <span class="number">0x3a39ce37</span>, <span class="number">0xd3faf5cf</span>, <span class="number">0xabc27737</span>, <span class="number">0x5ac52d1b</span>,</div><div class="line">			<span class="number">0x5cb0679e</span>, <span class="number">0x4fa33742</span>, <span class="number">0xd3822740</span>, <span class="number">0x99bc9bbe</span>, <span class="number">0xd5118e9d</span>, <span class="number">0xbf0f7315</span>,</div><div class="line">			<span class="number">0xd62d1c7e</span>, <span class="number">0xc700c47b</span>, <span class="number">0xb78c1b6b</span>, <span class="number">0x21a19045</span>, <span class="number">0xb26eb1be</span>, <span class="number">0x6a366eb4</span>,</div><div class="line">			<span class="number">0x5748ab2f</span>, <span class="number">0xbc946e79</span>, <span class="number">0xc6a376d2</span>, <span class="number">0x6549c2c8</span>, <span class="number">0x530ff8ee</span>, <span class="number">0x468dde7d</span>,</div><div class="line">			<span class="number">0xd5730a1d</span>, <span class="number">0x4cd04dc6</span>, <span class="number">0x2939bbdb</span>, <span class="number">0xa9ba4650</span>, <span class="number">0xac9526e8</span>, <span class="number">0xbe5ee304</span>,</div><div class="line">			<span class="number">0xa1fad5f0</span>, <span class="number">0x6a2d519a</span>, <span class="number">0x63ef8ce2</span>, <span class="number">0x9a86ee22</span>, <span class="number">0xc089c2b8</span>, <span class="number">0x43242ef6</span>,</div><div class="line">			<span class="number">0xa51e03aa</span>, <span class="number">0x9cf2d0a4</span>, <span class="number">0x83c061ba</span>, <span class="number">0x9be96a4d</span>, <span class="number">0x8fe51550</span>, <span class="number">0xba645bd6</span>,</div><div class="line">			<span class="number">0x2826a2f9</span>, <span class="number">0xa73a3ae1</span>, <span class="number">0x4ba99586</span>, <span class="number">0xef5562e9</span>, <span class="number">0xc72fefd3</span>, <span class="number">0xf752f7da</span>,</div><div class="line">			<span class="number">0x3f046f69</span>, <span class="number">0x77fa0a59</span>, <span class="number">0x80e4a915</span>, <span class="number">0x87b08601</span>, <span class="number">0x9b09e6ad</span>, <span class="number">0x3b3ee593</span>,</div><div class="line">			<span class="number">0xe990fd5a</span>, <span class="number">0x9e34d797</span>, <span class="number">0x2cf0b7d9</span>, <span class="number">0x022b8b51</span>, <span class="number">0x96d5ac3a</span>, <span class="number">0x017da67d</span>,</div><div class="line">			<span class="number">0xd1cf3ed6</span>, <span class="number">0x7c7d2d28</span>, <span class="number">0x1f9f25cf</span>, <span class="number">0xadf2b89b</span>, <span class="number">0x5ad6b472</span>, <span class="number">0x5a88f54c</span>,</div><div class="line">			<span class="number">0xe029ac71</span>, <span class="number">0xe019a5e6</span>, <span class="number">0x47b0acfd</span>, <span class="number">0xed93fa9b</span>, <span class="number">0xe8d3c48d</span>, <span class="number">0x283b57cc</span>,</div><div class="line">			<span class="number">0xf8d56629</span>, <span class="number">0x79132e28</span>, <span class="number">0x785f0191</span>, <span class="number">0xed756055</span>, <span class="number">0xf7960e44</span>, <span class="number">0xe3d35e8c</span>,</div><div class="line">			<span class="number">0x15056dd4</span>, <span class="number">0x88f46dba</span>, <span class="number">0x03a16125</span>, <span class="number">0x0564f0bd</span>, <span class="number">0xc3eb9e15</span>, <span class="number">0x3c9057a2</span>,</div><div class="line">			<span class="number">0x97271aec</span>, <span class="number">0xa93a072a</span>, <span class="number">0x1b3f6d9b</span>, <span class="number">0x1e6321f5</span>, <span class="number">0xf59c66fb</span>, <span class="number">0x26dcf319</span>,</div><div class="line">			<span class="number">0x7533d928</span>, <span class="number">0xb155fdf5</span>, <span class="number">0x03563482</span>, <span class="number">0x8aba3cbb</span>, <span class="number">0x28517711</span>, <span class="number">0xc20ad9f8</span>,</div><div class="line">			<span class="number">0xabcc5167</span>, <span class="number">0xccad925f</span>, <span class="number">0x4de81751</span>, <span class="number">0x3830dc8e</span>, <span class="number">0x379d5862</span>, <span class="number">0x9320f991</span>,</div><div class="line">			<span class="number">0xea7a90c2</span>, <span class="number">0xfb3e7bce</span>, <span class="number">0x5121ce64</span>, <span class="number">0x774fbe32</span>, <span class="number">0xa8b6e37e</span>, <span class="number">0xc3293d46</span>,</div><div class="line">			<span class="number">0x48de5369</span>, <span class="number">0x6413e680</span>, <span class="number">0xa2ae0810</span>, <span class="number">0xdd6db224</span>, <span class="number">0x69852dfd</span>, <span class="number">0x09072166</span>,</div><div class="line">			<span class="number">0xb39a460a</span>, <span class="number">0x6445c0dd</span>, <span class="number">0x586cdecf</span>, <span class="number">0x1c20c8ae</span>, <span class="number">0x5bbef7dd</span>, <span class="number">0x1b588d40</span>,</div><div class="line">			<span class="number">0xccd2017f</span>, <span class="number">0x6bb4e3bb</span>, <span class="number">0xdda26a7e</span>, <span class="number">0x3a59ff45</span>, <span class="number">0x3e350a44</span>, <span class="number">0xbcb4cdd5</span>,</div><div class="line">			<span class="number">0x72eacea8</span>, <span class="number">0xfa6484bb</span>, <span class="number">0x8d6612ae</span>, <span class="number">0xbf3c6f47</span>, <span class="number">0xd29be463</span>, <span class="number">0x542f5d9e</span>,</div><div class="line">			<span class="number">0xaec2771b</span>, <span class="number">0xf64e6370</span>, <span class="number">0x740e0d8d</span>, <span class="number">0xe75b1357</span>, <span class="number">0xf8721671</span>, <span class="number">0xaf537d5d</span>,</div><div class="line">			<span class="number">0x4040cb08</span>, <span class="number">0x4eb4e2cc</span>, <span class="number">0x34d2466a</span>, <span class="number">0x0115af84</span>, <span class="number">0xe1b00428</span>, <span class="number">0x95983a1d</span>,</div><div class="line">			<span class="number">0x06b89fb4</span>, <span class="number">0xce6ea048</span>, <span class="number">0x6f3f3b82</span>, <span class="number">0x3520ab82</span>, <span class="number">0x011a1d4b</span>, <span class="number">0x277227f8</span>,</div><div class="line">			<span class="number">0x611560b1</span>, <span class="number">0xe7933fdc</span>, <span class="number">0xbb3a792b</span>, <span class="number">0x344525bd</span>, <span class="number">0xa08839e1</span>, <span class="number">0x51ce794b</span>,</div><div class="line">			<span class="number">0x2f32c9b7</span>, <span class="number">0xa01fbac9</span>, <span class="number">0xe01cc87e</span>, <span class="number">0xbcc7d1f6</span>, <span class="number">0xcf0111c3</span>, <span class="number">0xa1e8aac7</span>,</div><div class="line">			<span class="number">0x1a908749</span>, <span class="number">0xd44fbd9a</span>, <span class="number">0xd0dadecb</span>, <span class="number">0xd50ada38</span>, <span class="number">0x0339c32a</span>, <span class="number">0xc6913667</span>,</div><div class="line">			<span class="number">0x8df9317c</span>, <span class="number">0xe0b12b4f</span>, <span class="number">0xf79e59b7</span>, <span class="number">0x43f5bb3a</span>, <span class="number">0xf2d519ff</span>, <span class="number">0x27d9459c</span>,</div><div class="line">			<span class="number">0xbf97222c</span>, <span class="number">0x15e6fc2a</span>, <span class="number">0x0f91fc71</span>, <span class="number">0x9b941525</span>, <span class="number">0xfae59361</span>, <span class="number">0xceb69ceb</span>,</div><div class="line">			<span class="number">0xc2a86459</span>, <span class="number">0x12baa8d1</span>, <span class="number">0xb6c1075e</span>, <span class="number">0xe3056a0c</span>, <span class="number">0x10d25065</span>, <span class="number">0xcb03a442</span>,</div><div class="line">			<span class="number">0xe0ec6e0e</span>, <span class="number">0x1698db3b</span>, <span class="number">0x4c98a0be</span>, <span class="number">0x3278e964</span>, <span class="number">0x9f1f9532</span>, <span class="number">0xe0d392df</span>,</div><div class="line">			<span class="number">0xd3a0342b</span>, <span class="number">0x8971f21e</span>, <span class="number">0x1b0a7441</span>, <span class="number">0x4ba3348c</span>, <span class="number">0xc5be7120</span>, <span class="number">0xc37632d8</span>,</div><div class="line">			<span class="number">0xdf359f8d</span>, <span class="number">0x9b992f2e</span>, <span class="number">0xe60b6f47</span>, <span class="number">0x0fe3f11d</span>, <span class="number">0xe54cda54</span>, <span class="number">0x1edad891</span>,</div><div class="line">			<span class="number">0xce6279cf</span>, <span class="number">0xcd3e7e6f</span>, <span class="number">0x1618b166</span>, <span class="number">0xfd2c1d05</span>, <span class="number">0x848fd2c5</span>, <span class="number">0xf6fb2299</span>,</div><div class="line">			<span class="number">0xf523f357</span>, <span class="number">0xa6327623</span>, <span class="number">0x93a83531</span>, <span class="number">0x56cccd02</span>, <span class="number">0xacf08162</span>, <span class="number">0x5a75ebb5</span>,</div><div class="line">			<span class="number">0x6e163697</span>, <span class="number">0x88d273cc</span>, <span class="number">0xde966292</span>, <span class="number">0x81b949d0</span>, <span class="number">0x4c50901b</span>, <span class="number">0x71c65614</span>,</div><div class="line">			<span class="number">0xe6c6c7bd</span>, <span class="number">0x327a140a</span>, <span class="number">0x45e1d006</span>, <span class="number">0xc3f27b9a</span>, <span class="number">0xc9aa53fd</span>, <span class="number">0x62a80f00</span>,</div><div class="line">			<span class="number">0xbb25bfe2</span>, <span class="number">0x35bdd2f6</span>, <span class="number">0x71126905</span>, <span class="number">0xb2040222</span>, <span class="number">0xb6cbcf7c</span>, <span class="number">0xcd769c2b</span>,</div><div class="line">			<span class="number">0x53113ec0</span>, <span class="number">0x1640e3d3</span>, <span class="number">0x38abbd60</span>, <span class="number">0x2547adf0</span>, <span class="number">0xba38209c</span>, <span class="number">0xf746ce76</span>,</div><div class="line">			<span class="number">0x77afa1c5</span>, <span class="number">0x20756060</span>, <span class="number">0x85cbfe4e</span>, <span class="number">0x8ae88dd8</span>, <span class="number">0x7aaaf9b0</span>, <span class="number">0x4cf9aa7e</span>,</div><div class="line">			<span class="number">0x1948c25c</span>, <span class="number">0x02fb8a8c</span>, <span class="number">0x01c36ae4</span>, <span class="number">0xd6ebe1f9</span>, <span class="number">0x90d4f869</span>, <span class="number">0xa65cdea0</span>,</div><div class="line">			<span class="number">0x3f09252d</span>, <span class="number">0xc208e69f</span>, <span class="number">0xb74e6132</span>, <span class="number">0xce77e25b</span>, <span class="number">0x578fdfe3</span>, <span class="number">0x3ac372e6</span> &#125;;</div><div class="line">	<span class="comment">// bcrypt IV: "OrpheanBeholderScryDoubt"</span></div><div class="line">	<span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> bf_crypt_ciphertext[] = &#123; <span class="number">0x4f727068</span>, <span class="number">0x65616e42</span>,</div><div class="line">			<span class="number">0x65686f6c</span>, <span class="number">0x64657253</span>, <span class="number">0x63727944</span>, <span class="number">0x6f756274</span> &#125;;</div><div class="line">	<span class="comment">// Table for Base64 encoding</span></div><div class="line">	<span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> base64_code[] = &#123; <span class="string">'.'</span>, <span class="string">'/'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>,</div><div class="line">			<span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>,</div><div class="line">			<span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>,</div><div class="line">			<span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>,</div><div class="line">			<span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span> &#125;;</div><div class="line">	<span class="comment">// Table for Base64 decoding</span></div><div class="line">	<span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span> index_64[] = &#123; -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</div><div class="line">			-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</div><div class="line">			-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">54</span>, <span class="number">55</span>,</div><div class="line">			<span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>,</div><div class="line">			<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>,</div><div class="line">			-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>,</div><div class="line">			<span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span> &#125;;</div><div class="line">	<span class="comment">// Expanded Blowfish key</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> P[];</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> S[];</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//10是不确定的  此处只是个例子</span></div><div class="line">		String salt = gensalt(<span class="number">10</span>, <span class="keyword">new</span> SecureRandom());</div><div class="line">		<span class="comment">//对123456加密</span></div><div class="line">		System.out.println(hashpw(<span class="string">"123456"</span>, salt));</div><div class="line">		<span class="comment">//是否匹配</span></div><div class="line">		System.out.println(matches(<span class="string">"123456"</span>, <span class="string">"$2a$10$/bTVvqqlH9UiE0ZJZ7N2Me3RIgUCdgMheyTgV0B4cMCSokPa.6oCa"</span>));</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init_key</span><span class="params">()</span> </span>&#123;</div><div class="line">		P = (<span class="keyword">int</span>[]) P_orig.clone();</div><div class="line">		S = (<span class="keyword">int</span>[]) S_orig.clone();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode_base64</span><span class="params">(<span class="keyword">byte</span> d[], <span class="keyword">int</span> len, StringBuilder rs)</span></span></div><div class="line">			<span class="keyword">throws</span> IllegalArgumentException &#123;</div><div class="line">		<span class="keyword">int</span> off = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> c1, c2;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (len &lt;= <span class="number">0</span> || len &gt; d.length) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid len"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (off &lt; len) &#123;</div><div class="line">			c1 = d[off++] &amp; <span class="number">0xff</span>;</div><div class="line">			rs.append(base64_code[(c1 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3f</span>]);</div><div class="line">			c1 = (c1 &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>;</div><div class="line">			<span class="keyword">if</span> (off &gt;= len) &#123;</div><div class="line">				rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			c2 = d[off++] &amp; <span class="number">0xff</span>;</div><div class="line">			c1 |= (c2 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>;</div><div class="line">			rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</div><div class="line">			c1 = (c2 &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">2</span>;</div><div class="line">			<span class="keyword">if</span> (off &gt;= len) &#123;</div><div class="line">				rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			c2 = d[off++] &amp; <span class="number">0xff</span>;</div><div class="line">			c1 |= (c2 &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x03</span>;</div><div class="line">			rs.append(base64_code[c1 &amp; <span class="number">0x3f</span>]);</div><div class="line">			rs.append(base64_code[c2 &amp; <span class="number">0x3f</span>]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> <span class="keyword">byte</span>[] decode_base64(String s, <span class="keyword">int</span> maxolen) <span class="keyword">throws</span> IllegalArgumentException &#123;</div><div class="line">		ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream(maxolen);</div><div class="line">		<span class="keyword">int</span> off = <span class="number">0</span>, slen = s.length(), olen = <span class="number">0</span>;</div><div class="line">		<span class="keyword">byte</span> c1, c2, c3, c4, o;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (maxolen &lt;= <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid maxolen"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (off &lt; slen - <span class="number">1</span> &amp;&amp; olen &lt; maxolen) &#123;</div><div class="line">			c1 = char64(s.charAt(off++));</div><div class="line">			c2 = char64(s.charAt(off++));</div><div class="line">			<span class="keyword">if</span> (c1 == -<span class="number">1</span> || c2 == -<span class="number">1</span>) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			o = (<span class="keyword">byte</span>) (c1 &lt;&lt; <span class="number">2</span>);</div><div class="line">			o |= (c2 &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>;</div><div class="line">			out.write(o);</div><div class="line">			<span class="keyword">if</span> (++olen &gt;= maxolen || off &gt;= slen) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			c3 = char64(s.charAt(off++));</div><div class="line">			<span class="keyword">if</span> (c3 == -<span class="number">1</span>) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			o = (<span class="keyword">byte</span>) ((c2 &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">4</span>);</div><div class="line">			o |= (c3 &amp; <span class="number">0x3c</span>) &gt;&gt; <span class="number">2</span>;</div><div class="line">			out.write(o);</div><div class="line">			<span class="keyword">if</span> (++olen &gt;= maxolen || off &gt;= slen) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			c4 = char64(s.charAt(off++));</div><div class="line">			o = (<span class="keyword">byte</span>) ((c3 &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">6</span>);</div><div class="line">			o |= c4;</div><div class="line">			out.write(o);</div><div class="line">			++olen;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> out.toByteArray();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">char64</span><span class="params">(<span class="keyword">char</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (x &gt; index_64.length) &#123;</div><div class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> index_64[x];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">gensalt</span><span class="params">(<span class="keyword">int</span> log_rounds, SecureRandom random)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (log_rounds &lt; <span class="number">4</span> || log_rounds &gt; <span class="number">31</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Bad number of rounds"</span>);</div><div class="line">		&#125;</div><div class="line">		StringBuilder rs = <span class="keyword">new</span> StringBuilder();</div><div class="line">		<span class="keyword">byte</span> rnd[] = <span class="keyword">new</span> <span class="keyword">byte</span>[BCRYPT_SALT_LEN];</div><div class="line"></div><div class="line">		random.nextBytes(rnd);</div><div class="line"></div><div class="line">		rs.append(<span class="string">"$2a$"</span>);</div><div class="line">		<span class="keyword">if</span> (log_rounds &lt; <span class="number">10</span>) &#123;</div><div class="line">			rs.append(<span class="string">"0"</span>);</div><div class="line">		&#125;</div><div class="line">		rs.append(log_rounds);</div><div class="line">		rs.append(<span class="string">"$"</span>);</div><div class="line">		encode_base64(rnd, rnd.length, rs);</div><div class="line">		<span class="keyword">return</span> rs.toString();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">hashpw</span><span class="params">(String password, String salt)</span> </span>&#123;</div><div class="line">		String real_salt;</div><div class="line">		<span class="keyword">byte</span> passwordb[], saltb[], hashed[];</div><div class="line">		<span class="keyword">char</span> minor = (<span class="keyword">char</span>) <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> rounds, off = <span class="number">0</span>;</div><div class="line">		StringBuilder rs = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">		<span class="keyword">int</span> saltLength = salt.length();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (saltLength &lt; <span class="number">28</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid salt"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (salt.charAt(<span class="number">0</span>) != <span class="string">'$'</span> || salt.charAt(<span class="number">1</span>) != <span class="string">'2'</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid salt version"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (salt.charAt(<span class="number">2</span>) == <span class="string">'$'</span>) &#123;</div><div class="line">			off = <span class="number">3</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			minor = salt.charAt(<span class="number">2</span>);</div><div class="line">			<span class="keyword">if</span> (minor != <span class="string">'a'</span> || salt.charAt(<span class="number">3</span>) != <span class="string">'$'</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid salt revision"</span>);</div><div class="line">			&#125;</div><div class="line">			off = <span class="number">4</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (saltLength - off &lt; <span class="number">25</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid salt"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Extract number of rounds</span></div><div class="line">		<span class="keyword">if</span> (salt.charAt(off + <span class="number">2</span>) &gt; <span class="string">'$'</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Missing salt rounds"</span>);</div><div class="line">		&#125;</div><div class="line">		rounds = Integer.parseInt(salt.substring(off, off + <span class="number">2</span>));</div><div class="line"></div><div class="line">		real_salt = salt.substring(off + <span class="number">3</span>, off + <span class="number">25</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			passwordb = (password + (minor &gt;= <span class="string">'a'</span> ? <span class="string">"\000"</span> : <span class="string">""</span>)).getBytes(<span class="string">"UTF-8"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (UnsupportedEncodingException uee) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"UTF-8 is not supported"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);</div><div class="line"></div><div class="line">		hashed = crypt_raw(passwordb, saltb, rounds);</div><div class="line"></div><div class="line">		rs.append(<span class="string">"$2"</span>);</div><div class="line">		<span class="keyword">if</span> (minor &gt;= <span class="string">'a'</span>) &#123;</div><div class="line">			rs.append(minor);</div><div class="line">		&#125;</div><div class="line">		rs.append(<span class="string">"$"</span>);</div><div class="line">		<span class="keyword">if</span> (rounds &lt; <span class="number">10</span>) &#123;</div><div class="line">			rs.append(<span class="string">"0"</span>);</div><div class="line">		&#125;</div><div class="line">		rs.append(rounds);</div><div class="line">		rs.append(<span class="string">"$"</span>);</div><div class="line">		encode_base64(saltb, saltb.length, rs);</div><div class="line">		encode_base64(hashed, bf_crypt_ciphertext.length * <span class="number">4</span> - <span class="number">1</span>, rs);</div><div class="line">		<span class="keyword">return</span> rs.toString();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] crypt_raw(<span class="keyword">byte</span> password[], <span class="keyword">byte</span> salt[], <span class="keyword">int</span> log_rounds) &#123;</div><div class="line">		<span class="keyword">int</span> cdata[] = (<span class="keyword">int</span>[]) bf_crypt_ciphertext.clone();</div><div class="line">		<span class="keyword">int</span> clen = cdata.length;</div><div class="line">		<span class="keyword">byte</span> ret[];</div><div class="line"></div><div class="line">		<span class="keyword">long</span> rounds = roundsForLogRounds(log_rounds);</div><div class="line"></div><div class="line">		init_key();</div><div class="line">		ekskey(salt, password);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; rounds; i++) &#123;</div><div class="line">			key(password);</div><div class="line">			key(salt);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (clen &gt;&gt; <span class="number">1</span>); j++) &#123;</div><div class="line">				encipher(cdata, j &lt;&lt; <span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		ret = <span class="keyword">new</span> <span class="keyword">byte</span>[clen * <span class="number">4</span>];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; clen; i++) &#123;</div><div class="line">			ret[j++] = (<span class="keyword">byte</span>) ((cdata[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</div><div class="line">			ret[j++] = (<span class="keyword">byte</span>) ((cdata[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</div><div class="line">			ret[j++] = (<span class="keyword">byte</span>) ((cdata[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</div><div class="line">			ret[j++] = (<span class="keyword">byte</span>) (cdata[i] &amp; <span class="number">0xff</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> ret;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">roundsForLogRounds</span><span class="params">(<span class="keyword">int</span> log_rounds)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (log_rounds &lt; <span class="number">4</span> || log_rounds &gt; <span class="number">31</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Bad number of rounds"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="number">1L</span> &lt;&lt; log_rounds;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ekskey</span><span class="params">(<span class="keyword">byte</span> data[], <span class="keyword">byte</span> key[])</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">int</span> koffp[] = &#123; <span class="number">0</span> &#125;, doffp[] = &#123; <span class="number">0</span> &#125;;</div><div class="line">		<span class="keyword">int</span> lr[] = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</div><div class="line">		<span class="keyword">int</span> plen = P.length, slen = S.length;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plen; i++) &#123;</div><div class="line">			P[i] = P[i] ^ streamtoword(key, koffp);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plen; i += <span class="number">2</span>) &#123;</div><div class="line">			lr[<span class="number">0</span>] ^= streamtoword(data, doffp);</div><div class="line">			lr[<span class="number">1</span>] ^= streamtoword(data, doffp);</div><div class="line">			encipher(lr, <span class="number">0</span>);</div><div class="line">			P[i] = lr[<span class="number">0</span>];</div><div class="line">			P[i + <span class="number">1</span>] = lr[<span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; slen; i += <span class="number">2</span>) &#123;</div><div class="line">			lr[<span class="number">0</span>] ^= streamtoword(data, doffp);</div><div class="line">			lr[<span class="number">1</span>] ^= streamtoword(data, doffp);</div><div class="line">			encipher(lr, <span class="number">0</span>);</div><div class="line">			S[i] = lr[<span class="number">0</span>];</div><div class="line">			S[i + <span class="number">1</span>] = lr[<span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">streamtoword</span><span class="params">(<span class="keyword">byte</span> data[], <span class="keyword">int</span> offp[])</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">int</span> word = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> off = offp[<span class="number">0</span>];</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">			word = (word &lt;&lt; <span class="number">8</span>) | (data[off] &amp; <span class="number">0xff</span>);</div><div class="line">			off = (off + <span class="number">1</span>) % data.length;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		offp[<span class="number">0</span>] = off;</div><div class="line">		<span class="keyword">return</span> word;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">encipher</span><span class="params">(<span class="keyword">int</span> lr[], <span class="keyword">int</span> off)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i, n, l = lr[off], r = lr[off + <span class="number">1</span>];</div><div class="line"></div><div class="line">		l ^= P[<span class="number">0</span>];</div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= BLOWFISH_NUM_ROUNDS - <span class="number">2</span>;) &#123;</div><div class="line">			<span class="comment">// Feistel substitution on left word</span></div><div class="line">			n = S[(l &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>];</div><div class="line">			n += S[<span class="number">0x100</span> | ((l &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>)];</div><div class="line">			n ^= S[<span class="number">0x200</span> | ((l &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>)];</div><div class="line">			n += S[<span class="number">0x300</span> | (l &amp; <span class="number">0xff</span>)];</div><div class="line">			r ^= n ^ P[++i];</div><div class="line"></div><div class="line">			<span class="comment">// Feistel substitution on right word</span></div><div class="line">			n = S[(r &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>];</div><div class="line">			n += S[<span class="number">0x100</span> | ((r &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>)];</div><div class="line">			n ^= S[<span class="number">0x200</span> | ((r &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>)];</div><div class="line">			n += S[<span class="number">0x300</span> | (r &amp; <span class="number">0xff</span>)];</div><div class="line">			l ^= n ^ P[++i];</div><div class="line">		&#125;</div><div class="line">		lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + <span class="number">1</span>];</div><div class="line">		lr[off + <span class="number">1</span>] = l;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">key</span><span class="params">(<span class="keyword">byte</span> key[])</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">int</span> koffp[] = &#123; <span class="number">0</span> &#125;;</div><div class="line">		<span class="keyword">int</span> lr[] = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</div><div class="line">		<span class="keyword">int</span> plen = P.length, slen = S.length;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plen; i++) &#123;</div><div class="line">			P[i] = P[i] ^ streamtoword(key, koffp);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plen; i += <span class="number">2</span>) &#123;</div><div class="line">			encipher(lr, <span class="number">0</span>);</div><div class="line">			P[i] = lr[<span class="number">0</span>];</div><div class="line">			P[i + <span class="number">1</span>] = lr[<span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; slen; i += <span class="number">2</span>) &#123;</div><div class="line">			encipher(lr, <span class="number">0</span>);</div><div class="line">			S[i] = lr[<span class="number">0</span>];</div><div class="line">			S[i + <span class="number">1</span>] = lr[<span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (encodedPassword == <span class="keyword">null</span> || encodedPassword.length() == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!BCRYPT_PATTERN.matcher(encodedPassword).matches()) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> checkpw(rawPassword.toString(), encodedPassword);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkpw</span><span class="params">(String plaintext, String hashed)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equalsNoEarlyReturn</span><span class="params">(String a, String b)</span> </span>&#123;</div><div class="line">		<span class="keyword">char</span>[] caa = a.toCharArray();</div><div class="line">		<span class="keyword">char</span>[] cab = b.toCharArray();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (caa.length != cab.length) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">byte</span> ret = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; caa.length; i++) &#123;</div><div class="line">			ret |= caa[i] ^ cab[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> ret == <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BCrypt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[现在有10个随机数，随机数的范围在1到100之间。现在要求写出一种算法，将1到100之间没有在随机数中的数求出来]]></title>
      <url>http://itliusir.com/2017/Algorithm-Random/</url>
      <content type="html"><![CDATA[<p>摘要:代码如下：<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRandom</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		test();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">int</span>[] randomNums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, length = randomNums.length; i &lt; length; i++) &#123;</div><div class="line">            randomNums[i] = random.nextInt(<span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">boolean</span>[] bitArray = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">100</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, length = randomNums.length; i &lt; length; i++) &#123;</div><div class="line">            bitArray[randomNums[i]] = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, length = bitArray.length; i &lt; length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (bitArray[i]) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">            	System.out.println(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"Spend milliseconds: "</span> + (end - start));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构与算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Random </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java同步器AQS分析]]></title>
      <url>http://itliusir.com/2017/javase-AQS/</url>
      <content type="html"><![CDATA[<p>摘要:AQS(AbstractQueuedSynchronizer)提供了一个基于FIFO(first in first out,先进先出)队列，可以用于构建锁或者其他相关同步装置的基础框架。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>常用的java.util.concurrent.locks包中有很多的Lock实现类，如ReadWriteLock、ReentrantLock内部实现都是依赖于AQS类，下面来看AQS类的具体源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * translate by itliusir(水平有限...)</div><div class="line"> * 提供一个实现阻塞锁相关的框架</div><div class="line"> * 先进先出(first in first out)等待序列</div><div class="line"> * 这个类依赖原子性&#123;<span class="doctag">@code</span> int&#125;的值来表示状态是</div><div class="line"> * 大多数同步的基础，子类必须定义更改此状态的受保护方法</div><div class="line"> * 子类通过继承同步器并需要实现它的方法来管理其状态，管理的方式就是</div><div class="line"> * 通过类似acquire和release的方式来操纵状态。</div><div class="line"> * 然而多线程环境中对状态的操纵必须确保原子性，因此子类对于状态的把握，</div><div class="line"> * 需要使用这个同步器提供的以下三个方法对状态进行操作：</div><div class="line"> * java.util.concurrent.locks.AbstractQueuedSynchronizer.getState()</div><div class="line"> * java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(int)</div><div class="line"> * java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(int, int)</div><div class="line"> *</div><div class="line"> * &lt;p&gt;子类应定义未非公共内部辅助类，用于实现其内部属性</div><div class="line"> * 类&#123;<span class="doctag">@code</span> AbstractQueuedSynchronizer&#125; 不实现任何同步接口，相反，它定义了如</div><div class="line"> * &#123;<span class="doctag">@link</span> #acquireInterruptibly&#125; 的方法可以通过具体的锁和同步器来适当的调用他们实现</div><div class="line"> * their public methods.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;这类支持或默认独占模式和共享模式，在独占模式时，其他线程对其的获取就被阻止，</div><div class="line"> * ，而共享模式对于多个线程获取都可以成功。当一个共享模式获得成功，下一个等待线程</div><div class="line"> * (如果有的话)也必须确定它是否可以获得，线程在不同模式下共用相同的FIFO队列。</div><div class="line"> * 通常，实现子类只支持这些模式之一，但是都能在&#123;<span class="doctag">@link</span> ReadWriteLock&#125; 中发挥作用。</div><div class="line"> * 仅支持独占或共享的子类不需要去定义支持未使用模式的方法</div><div class="line"> *</div><div class="line"> * &lt;p&gt;该类定义了一个嵌套的 &#123;<span class="doctag">@link</span> ConditionObject&#125; 类，可以支持独占模式的子类</div><div class="line"> * 用作 &#123;<span class="doctag">@link</span> Condition&#125; 实现。&#123;<span class="doctag">@link</span> #isHeldExclusively&#125;报告是否针对当前线程专门保留同步。</div><div class="line"> * 使用当前&#123;@ #getState&#125;值调用的方法&#123;<span class="doctag">@link</span> #release&#125;完全释放此对象, 并且 &#123;<span class="doctag">@link</span> #acquire&#125;</div><div class="line"> * 给定此保存的状态值，最终将此对象恢复到先前获取的状态。否则&#123;<span class="doctag">@code</span> AbstractQueuedSynchronizer&#125;</div><div class="line"> * 方法将创建此类条件，因此如果不能满足此约束，请勿使用，&#123;<span class="doctag">@link</span> ConditionObject&#125; 的行为当然取决于其同步器</div><div class="line"> * 实现的semantics</div><div class="line"> *</div><div class="line"> * &lt;p&gt;该类为内部队列提供检查，检测和监控方法以及条件对象的类似方法，根据需要可以使用 &#123;<span class="doctag">@code</span> AbstractQueuedSynchronizer&#125; </div><div class="line"> * 进行类同步导出</div><div class="line"> *</div><div class="line"> * &lt;p&gt;此类的序列化仅存储底层原子整数维持状态，因此反序列化具有空线程队列。</div><div class="line"> * 需要可序列化的子类定义过一个&#123;<span class="doctag">@code</span> readObject&#125; 方法，可以在反序列化的时将其恢复到已知的初始状态</div><div class="line"> *</div><div class="line"> * &lt;h3&gt;Usage&lt;/h3&gt;</div><div class="line"> *</div><div class="line"> * &lt;p&gt;要使用此类作为同步,请通过使用 &#123;<span class="doctag">@link</span> #getState&#125;, &#123;<span class="doctag">@link</span></div><div class="line"> * #setState&#125; and/or &#123;<span class="doctag">@link</span> #compareAndSetState&#125;检查 and/or 修改同步状态(如适用)</div><div class="line"> * redefine the following methods：</div><div class="line"> *</div><div class="line"> * &lt;ul&gt;</div><div class="line"> * &lt;li&gt; &#123;<span class="doctag">@link</span> #tryAcquire&#125;</div><div class="line"> * &lt;li&gt; &#123;<span class="doctag">@link</span> #tryRelease&#125;</div><div class="line"> * &lt;li&gt; &#123;<span class="doctag">@link</span> #tryAcquireShared&#125;</div><div class="line"> * &lt;li&gt; &#123;<span class="doctag">@link</span> #tryReleaseShared&#125;</div><div class="line"> * &lt;li&gt; &#123;<span class="doctag">@link</span> #isHeldExclusively&#125;</div><div class="line"> * &lt;/ul&gt;</div><div class="line"> *</div><div class="line"> * 这些方法默认抛出 &#123;<span class="doctag">@link</span> UnsupportedOperationException&#125;.这些方法的实现必须是线程安全的, </div><div class="line"> * 定义这些方法是支持使用这个类的方式。所有其他方法都被声明为&#123;<span class="doctag">@code</span> final&#125;,因为它们不能独立变化。</div><div class="line"> * </div><div class="line"> * &lt;p&gt;您还可以从 &#123;<span class="doctag">@link</span> AbstractOwnableSynchronizer&#125; 中找到继承的方法. 用于跟踪拥有独占同步器的线程。</div><div class="line"> * 建议您使用它们-这样可以使监控和诊断工具帮助用户确定哪些线程持有锁定。</div><div class="line"> *</div><div class="line"> * &lt;p&gt;即使这个类基于内部FIFO队列，它也不会自动执行FIFO获取策略(这句话翻译的我自己都感觉不顺)</div><div class="line"> * 独占同步的核心采用以下形式：</div><div class="line"> *</div><div class="line"> * &lt;pre&gt;</div><div class="line"> * Acquire:</div><div class="line"> *     while (!tryAcquire(arg)) &#123;</div><div class="line"> *     //入队线程，如果尚未排队可能会阻塞当前线程</div><div class="line"> *        &lt;em&gt;enqueue thread if it is not already queued&lt;/em&gt;;</div><div class="line"> *        &lt;em&gt;possibly block current thread&lt;/em&gt;;</div><div class="line"> *     &#125;</div><div class="line"> *</div><div class="line"> * Release:</div><div class="line"> *     if (tryRelease(arg))</div><div class="line"> *     //解除阻塞第一个排队的线程</div><div class="line"> *        &lt;em&gt;unblock the first queued thread&lt;/em&gt;;</div><div class="line"> * &lt;/pre&gt;</div><div class="line"> *</div><div class="line"> * (Shared mode is similar but may involve cascading signals.)</div><div class="line"> *</div><div class="line"> * &lt;p id="barging"&gt;因为获取中的检查在进入之前被调用，所以新获取的线程可能先于被阻塞和排队的其他线程</div><div class="line"> * 但是，如果需要，您可以通过内部调用一个或多个检查方法来定义 &#123;<span class="doctag">@code</span> tryAcquire&#125; and/or </div><div class="line"> * &#123;<span class="doctag">@code</span> tryAcquireShared&#125; 来禁用"barging"，从而提供一个公平的FIFO获取顺序。特别的如果</div><div class="line"> * &#123;<span class="doctag">@link</span> #hasQueuedPredecessors&#125; (一个专门设计为被公平同步器使用的方法) 返回&#123;<span class="doctag">@code</span> true&#125;. </div><div class="line"> * 其他变化是可能的。</div><div class="line"> * </div><div class="line"> *	// 额...</div><div class="line"> * &lt;p&gt;Throughput and scalability are generally highest for the</div><div class="line"> * default barging (also known as &lt;em&gt;greedy&lt;/em&gt;,</div><div class="line"> * &lt;em&gt;renouncement&lt;/em&gt;, and &lt;em&gt;convoy-avoidance&lt;/em&gt;) strategy.</div><div class="line"> * While this is not guaranteed to be fair or starvation-free, earlier</div><div class="line"> * queued threads are allowed to recontend before later queued</div><div class="line"> * threads, and each recontention has an unbiased chance to succeed</div><div class="line"> * against incoming threads.  Also, while acquires do not</div><div class="line"> * &amp;quot;spin&amp;quot; in the usual sense, they may perform multiple</div><div class="line"> * invocations of &#123;<span class="doctag">@code</span> tryAcquire&#125; interspersed with other</div><div class="line"> * computations before blocking.  This gives most of the benefits of</div><div class="line"> * spins when exclusive synchronization is only briefly held, without</div><div class="line"> * most of the liabilities when it isn't. If so desired, you can</div><div class="line"> * augment this by preceding calls to acquire methods with</div><div class="line"> * "fast-path" checks, possibly prechecking &#123;<span class="doctag">@link</span> #hasContended&#125;</div><div class="line"> * and/or &#123;<span class="doctag">@link</span> #hasQueuedThreads&#125; to only do so if the synchronizer</div><div class="line"> * is likely not to be contended.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;这个类提供了一个高效、可扩展的基础同步 ，它们可以依赖&#123;<span class="doctag">@code</span> int&#125; state, acquire, </div><div class="line"> * and release parameters, and an internal FIFO wait queue. 当着并不满足,</div><div class="line"> *  you can build synchronizers from a lower level using</div><div class="line"> * &#123;<span class="doctag">@link</span> java.util.concurrent.atomic atomic&#125; classes, your own custom</div><div class="line"> * &#123;<span class="doctag">@link</span> java.util.Queue&#125; classes, and &#123;<span class="doctag">@link</span> LockSupport&#125; blocking</div><div class="line"> * support.</div><div class="line"> *</div><div class="line"> * &lt;h3&gt;Usage Examples&lt;/h3&gt;</div><div class="line"> *</div><div class="line"> * &lt;p&gt;这是一个不可重入的互斥锁类，它使用0值来表示解锁状态，1表示锁定状态。</div><div class="line"> * 虽然不可重入锁不严格要求记录当前的所有者线程，但是这样做无论如何使得</div><div class="line"> * 使用更容易监视。它还支持条件并公开其中一个测量方法。</div><div class="line"> *</div><div class="line"> *  &lt;pre&gt; &#123;<span class="doctag">@code</span></div><div class="line"> * class Mutex implements Lock, java.io.Serializable &#123;</div><div class="line"> *</div><div class="line"> *   // Our internal helper class</div><div class="line"> *   private static class Sync extends AbstractQueuedSynchronizer &#123;</div><div class="line"> *     // Reports whether in locked state</div><div class="line"> *     protected boolean isHeldExclusively() &#123;</div><div class="line"> *       return getState() == 1;</div><div class="line"> *     &#125;</div><div class="line"> *</div><div class="line"> *     // Acquires the lock if state is zero</div><div class="line"> *     public boolean tryAcquire(int acquires) &#123;</div><div class="line"> *       assert acquires == 1; // Otherwise unused</div><div class="line"> *       if (compareAndSetState(0, 1)) &#123;</div><div class="line"> *         setExclusiveOwnerThread(Thread.currentThread());</div><div class="line"> *         return true;</div><div class="line"> *       &#125;</div><div class="line"> *       return false;</div><div class="line"> *     &#125;</div><div class="line"> *</div><div class="line"> *     // Releases the lock by setting state to zero</div><div class="line"> *     protected boolean tryRelease(int releases) &#123;</div><div class="line"> *       assert releases == 1; // Otherwise unused</div><div class="line"> *       if (getState() == 0) throw new IllegalMonitorStateException();</div><div class="line"> *       setExclusiveOwnerThread(null);</div><div class="line"> *       setState(0);</div><div class="line"> *       return true;</div><div class="line"> *     &#125;</div><div class="line"> *</div><div class="line"> *     // Provides a Condition</div><div class="line"> *     Condition newCondition() &#123; return new ConditionObject(); &#125;</div><div class="line"> *</div><div class="line"> *     // Deserializes properly</div><div class="line"> *     private void readObject(ObjectInputStream s)</div><div class="line"> *         throws IOException, ClassNotFoundException &#123;</div><div class="line"> *       s.defaultReadObject();</div><div class="line"> *       setState(0); // reset to unlocked state</div><div class="line"> *     &#125;</div><div class="line"> *   &#125;</div><div class="line"> *</div><div class="line"> *   // The sync object does all the hard work. We just forward to it.</div><div class="line"> *   private final Sync sync = new Sync();</div><div class="line"> *</div><div class="line"> *   public void lock()                &#123; sync.acquire(1); &#125;</div><div class="line"> *   public boolean tryLock()          &#123; return sync.tryAcquire(1); &#125;</div><div class="line"> *   public void unlock()              &#123; sync.release(1); &#125;</div><div class="line"> *   public Condition newCondition()   &#123; return sync.newCondition(); &#125;</div><div class="line"> *   public boolean isLocked()         &#123; return sync.isHeldExclusively(); &#125;</div><div class="line"> *   public boolean hasQueuedThreads() &#123; return sync.hasQueuedThreads(); &#125;</div><div class="line"> *   public void lockInterruptibly() throws InterruptedException &#123;</div><div class="line"> *     sync.acquireInterruptibly(1);</div><div class="line"> *   &#125;</div><div class="line"> *   public boolean tryLock(long timeout, TimeUnit unit)</div><div class="line"> *       throws InterruptedException &#123;</div><div class="line"> *     return sync.tryAcquireNanos(1, unit.toNanos(timeout));</div><div class="line"> *   &#125;</div><div class="line"> * &#125;&#125;&lt;/pre&gt;</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Here is a latch class that is like a</div><div class="line"> * &#123;<span class="doctag">@link</span> java.util.concurrent.CountDownLatch CountDownLatch&#125;</div><div class="line"> * except that it only requires a single &#123;<span class="doctag">@code</span> signal&#125; to</div><div class="line"> * fire. Because a latch is non-exclusive, it uses the &#123;<span class="doctag">@code</span> shared&#125;</div><div class="line"> * acquire and release methods.</div><div class="line"> *</div><div class="line"> *  &lt;pre&gt; &#123;<span class="doctag">@code</span></div><div class="line"> * class BooleanLatch &#123;</div><div class="line"> *</div><div class="line"> *   private static class Sync extends AbstractQueuedSynchronizer &#123;</div><div class="line"> *     boolean isSignalled() &#123; return getState() != 0; &#125;</div><div class="line"> *</div><div class="line"> *     protected int tryAcquireShared(int ignore) &#123;</div><div class="line"> *       return isSignalled() ? 1 : -1;</div><div class="line"> *     &#125;</div><div class="line"> *</div><div class="line"> *     protected boolean tryReleaseShared(int ignore) &#123;</div><div class="line"> *       setState(1);</div><div class="line"> *       return true;</div><div class="line"> *     &#125;</div><div class="line"> *   &#125;</div><div class="line"> *</div><div class="line"> *   private final Sync sync = new Sync();</div><div class="line"> *   public boolean isSignalled() &#123; return sync.isSignalled(); &#125;</div><div class="line"> *   public void signal()         &#123; sync.releaseShared(1); &#125;</div><div class="line"> *   public void await() throws InterruptedException &#123;</div><div class="line"> *     sync.acquireSharedInterruptibly(1);</div><div class="line"> *   &#125;</div><div class="line"> * &#125;&#125;&lt;/pre&gt;</div><div class="line"> *</div><div class="line"> * <span class="doctag">@since</span> 1.5</div><div class="line"> * <span class="doctag">@author</span> Doug Lea</div><div class="line"> */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractQueuedSynchronizer</span></span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractOwnableSynchronizer</span></div><div class="line">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7373984972572414691L</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates a new &#123;<span class="doctag">@code</span> AbstractQueuedSynchronizer&#125; instance</div><div class="line">     * with initial synchronization state of zero.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractQueuedSynchronizer</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">     * Head of the wait queue, lazily initialized.  Except for</div><div class="line">     * initialization, it is modified only via method setHead.  Note:</div><div class="line">     * If head exists, its waitStatus is guaranteed not to be</div><div class="line">     * CANCELLED.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Tail of the wait queue, lazily initialized.  Modified only via</div><div class="line">     * method enq to add new wait node.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The synchronization state.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</div><div class="line">	....</div></pre></td></tr></table></figure></p>
<p>同步器的开始提到了其实现依赖于一个FIFO队列，那么队列中的元素Node就是保存着线程引用和线程状态的容器，每个线程对同步器的访问，都可以看做是队列中的一个节点。Node的主要包含以下成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">       <span class="comment">/** Marker to indicate a node is waiting in shared mode */</span></div><div class="line">       <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</div><div class="line">       <span class="comment">/** Marker to indicate a node is waiting in exclusive mode */</span></div><div class="line">       <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">       <span class="comment">/** waitStatus value to indicate thread has cancelled */</span></div><div class="line">       <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</div><div class="line">       <span class="comment">/** waitStatus value to indicate successor's thread needs unparking */</span></div><div class="line">       <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</div><div class="line">       <span class="comment">/** waitStatus value to indicate thread is waiting on condition */</span></div><div class="line">       <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</div><div class="line">       <span class="comment">/**</span></div><div class="line">        * waitStatus value to indicate the next acquireShared should</div><div class="line">        * unconditionally propagate</div><div class="line">        */</div><div class="line">       <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</div><div class="line"></div><div class="line">       <span class="comment">/**</span></div><div class="line">        * 表示节点的状态。其中包含的状态有：:</div><div class="line">        *   SIGNAL:     值为-1，表示当前节点的后继节点包含的线程需要运行，也就是unpark；</div><div class="line">        *   CANCELLED:  值为1，表示当前的线程被取消；</div><div class="line">        *   CONDITION:  值为-2，表示当前节点在等待condition，也就是在condition队列中；</div><div class="line">        *   PROPAGATE:  值为-3，表示当前场景下后续的acquireShared能够得以执行；</div><div class="line">        *   0:          值为0，表示当前节点在sync队列中，等待着获取锁。</div><div class="line">        */</div><div class="line">       <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</div><div class="line"></div><div class="line">       <span class="comment">/**</span></div><div class="line">        * 前驱节点，比如当前节点被取消，那就需要前驱节点和后继节点来完成连接。</div><div class="line">        */</div><div class="line">       <span class="keyword">volatile</span> Node prev;</div><div class="line"></div><div class="line">       <span class="comment">/**</span></div><div class="line">        * 后继节点。</div><div class="line">        */</div><div class="line">       <span class="keyword">volatile</span> Node next;</div><div class="line"></div><div class="line">       <span class="comment">/**</span></div><div class="line">        * 入队列时的当前线程。</div><div class="line">        */</div><div class="line">       <span class="keyword">volatile</span> Thread thread;</div><div class="line"></div><div class="line">       <span class="comment">/**</span></div><div class="line">        * 存储condition队列中的后继节点。</div><div class="line">        */</div><div class="line">       Node nextWaiter;</div><div class="line">	...</div></pre></td></tr></table></figure></p>
<p>节点成为sync队列和condition队列构建的基础，在同步器中就包含了sync队列。同步器拥有三个成员变量：sync队列的头结点head、sync队列的尾节点tail和状态state。对于锁的获取，请求形成节点，将其挂载在尾部，而锁资源的转移（释放再获取）是从头部开始向后进行。对于同步器维护的状态state，多个线程对其的获取将会产生一个链式的结构。</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/queue.png" alt=""></p>
<p>head节点，其实是一个空节点，我觉得可以理解成代表当前持有锁的线程，每当有线程竞争失败，都是插入到队列的尾节点，tail节点始终指向队列中的最后一个元素。</p>
<p>每个节点中， 除了存储了当前线程，前后节点的引用以外，还有一个waitStatus变量，用于描述节点当前的状态。多线程并发执行时，队列中会有多个节点存在，这个waitStatus其实代表对应线程的状态：有的线程可能获取锁因为某些原因放弃竞争；有的线程在等待满足条件，满足之后才能执行等等。一共有4中状态：</p>
<ol>
<li>CANCELLED 取消状态</li>
<li>SIGNAL 等待触发状态</li>
<li>CONDITION 等待条件状态</li>
<li>PROPAGATE 状态需要向后传播<br>等待队列是FIFO先进先出，只有前一个节点的状态为SIGNAL时，当前节点的线程才能被挂起。</li>
</ol>
<h2 id="API说明"><a href="#API说明" class="headerlink" title="API说明"></a>API说明</h2><p>实现自定义同步器时，需要使用同步器提供的getState()、setState()和compareAndSetState()方法来操纵状态的变迁。</p>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/AQSapi.png" alt=""></p>
<p>实现这些方法必须是非阻塞而且是线程安全的，推荐使用该同步器的父类java.util.concurrent.locks.AbstractOwnableSynchronizer来设置当前的线程。<br>开始提到同步器内部基于一个FIFO队列，对于一个独占锁的获取和释放有以下伪码可以表示。</p>
<p>获取一个排他锁。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(获取锁) &#123;</div><div class="line">	<span class="keyword">if</span> (获取到) &#123;</div><div class="line">		退出<span class="keyword">while</span>循环</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span>(当前线程没有入队列) &#123;</div><div class="line">			那么入队列</div><div class="line">		&#125;</div><div class="line">		阻塞当前线程</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>释放一个排他锁。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (释放成功) &#123;</div><div class="line">删除头结点</div><div class="line">激活原头结点的后继节点</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="实现分析"><a href="#实现分析" class="headerlink" title="实现分析"></a>实现分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!tryAcquire(arg) &amp;amp;&amp;amp;</div><div class="line">           acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">           selfInterrupt();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述逻辑主要包括：</p>
<ol>
<li>尝试获取（调用tryAcquire更改状态，需要保证原子性）；<br>在tryAcquire方法中使用了同步器提供的对state操作的方法，利用compareAndSet保证只有一个线程能够对状态进行成功修改，而没有成功修改的线程将进入sync队列排队。</li>
<li>如果获取不到，将当前线程构造成节点Node并加入sync队列；<br>进入队列的每个线程都是一个节点Node，从而形成了一个双向队列，类似CLH队列，这样做的目的是线程间的通信会被限制在较小规模（也就是两个节点左右）。</li>
<li>再次尝试获取，如果没有获取到那么将当前线程从线程调度器上摘下，进入等待状态。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</div><div class="line">       Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</div><div class="line">       <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></div><div class="line">       Node pred = tail;</div><div class="line">       <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</div><div class="line">           node.prev = pred;</div><div class="line">           <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</div><div class="line">               pred.next = node;</div><div class="line">               <span class="keyword">return</span> node;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       enq(node);</div><div class="line">       <span class="keyword">return</span> node;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</div><div class="line">       <span class="keyword">for</span> (;;) &#123;</div><div class="line">           Node t = tail;</div><div class="line">           <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></div><div class="line">               <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</div><div class="line">                   tail = head;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               node.prev = t;</div><div class="line">               <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</div><div class="line">                   t.next = node;</div><div class="line">                   <span class="keyword">return</span> t;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上述逻辑主要包括：</p>
<ol>
<li>使用当前线程构造Node；<br>对于一个节点需要做的是将当节点前驱节点指向尾节点（current.prev = tail），尾节点指向它（tail = current），原有的尾节点的后继节点指向它（t.next = current）而这些操作要求是原子的。上面的操作是利用尾节点的设置来保证的，也就是compareAndSetTail来完成的。</li>
<li>先行尝试在队尾添加；<br>如果尾节点已经有了，然后做如下操作：<br>(1)分配引用T指向尾节点；<br>(2)将节点的前驱节点更新为尾节点（current.prev = tail）；<br>(3)如果尾节点是T，那么将当尾节点设置为该节点（tail = current，原子更新）；<br>(4)T的后继节点指向当前节点（T.next = current）。<br>注意第3点是要求原子的。<br>这样可以以最短路径O(1)的效果来完成线程入队，是最大化减少开销的一种方式。</li>
<li>如果队尾添加失败或者是第一个入队的节点。<br>如果是第1个节点，也就是sync队列没有初始化，那么会进入到enq这个方法，进入的线程可能有多个，或者说在addWaiter中没有成功入队的线程都将进入enq这个方法。<br>可以看到enq的逻辑是确保进入的Node都会有机会顺序的添加到sync队列中，而加入的步骤如下：<br>(1)如果尾节点为空，那么原子化的分配一个头节点，并将尾节点指向头节点，这一步是初始化；<br>(2)然后是重复在addWaiter中做的工作，但是在一个while(true)的循环中，直到当前节点入队为止。<br>进入sync队列之后，接下来就是要进行锁的获取，或者说是访问控制了，只有一个线程能够在同一时刻继续的运行，而其他的进入等待状态。而每个线程都是一个独立的个体，它们自省的观察，当条件满足的时候（自己的前驱是头结点并且原子性的获取了状态），那么这个线程能够继续运行。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">       <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">           <span class="keyword">for</span> (;;) &#123;</div><div class="line">               <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">               <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class="line">                   setHead(node);</div><div class="line">                   p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                   failed = <span class="keyword">false</span>;</div><div class="line">                   <span class="keyword">return</span> interrupted;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                   parkAndCheckInterrupt())</div><div class="line">                   interrupted = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           <span class="keyword">if</span> (failed)</div><div class="line">               cancelAcquire(node);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上述逻辑主要包括：</p>
<ol>
<li>获取当前节点的前驱节点；<br>需要获取当前节点的前驱节点，而头结点所对应的含义是当前站有锁且正在运行。</li>
<li>当前驱节点是头结点并且能够获取状态，代表该当前节点占有锁；<br>如果满足上述条件，那么代表能够占有锁，根据节点对锁占有的含义，设置头结点为当前节点。</li>
<li>否则进入等待状态。<br>如果没有轮到当前节点运行，那么将当前线程从线程调度器上摘下，也就是进入等待状态。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (tryRelease(arg)) &#123;</div><div class="line">           Node h = head;</div><div class="line">           <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</div><div class="line">               unparkSuccessor(h);</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上述逻辑主要包括：</p>
<ol>
<li>尝试释放状态；<br>tryRelease能够保证原子化的将状态设置回去，当然需要使用compareAndSet来保证。如果释放状态成功过之后，将会进入后继节点的唤醒过程。</li>
<li>唤醒当前节点的后继节点所包含的线程。<br>通过LockSupport的unpark方法将休眠中的线程唤醒，让其继续acquire状态。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程释放锁过程</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">       <span class="comment">/*</span></div><div class="line">        * If status is negative (i.e., possibly needing signal) try</div><div class="line">        * to clear in anticipation of signalling.  It is OK if this</div><div class="line">        * fails or if status is changed by waiting thread.</div><div class="line">        */</div><div class="line">       <span class="keyword">int</span> ws = node.waitStatus;</div><div class="line">       <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</div><div class="line">           compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</div><div class="line"></div><div class="line">       <span class="comment">/*</span></div><div class="line">        * 获取当前节点的后继节点，如果满足状态，那么进行唤醒操作</div><div class="line">        * 如果没有满足状态，从尾部开始找寻符合要求的节点并将其唤醒</div><div class="line">        */</div><div class="line">       Node s = node.next;</div><div class="line">       <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</div><div class="line">           s = <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</div><div class="line">               <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</div><div class="line">                   s = t;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (s != <span class="keyword">null</span>)</div><div class="line">           LockSupport.unpark(s.thread);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上述逻辑主要包括：</p>
<p>该方法取出了当前节点的next引用，然后对其线程(Node)进行了唤醒，这时就只有一个或合理个数的线程被唤醒，被唤醒的线程继续进行对资源的获取与争夺。<br>回顾整个资源的获取和释放过程：<br>在获取时，维护了一个sync队列，每个节点都是一个线程在进行自旋，而依据就是自己是否是首节点的后继并且能够获取资源；<br>在释放时，仅仅需要将资源还回去，然后通知一下后继节点并将其唤醒。<br>这里需要注意，队列的维护（首节点的更换）是依靠消费者（获取时）来完成的，也就是说在满足了自旋退出的条件时的一刻，这个节点就会被设置成为首节点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></div><div class="line">           <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">       <span class="keyword">if</span> (Thread.interrupted())</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">       <span class="keyword">if</span> (!tryAcquire(arg))</div><div class="line">           doAcquireInterruptibly(arg);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></div><div class="line">       <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">       <span class="keyword">final</span> Node node = addWaiter(Node.EXCLUSIVE);</div><div class="line">       <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">for</span> (;;) &#123;</div><div class="line">               <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">               <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class="line">                   setHead(node);</div><div class="line">                   p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                   failed = <span class="keyword">false</span>;</div><div class="line">                   <span class="keyword">return</span>;</div><div class="line">               &#125;</div><div class="line">			<span class="comment">// 检测中断标志位</span></div><div class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                   parkAndCheckInterrupt())</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           <span class="keyword">if</span> (failed)</div><div class="line">               cancelAcquire(node);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上述逻辑主要包括：</p>
<ol>
<li>检测当前线程是否被中断；<br>判断当前线程的中断标志位，如果已经被中断了，那么直接抛出异常并将中断标志位设置为false。</li>
<li>尝试获取状态；<br>调用tryAcquire获取状态，如果顺利会获取成功并返回。</li>
<li>构造节点并加入sync队列；<br>获取状态失败后，将当前线程引用构造为节点并加入到sync队列中。退出队列的方式在没有中断的场景下和acquireQueued类似，当头结点是自己的前驱节点并且能够获取到状态时，即可以运行，当然要将本节点设置为头结点，表示正在运行。</li>
<li>中断检测。<br>在每次被唤醒时，进行中断检测，如果发现当前线程被中断，那么抛出InterruptedException并退出循环。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doAcquireNanos</span><span class="params">(<span class="keyword">int</span> arg, <span class="keyword">long</span> nanosTimeout)</span></span></div><div class="line">           <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">       <span class="keyword">if</span> (nanosTimeout &lt;= <span class="number">0L</span>)</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">long</span> deadline = System.nanoTime() + nanosTimeout;</div><div class="line">       <span class="keyword">final</span> Node node = addWaiter(Node.EXCLUSIVE);</div><div class="line">       <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">for</span> (;;) &#123;</div><div class="line">               <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">               <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class="line">                   setHead(node);</div><div class="line">                   p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                   failed = <span class="keyword">false</span>;</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">               &#125;</div><div class="line">			<span class="comment">//计算时间，当前时间减去睡眠之前的时间得到睡眠的时间，然后被</span></div><div class="line">			<span class="comment">//原有超时时间减去，得到了还应该睡眠的时间</span></div><div class="line">               nanosTimeout = deadline - System.nanoTime();</div><div class="line">               <span class="keyword">if</span> (nanosTimeout &lt;= <span class="number">0L</span>)</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                   nanosTimeout &gt; spinForTimeoutThreshold)</div><div class="line">                   LockSupport.parkNanos(<span class="keyword">this</span>, nanosTimeout);</div><div class="line">               <span class="keyword">if</span> (Thread.interrupted())</div><div class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           <span class="keyword">if</span> (failed)</div><div class="line">               cancelAcquire(node);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上述逻辑主要包括：</p>
<ol>
<li>加入sync队列；<br>将当前线程构造成为节点Node加入到sync队列中。</li>
<li>条件满足直接返回；<br>退出条件判断，如果前驱节点是头结点并且成功获取到状态，那么设置自己为头结点并退出，返回true，也就是在指定的nanosTimeout之前获取了锁。</li>
<li>获取状态失败休眠一段时间；<br>通过LockSupport.unpark来指定当前线程休眠一段时间。</li>
<li>计算再次休眠的时间；<br>唤醒后的线程，计算仍需要休眠的时间，该时间表示为nanosTimeout = 原有nanosTimeout – now（当前时间）+ lastTime（睡眠之前记录的时间）。其中now – lastTime表示这次睡眠所持续的时间。</li>
<li>休眠时间的判定。<br>唤醒后的线程，计算仍需要休眠的时间，并无阻塞的尝试再获取状态，如果失败后查看其nanosTimeout是否大于0，如果小于0，那么返回完全超时，没有获取到锁。 如果nanosTimeout小于等于1000L纳秒，则进入快速的自旋过程。那么快速自旋会造成处理器资源紧张吗？结果是不会，经过测算，开销看起来很小，几乎微乎其微。Doug Lea应该测算了在线程调度器上的切换造成的额外开销，因此在短时1000纳秒内就让当前线程进入快速自旋状态，如果这时再休眠相反会让nanosTimeout的获取时间变得更加不精确。<br>上述过程可以如下图所示：</li>
</ol>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/AQSTime.png" alt=""></p>
<p>上述这个图中可以理解为在类似获取状态需要排队的基础上增加了一个超时控制的逻辑。每次超时的时间就是当前超时剩余的时间减去睡眠的时间，而在这个超时时间的基础上进行了判断，如果大于0那么继续睡眠（等待），可以看出这个超时版本的获取状态只是一个近似超时的获取状态，因此任何含有超时的调用基本结果就是近似于给定超时。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</div><div class="line">           doAcquireShared(arg);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</div><div class="line">       <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">           <span class="keyword">for</span> (;;) &#123;</div><div class="line">               <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">               <span class="keyword">if</span> (p == head) &#123;</div><div class="line">                   <span class="keyword">int</span> r = tryAcquireShared(arg);</div><div class="line">                   <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</div><div class="line">                       setHeadAndPropagate(node, r);</div><div class="line">                       p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                       <span class="keyword">if</span> (interrupted)</div><div class="line">                           selfInterrupt();</div><div class="line">                       failed = <span class="keyword">false</span>;</div><div class="line">                       <span class="keyword">return</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                   parkAndCheckInterrupt())</div><div class="line">                   interrupted = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           <span class="keyword">if</span> (failed)</div><div class="line">               cancelAcquire(node);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>上述逻辑主要包括：</p>
<ol>
<li>尝试获取共享状态；<br>调用tryAcquireShared来获取共享状态，该方法是非阻塞的，如果获取成功则立刻返回，也就表示获取共享锁成功。</li>
<li>获取失败进入sync队列；<br>在获取共享状态失败后，当前时刻有可能是独占锁被其他线程所把持，那么将当前线程构造成为节点（共享模式）加入到sync队列中。</li>
<li>循环内判断退出队列条件；<br>如果当前节点的前驱节点是头结点并且获取共享状态成功，这里和独占锁acquire的退出队列条件类似。</li>
<li>获取共享状态成功；<br>在退出队列的条件上，和独占锁之间的主要区别在于获取共享状态成功之后的行为，而如果共享状态获取成功之后会判断后继节点是否是共享模式，如果是共享模式，那么就直接对其进行唤醒操作，也就是同时激发多个线程并发的运行。</li>
<li>获取共享状态失败。<br>通过使用LockSupport将当前线程从线程调度器上摘下，进入休眠状态。<br>对于上述逻辑中，节点之间的通知过程如下图所示：</li>
</ol>
<p><img src="http://ok0qzthrb.bkt.clouddn.com/AQSShared.png" alt=""></p>
<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>在上述对同步器AbstractQueuedSynchronizer进行了实现层面的分析之后，我们通过一个例子来加深对同步器的理解：<br>设计一个同步工具，该工具在同一时刻，只能有两个线程能够并行访问，超过限制的其他线程进入阻塞状态。<br>对于这个需求，可以利用同步器完成一个这样的设定，定义一个初始状态，为2，一个线程进行获取那么减1，一个线程释放那么加1，状态正确的范围在[0，1，2]三个之间，当在0时，代表再有新的线程对资源进行获取时只能进入阻塞状态（注意在任何时候进行状态变更的时候均需要以CAS作为原子性保障）。由于资源的数量多于1个，同时可以有两个线程占有资源，因此需要实现tryAcquireShared和tryReleaseShared方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test.locks;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.AbstractQueuedSynchronizer;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwinsLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Sync	sync	= <span class="keyword">new</span> Sync(<span class="number">2</span>);</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span>	serialVersionUID	= -<span class="number">7889272986162341211L</span>;</div><div class="line"></div><div class="line">		Sync(<span class="keyword">int</span> count) &#123;</div><div class="line">			<span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count must large than zero."</span>);</div><div class="line">			&#125;</div><div class="line">			setState(count);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> reduceCount)</span> </span>&#123;</div><div class="line">			<span class="keyword">for</span> (;;) &#123;</div><div class="line">				<span class="keyword">int</span> current = getState();</div><div class="line">				<span class="keyword">int</span> newCount = current - reduceCount;</div><div class="line">				<span class="keyword">if</span> (newCount &lt; <span class="number">0</span> || compareAndSetState(current, newCount)) &#123;</div><div class="line">					<span class="keyword">return</span> newCount;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> returnCount)</span> </span>&#123;</div><div class="line">			<span class="keyword">for</span> (;;) &#123;</div><div class="line">				<span class="keyword">int</span> current = getState();</div><div class="line">				<span class="keyword">int</span> newCount = current + returnCount;</div><div class="line">				<span class="keyword">if</span> (compareAndSetState(current, newCount)) &#123;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">		sync.acquireShared(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		sync.acquireSharedInterruptibly(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sync.tryAcquireShared(<span class="number">1</span>) &gt;= <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		<span class="keyword">return</span> sync.tryAcquireSharedNanos(<span class="number">1</span>, unit.toNanos(time));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">		sync.releaseShared(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwinsLockTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> Lock lock = <span class="keyword">new</span> TwinsLock();</div><div class="line"></div><div class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">					lock.lock();</div><div class="line"></div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">1000L</span>);</div><div class="line">				System.out.println(Thread.currentThread());</div><div class="line">						Thread.sleep(<span class="number">1000L</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line"></div><div class="line">					&#125; <span class="keyword">finally</span> &#123;</div><div class="line">						lock.unlock();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			Worker w = <span class="keyword">new</span> Worker();</div><div class="line">			w.start();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">200L</span>);</div><div class="line">						System.out.println();</div><div class="line">					&#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line"></div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;.start();</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Thread.sleep(<span class="number">20000L</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述测试用例的逻辑主要包括：<br>​1. 打印线程<br>Worker在两次睡眠之间打印自身线程，如果一个时刻只能有两个线程同时访问，那么打印出来的内容将是成对出现。<br>​2. 分隔线程<br>不停的打印换行，能让Worker的输出看起来更加直观。<br>该测试的结果是在一个时刻，仅有两个线程能够获得到锁，并完成打印，而表象就是打印的内容成对出现。</p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AQS </tag>
            
            <tag> CAS </tag>
            
            <tag> Unsafe </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Builder模式]]></title>
      <url>http://itliusir.com/2017/javase-Builder/</url>
      <content type="html"><![CDATA[<p>摘要:日常写代码有时候会遇到bean有很多的参数，也即是有多个构造器参数，这个时候我们可以考虑使用构建器。它既能保证像重叠构造器模式那样的安全性，也能保证像JavaBean模式那么好的可读性。这就是Builder模式。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>讲Builder模式之前，我们先来看一下日常使用构造器的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bean.builder;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> a;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> b;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> c;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> d;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> e;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> f;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Bean</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> e, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.a = a;</div><div class="line">		<span class="keyword">this</span>.b = b;</div><div class="line">		<span class="keyword">this</span>.c = c;</div><div class="line">		<span class="keyword">this</span>.d = d;</div><div class="line">		<span class="keyword">this</span>.e = e;</div><div class="line">		<span class="keyword">this</span>.f = f;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Bean</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> e)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.a = a;</div><div class="line">		<span class="keyword">this</span>.b = b;</div><div class="line">		<span class="keyword">this</span>.c = c;</div><div class="line">		<span class="keyword">this</span>.d = d;</div><div class="line">		<span class="keyword">this</span>.e = e;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Bean</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.a = a;</div><div class="line">		<span class="keyword">this</span>.b = b;</div><div class="line">		<span class="keyword">this</span>.c = c;</div><div class="line">		<span class="keyword">this</span>.d = d;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">// ....构造方法</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Bean</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//省略setter getter方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由此可见,若想要灵活的new一个对象需要创建很多个重载的构造器，可读性和可维护性都不是很高。</p>
<p><strong>使用构建器示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bean.builder;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderBean</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> b;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> c;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> d;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> e;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> f;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> b;</div><div class="line">		</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> d = <span class="number">0</span>;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> e = <span class="number">0</span>;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> f = <span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">			<span class="keyword">this</span>.a = a;</div><div class="line">			<span class="keyword">this</span>.b = b;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">c</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">			c = val;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">d</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">			d = val;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">e</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">			e = val;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">f</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">			f = val;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">public</span> BuilderBean <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> BuilderBean(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">BuilderBean</span><span class="params">(Builder builder)</span></span>&#123;</div><div class="line">		a = builder.a;</div><div class="line">		b = builder.b;</div><div class="line">		c = builder.c;</div><div class="line">		d = builder.d;</div><div class="line">		e = builder.e;</div><div class="line">		f = builder.f;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意BuilderBean是不可变的，所有的默认参数值都单独放一个地方。builder的setter方法返回builder本身，以便后续继续调用别的方法。下面是客户端的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BuilderBean bb = <span class="keyword">new</span> BuilderBean.Builder(<span class="number">10</span>, <span class="number">20</span>).</div><div class="line">			c(<span class="number">3</span>).e(<span class="number">5</span>).f(<span class="number">6</span>).build();</div></pre></td></tr></table></figure></p>
<p>这样的客户端代码很容易编写，更重要的是易于阅读。与构造器相比，builder的微略优势在于，builder可以有多个可变的参数，构造器就像方法一样，只能有一个可变参数。</p>
<p><strong>Builder模式的优点：</strong></p>
<p>1.使用Builder模式必然会导致写两遍相关属性的代码和setter方法，看起来有点吃力不讨好。然而需要看到的是，客户端代码的可用性和可读性得到了大大提高。与此同时，构造函数的参数数量明显减少调用起来非常直观。</p>
<p>2.Builder模式十分灵活，可以利用单个builder构建多个对象，还可在创建期间进行调整根据对象的不同进行改变。</p>
<p><strong>Builder模式的缺点：</strong></p>
<p>1.为了创建对象，必须先创建它的构建器。虽然创建器的开销在实践中可能不那么明显，但是在某些十分注重性能的情况下，可能就成问题了。</p>
<p>2.Builder模式还比重叠构造器模式更加冗长，最好在4个或4个以上的参数才使用。</p>
<p>在我的Builder实现中，我会用Builder的构造函数而不是set方法传递客户需要的属性。这样做的好处在于，对象总是能被一次完整的实例化，而不是靠开发人员调用时用set方法补充额外的属性完成实例化。这也体现了不可变性带来的好处。然而，相应地也会造成自己设定的属性方法可读性降低。</p>
<p><strong>总结：</strong><br>如果类的构造器或者静态工厂中具有多个参数，设计这种类时，Builder是种不错的选择，特别是当大多数参数都是可选的时候。与使用传统的重叠构造器模式相比，使用Builder模式的客户端代码更易于编写和阅读，构建器也比JavaBean更加安全。</p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Builder模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot配置属性]]></title>
      <url>http://itliusir.com/2017/Springboot4-SpringBoot-Configuration/</url>
      <content type="html"><![CDATA[<p>摘要:springboot数据库连接池使用策略以及对应的配置属性<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="springboot数据库连接池使用策略"><a href="#springboot数据库连接池使用策略" class="headerlink" title="springboot数据库连接池使用策略"></a>springboot数据库连接池使用策略</h1><p>springboot官方文档介绍数据库连接池的使用策略如下：<br>    Production database connections can also be auto-configured using a<br>    pooling DataSource. Here’s the algorithm for choosing a specific<br>    implementation:<br>    We prefer the Tomcat pooling DataSource for its performance and concurrency, so if that is available we always choose it.<br>    If HikariCP is available we will use it.<br>    If Commons DBCP is available we will use it, but we don’t recommend it in production.<br>    Lastly, if Commons DBCP2 is available we will use it.<br>    If you use the spring-boot-starter-jdbc or spring-boot-starter-data-jpa ‘starter<br>    POMs’ you will automatically get a dependency to tomcat-jdbc.</p>
<ol>
<li>springboot会优先使用tomcat连接池，因为其性能和并发性很好，如果可用的话，将会优先使用。tomcat连接池，请查看： <a href="http://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html" target="_blank" rel="external">http://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html</a></li>
<li>如果HikariCP可用，会选择使用 <a href="http://brettwooldridge.github.io/HikariCP/。" target="_blank" rel="external">http://brettwooldridge.github.io/HikariCP/。</a></li>
<li>如果DBCP可用，会选择使用，但是不推荐在生产中使用它。</li>
<li>最后，如果使用DBCP2，会选择使用</li>
</ol>
<p>如果在pom文件里有spring-boot-starter-jdbc 或者 spring-boot-starter-data-jpa 依赖项，那么，会自动获取tomcat-jdbc连接池。</p>
<h1 id="springboot配置属性"><a href="#springboot配置属性" class="headerlink" title="springboot配置属性"></a>springboot配置属性</h1><h2 id="datasource"><a href="#datasource" class="headerlink" title="datasource"></a>datasource</h2><ul>
<li>spring.dao.exceptiontranslation.enabled是否开启PersistenceExceptionTranslationPostProcessor，默认为true</li>
<li>spring.datasource.abandon-when-percentage-full设定超时被废弃的连接占到多少比例时要被关闭或上报</li>
<li>spring.datasource.allow-pool-suspension使用Hikari pool时，是否允许连接池暂停，默认为: false</li>
<li>spring.datasource.alternate-username-allowed是否允许替代的用户名.</li>
<li>spring.datasource.auto-commit指定updates是否自动提交.</li>
<li>spring.datasource.catalog指定默认的catalog.</li>
<li>spring.datasource.commit-on-return设置当连接被归还时，是否要提交所有还未完成的事务</li>
<li>spring.datasource.connection-init-sql指定连接被创建，再被添加到连接池之前执行的sql.</li>
<li>spring.datasource.connection-init-sqls使用DBCP connection pool时，指定初始化时要执行的sql</li>
<li>spring.datasource.connection-properties.[key]在使用DBCP connection pool时指定要配置的属性</li>
<li>spring.datasource.connection-test-query指定校验连接合法性执行的sql语句</li>
<li>spring.datasource.connection-timeout指定连接的超时时间，毫秒单位.</li>
<li>spring.datasource.continue-on-error在初始化数据库时，遇到错误是否继续，默认false</li>
<li>spring.datasource.data指定Data (DML)脚本</li>
<li>spring.datasource.data-source-class-name指定数据源的全限定名.</li>
<li>spring.datasource.data-source-jndi指定jndi的地址</li>
<li>spring.datasource.data-source-properties.[key]使用Hikari connection pool时，指定要设置的属性</li>
<li>spring.datasource.db-properties使用Tomcat connection pool，指定要设置的属性</li>
<li>spring.datasource.default-auto-commit是否自动提交.</li>
<li>spring.datasource.default-catalog指定连接默认的catalog.</li>
<li>spring.datasource.default-read-only是否设置默认连接只读.</li>
<li>spring.datasource.default-transaction-isolation指定连接的事务的默认隔离级别.</li>
<li>spring.datasource.driver-class-name指定driver的类名，默认从jdbc url中自动探测.</li>
<li>spring.datasource.fair-queue是否采用FIFO返回连接.</li>
<li>spring.datasource.health-check-properties.[key]使用Hikari connection pool时，在心跳检查时传递的属性</li>
<li>spring.datasource.idle-timeout指定连接多久没被使用时，被设置为空闲，默认为10ms</li>
<li>spring.datasource.ignore-exception-on-pre-load当初始化连接池时，是否忽略异常.</li>
<li>spring.datasource.init-sql当连接创建时，执行的sql</li>
<li>spring.datasource.initial-size指定启动连接池时，初始建立的连接数量</li>
<li>spring.datasource.initialization-fail-fast当创建连接池时，没法创建指定最小连接数量是否抛异常</li>
<li>spring.datasource.initialize指定初始化数据源，是否用data.sql来初始化，默认: true</li>
<li>spring.datasource.isolate-internal-queries指定内部查询是否要被隔离，默认为false</li>
<li>spring.datasource.jdbc-interceptors使用Tomcat connection - pool时，指定jdbc拦截器，分号分隔</li>
<li>spring.datasource.jdbc-url指定JDBC URL.</li>
<li>spring.datasource.jmx-enabled是否开启JMX，默认为: false</li>
<li>spring.datasource.jndi-name指定jndi的名称.</li>
<li>spring.datasource.leak-detection-threshold使用Hikari connection pool时，多少毫秒检测一次连接泄露.</li>
<li>spring.datasource.log-abandoned使用DBCP connection pool，是否追踪废弃statement或连接，默认为: false</li>
<li>spring.datasource.log-validation-errors当使用Tomcat - connection pool是否打印校验错误.</li>
<li>spring.datasource.login-timeout指定连接数据库的超时时间.</li>
<li>spring.datasource.max-active指定连接池中最大的活跃连接数.</li>
<li>spring.datasource.max-age指定连接池中连接的最大年龄</li>
<li>spring.datasource.max-idle指定连接池最大的空闲连接数量.</li>
<li>spring.datasource.max-lifetime指定连接池中连接的最大生存时间，毫秒单位.</li>
<li>spring.datasource.max-open-prepared-statements指定最大的打开的prepared statements数量.</li>
<li>spring.datasource.max-wait指定连接池等待连接返回的最大等待时间，毫秒单位.</li>
<li>spring.datasource.maximum-pool-size指定连接池最大的连接数，包括使用中的和空闲的连接.</li>
<li>spring.datasource.min-evictable-idle-time-millis指定一个空闲连接最少空闲多久后可被清除.</li>
<li>spring.datasource.min-idle指定必须保持连接的最小值(For DBCP and Tomcat connection pools)</li>
<li>spring.datasource.minimum-idle指定连接维护的最小空闲连接数，当使用HikariCP时指定.</li>
<li>spring.datasource.name指定数据源名.</li>
<li>spring.datasource.num-tests-per-eviction-run指定运行每个idle object evictor线程时的对象数量</li>
<li>spring.datasource.password指定数据库密码.</li>
<li>spring.datasource.platform指定schema要使用的Platform(schema-${platform}.sql)，默认为: all</li>
<li>spring.datasource.pool-name指定连接池名字.</li>
<li>spring.datasource.pool-prepared-statements指定是否池化statements.</li>
<li>spring.datasource.propagate-interrupt-state在等待连接时，如果线程被中断，是否传播中断状态.</li>
<li>spring.datasource.read-only当使用Hikari connection pool时，是否标记数据源只读</li>
<li>spring.datasource.register-mbeans指定Hikari connection pool是否注册JMX MBeans.</li>
<li>spring.datasource.remove-abandoned指定当连接超过废弃超时时间时，是否立刻删除该连接.</li>
<li>spring.datasource.remove-abandoned-timeout指定连接应该被废弃的时间.</li>
<li>spring.datasource.rollback-on-return在归还连接时，是否回滚等待中的事务.</li>
<li>spring.datasource.schema指定Schema (DDL)脚本.</li>
<li>spring.datasource.separator指定初始化脚本的语句分隔符，默认: ;</li>
<li>spring.datasource.sql-script-encoding指定SQL scripts编码.</li>
<li>spring.datasource.suspect-timeout指定打印废弃连接前的超时时间.</li>
<li>spring.datasource.test-on-borrow当从连接池借用连接时，是否测试该连接.</li>
<li>spring.datasource.test-on-connect创建时，是否测试连接</li>
<li>spring.datasource.test-on-return在连接归还到连接池时是否测试该连接.</li>
<li>spring.datasource.test-while-idle当连接空闲时，是否执行连接测试.</li>
<li>spring.datasource.time-between-eviction-runs-millis指定空闲连接检查、废弃连接清理、空闲连接池大小调整之间的操作时间间隔</li>
<li>spring.datasource.transaction-isolation指定事务隔离级别，使用Hikari connection pool时指定</li>
<li>spring.datasource.url指定JDBC URL.</li>
<li>spring.datasource.use-disposable-connection-facade是否对连接进行包装，防止连接关闭之后被使用.</li>
<li>spring.datasource.use-equals比较方法名时是否使用String.equals()替换==.</li>
<li>spring.datasource.use-lock是否对连接操作加锁</li>
<li>spring.datasource.username指定数据库名.</li>
<li>spring.datasource.validation-interval指定多少ms执行一次连接校验.</li>
<li>spring.datasource.validation-query指定获取连接时连接校验的sql查询语句.</li>
<li>spring.datasource.validation-query-timeout指定连接校验查询的超时时间.</li>
<li>spring.datasource.validation-timeout设定连接校验的超时时间，当使用Hikari connection pool时指定</li>
<li>spring.datasource.validator-class-name用来测试查询的validator全限定名.</li>
<li>spring.datasource.xa.data-source-class-name指定数据源的全限定名.</li>
<li>spring.datasource.xa.properties指定传递给XA data source的属性<h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2></li>
<li>spring.jpa.database指定目标数据库.</li>
<li>spring.jpa.database-platform指定目标数据库的类型.</li>
<li>spring.jpa.generate-ddl是否在启动时初始化schema，默认为false</li>
<li>spring.jpa.hibernate.ddl-auto指定DDL mode (none, validate, update, create, create-drop). 当使用内嵌数据库时，默认是create-drop，否则为none.</li>
<li>spring.jpa.hibernate.naming-strategy指定命名策略.</li>
<li>spring.jpa.open-in-view是否注册OpenEntityManagerInViewInterceptor，绑定JPA EntityManager到请求线程中，默认为: true</li>
<li>spring.jpa.properties添加额外的属性到JPA provider.</li>
<li>spring.jpa.show-sql是否开启sql的log，默认为: false<h2 id="jooq"><a href="#jooq" class="headerlink" title="jooq"></a>jooq</h2></li>
<li>spring.jooq.sql-dialect指定JOOQ使用的SQLDialect，比如POSTGRES.<h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2></li>
<li>spring.h2.console.enabled是否开启控制台，默认为false</li>
<li>spring.h2.console.path指定控制台路径，默认为: /h2-console<h2 id="JTA"><a href="#JTA" class="headerlink" title="JTA"></a>JTA</h2></li>
<li>spring.jta.allow-multiple-lrc是否允许 multiple LRC，默认为: false</li>
<li>spring.jta.asynchronous2-pc指定两阶段提交是否可以异步，默认为: false</li>
<li>spring.jta.background-recovery-interval指定多少分钟跑一次recovery process，默认为: 1</li>
<li>spring.jta.background-recovery-interval-seconds指定多久跑一次recovery process，默认: 60</li>
<li>spring.jta.current-node-only-recovery是否过滤掉其他非本JVM的recovery，默认为: true</li>
<li>spring.jta.debug-zero-resource-transaction是否追踪没有使用指定资源的事务，默认为: false</li>
<li>spring.jta.default-transaction-timeout设定默认的事务超时时间，默认为60</li>
<li>spring.jta.disable-jmx是否禁用jmx，默认为false</li>
<li>spring.jta.enabled是否开启JTA support，默认为: true</li>
<li>spring.jta.exception-analyzer设置指定的异常分析类</li>
<li>spring.jta.filter-log-status使用Bitronix Transaction Manager时，是否写mandatory logs，开启的话，可以节省磁盘空间，但是调试会复杂写，默认为false</li>
<li>spring.jta.force-batching-enabled使用Bitronix Transaction Manager时，是否批量写磁盘，默认为true.</li>
<li>spring.jta.forced-write-enabled使用Bitronix Transaction Manager时，是否强制写日志到磁盘，默认为true</li>
<li>spring.jta.graceful-shutdown-interval当使用Bitronix Transaction Manager，指定shutdown时等待事务结束的时间，超过则中断，默认为60</li>
<li>spring.jta.jndi-transaction-synchronization-registry-name当使用Bitronix Transaction Manager时，在JNDI下得事务同步registry，默认为: java:comp/TransactionSynchronizationRegistry</li>
<li>spring.jta.jndi-user-transaction-name指定在JNDI使用Bitronix Transaction Manager的名称，默认:java:comp/UserTransaction</li>
<li>spring.jta.journal当使用Bitronix Transaction Manager，指定The journal是否disk还是null还是一个类的全限定名，默认disk</li>
<li>spring.jta.log-dirTransaction logs directory.</li>
<li>spring.jta.log-part1-filename指定The journal fragment文件1的名字，默认: btm1.tlog</li>
<li>spring.jta.log-part2-filename指定The journal fragment文件2的名字，默认: btm2.tlog</li>
<li>spring.jta.max-log-size-in-mb指定journal fragments大小的最大值. 默认: 2M</li>
<li>spring.jta.resource-configuration-filename指定Bitronix Transaction Manager配置文件名.</li>
<li>spring.jta.server-id指定Bitronix Transaction Manager实例的id.</li>
<li>spring.jta.skip-corrupted-logs是否忽略corrupted log files文件，默认为false.</li>
<li>spring.jta.transaction-manager-id指定Transaction manager的唯一标识.</li>
<li>spring.jta.warn-about-zero-resource-transaction当使用Bitronix Transaction Manager时，是否对没有使用指定资源的事务进行警告，默认为: true</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
            <category> Springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> datasource </tag>
            
            <tag> JPA </tag>
            
            <tag> jooq </tag>
            
            <tag> h2 </tag>
            
            <tag> JTA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot中使用Swagger2构建强大的RESTful API文档]]></title>
      <url>http://itliusir.com/2017/Springboot2-Swagger/</url>
      <content type="html"><![CDATA[<p>摘要:Swagger2，它可以轻松的整合到Spring Boot中，并与Spring MVC程序配合组织出强大RESTful API文档。它既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明。另外Swagger2也提供了强大的页面测试功能来调试每个RESTful API。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>具体效果如下图所示：<br><img src="http://ok0qzthrb.bkt.clouddn.com/image/jpg/1.jpgswagger.png" alt=""><br>下面来具体介绍，如何在Spring Boot中使用Swagger2。</p>
<h1 id="添加Swagger2依赖"><a href="#添加Swagger2依赖" class="headerlink" title="添加Swagger2依赖"></a>添加Swagger2依赖</h1><p>在pom.xml中加入Swagger2的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Swagger2的依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="创建Swagger2配置类"><a href="#创建Swagger2配置类" class="headerlink" title="创建Swagger2配置类"></a>创建Swagger2配置类</h1><p>在Application.java同级创建Swagger2的配置类Swagger2。<br><img src="http://ok0qzthrb.bkt.clouddn.com/swagger2.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableSwagger</span>2</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .apiInfo(apiInfo())</div><div class="line">                .select()</div><div class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.ysstech.micro.web"</span>))</div><div class="line">                .paths(PathSelectors.any())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</div><div class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</div><div class="line">                .contact(<span class="string">"ysstech"</span>)</div><div class="line">                .version(<span class="string">"1.0"</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如上代码所示，通过@Configuration注解，让Spring来加载该类配置。再通过@EnableSwagger2注解来启用Swagger2。</p>
<p>再通过createRestApi函数创建Docket的Bean之后，apiInfo()用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个ApiSelectorBuilder实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被@ApiIgnore指定的请求）。</p>
<h1 id="添加文档内容"><a href="#添加文档内容" class="headerlink" title="添加文档内容"></a>添加文档内容</h1><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过@ApiOperation注解来给API增加说明、通过@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span> </div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/user"</span>)</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Spring Boot：约定优于配置</div><div class="line"> * Spring Boot构建RESTful API</div><div class="line"> * */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	UsersService UsersService=<span class="keyword">null</span>;</div><div class="line">	</div><div class="line">	<span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>,notes=<span class="string">""</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/"</span>, method=RequestMethod.GET) </div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseInfo <span class="title">getUserList</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123; </div><div class="line">        <span class="comment">// 处理"/users/"的GET请求，用来获取用户列表 </span></div><div class="line">    	ResponseInfo resInfo = <span class="keyword">new</span> ResponseInfo();</div><div class="line">        List&lt;Users&gt; list = <span class="keyword">new</span> ArrayList&lt;Users&gt;(); </div><div class="line">      </div><div class="line">        resInfo.setResponseInfo(list);</div><div class="line">        <span class="keyword">return</span> resInfo;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>,notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name=<span class="string">"id"</span>,value=<span class="string">"用户ID"</span>,required=<span class="keyword">true</span>,dataType=<span class="string">"int"</span>,paramType=<span class="string">"path"</span>)</div><div class="line">	<span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseInfo <span class="title">getUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">    	ResponseInfo resInfo = <span class="keyword">new</span> ResponseInfo();</div><div class="line">    	<span class="comment">//List&lt;Users&gt; list = new ArrayList&lt;Users&gt;();</span></div><div class="line">		Users user =UsersService.selectByPrimaryKey(id);</div><div class="line">		resInfo.setResponseInfo(user);</div><div class="line">		<span class="keyword">return</span> resInfo;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>,notes=<span class="string">"根据User对象创建用户"</span>)</div><div class="line">	<span class="meta">@ApiImplicitParam</span>(name=<span class="string">"user"</span>,value=<span class="string">"用户详细实体user"</span>,required=<span class="keyword">true</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/"</span>, method=RequestMethod.POST) </div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseInfo <span class="title">postUser</span><span class="params">(@RequestBody Users user)</span> <span class="keyword">throws</span> Exception</span>&#123; </div><div class="line">        <span class="comment">// 处理"/users/"的POST请求，用来创建User </span></div><div class="line">    		ResponseInfo resInfo = <span class="keyword">new</span> ResponseInfo();</div><div class="line">   </div><div class="line">    		UsersService.insert(user);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> resInfo; </div><div class="line">    &#125; </div><div class="line"></div><div class="line">	</div><div class="line">	<span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</div><div class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"int"</span>,paramType=<span class="string">"path"</span>),</div><div class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT) </div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseInfo <span class="title">putUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id, @RequestBody Users user)</span> <span class="keyword">throws</span> Exception</span>&#123; </div><div class="line">        <span class="comment">// 处理"/users/&#123;id&#125;"的PUT请求，用来更新User信息 </span></div><div class="line">    	ResponseInfo resInfo = <span class="keyword">new</span> ResponseInfo();</div><div class="line">    	List&lt;Users&gt; list = <span class="keyword">new</span> ArrayList&lt;Users&gt;(); </div><div class="line"> </div><div class="line">        Users user1 = list.get(id);</div><div class="line">        user1.setAge(user.getAge());</div><div class="line">        user1.setId(user.getId());</div><div class="line">        user1.setName(user.getName());</div><div class="line">        resInfo.setResponseInfo(list);</div><div class="line">        <span class="keyword">return</span> resInfo; </div><div class="line">    &#125; </div><div class="line"></div><div class="line">	<span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"int"</span>,paramType=<span class="string">"path"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE) </div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseInfo <span class="title">deleteUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>&#123; </div><div class="line">        <span class="comment">// 处理"/users/&#123;id&#125;"的DELETE请求，用来删除User </span></div><div class="line">    		ResponseInfo resInfo = <span class="keyword">new</span> ResponseInfo();</div><div class="line">    		List&lt;Users&gt; list = <span class="keyword">new</span> ArrayList&lt;Users&gt;(); </div><div class="line"> </div><div class="line">        list.remove(id);</div><div class="line">        resInfo.setResponseInfo(list);</div><div class="line">        <span class="keyword">return</span> resInfo;</div><div class="line">    &#125; </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>完成上述代码添加上，启动Spring Boot程序，访问：<a href="http://localhost:8088/demojar/swagger-ui.html" target="_blank" rel="external">http://localhost:8088/demojar/swagger-ui.html</a>(加的有根目录demojar)<br>。就能看到前文所展示的RESTful API的页面。我们可以再点开具体的API请求，以POST类型的/users请求为例，可找到上述代码中我们配置的Notes信息以及参数user的描述信息，如下图所示。<br><img src="http://ok0qzthrb.bkt.clouddn.com/Swagger3.png" alt=""></p>
<h1 id="API文档访问与调试"><a href="#API文档访问与调试" class="headerlink" title="API文档访问与调试"></a>API文档访问与调试</h1><p>在上图请求的页面中，我们看到user的Value是个输入框？是的，Swagger除了查看接口功能外，还提供了调试测试功能，我们可以点击上图中右侧的Model Schema（黄色区域：它指明了User的数据结构），此时Value中就有了user对象的模板，我们只需要稍适修改，点击下方“Try it out！”按钮，即可完成了一次请求调用！</p>
<p>此时，你也可以通过几个GET请求来验证之前的POST请求是否正确。</p>
<p>相比为这些接口编写文档的工作，我们增加的配置内容是非常少而且精简的，对于原有代码的侵入也在忍受范围之内。因此，在构建RESTful API的同时，加入swagger来对API文档进行管理，是个不错的选择。</p>
<h1 id="下面说下在项目使用中遇到的问题："><a href="#下面说下在项目使用中遇到的问题：" class="headerlink" title="下面说下在项目使用中遇到的问题："></a>下面说下在项目使用中遇到的问题：</h1><p>按照以上demo的配置访问swagger-ui.html是404状态(error:No mapping found for HTTP request with URI [/swagger-ui.html])，最后在github上提的Issues上找到了答案 链接：<a href="https://github.com/springfox/springfox/issues/776" target="_blank" rel="external">https://github.com/springfox/springfox/issues/776</a><br><img src="http://ok0qzthrb.bkt.clouddn.com/Swagger4.png" alt=""><br>问题是15年提的，最后有解决办法，不知道我项目是没配置对还是什么情况用的最新版本的jar没有加载到。解决办法是在Swagger2类加上@EnableWebMv或者继承WebMvcConfigurationSupport然后重写addResourceHandlers()方法解决了加载不到404问题<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableSwagger</span>2</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 继承是加路径是无奈之举 默认是不需要继承</div><div class="line"> * */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</div><div class="line">				.apiInfo(apiInfo())</div><div class="line">				.select()</div><div class="line">				.apis(RequestHandlerSelectors</div><div class="line">						.basePackage(<span class="string">"com.ysstech.micro.web"</span>))</div><div class="line">				.paths(PathSelectors.any()).build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</div><div class="line">				.title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</div><div class="line">				.contact(<span class="string">"ysstech"</span>).version(<span class="string">"1.0"</span>).build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</div><div class="line">		registry.addResourceHandler(<span class="string">"/swagger-ui.html"</span>).addResourceLocations(</div><div class="line">				<span class="string">"classpath:/META-INF/resources/"</span>);</div><div class="line"></div><div class="line">		registry.addResourceHandler(<span class="string">"/webjars/**"</span>).addResourceLocations(</div><div class="line">				<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
            <category> Springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Swagger2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot 静态资源处理]]></title>
      <url>http://itliusir.com/2017/Springboot3-Static-Resources/</url>
      <content type="html"><![CDATA[<p>摘要:spring Boot 默认的处理方式就已经足够了，默认情况下Spring Boot 使用WebMvcAutoConfiguration中配置的各种属性。<br>但是如果你想要自己配置一些项目的设置，你可以在@Configuration注解的配置类上增加@EnableWebMvc或者继承WebMvcConfigurationSupport和WebMvcConfigurationAdapter<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h1 id="首先解析-EnableWebMvc-、WebMvcConfigurationSupport和WebMvcConfigurerAdapter"><a href="#首先解析-EnableWebMvc-、WebMvcConfigurationSupport和WebMvcConfigurerAdapter" class="headerlink" title="首先解析@EnableWebMvc 、WebMvcConfigurationSupport和WebMvcConfigurerAdapter"></a>首先解析@EnableWebMvc 、WebMvcConfigurationSupport和WebMvcConfigurerAdapter</h1><p> #<br>在spring-boot+spring mvc 的项目中，有些时候我们需要自己配置一些项目的设置，就会涉及到这三个，那么，他们之间有什么关系呢？首先，@EnableWebMvc=WebMvcConfigurationSupport，使用了@EnableWebMvc注解等于扩展了WebMvcConfigurationSupport但是没有重写任何方法，所以有以下几种使用方式：</p>
<ol>
<li>@EnableWebMvc+extends WebMvcConfigurerAdapter，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置</li>
<li>extends WebMvcConfigurationSupport，在扩展的类中重写父类的方法即可，这种方式会屏蔽springboot的@EnableAutoConfiguration中的设置</li>
<li>extends WebMvcConfigurerAdapter，在扩展的类中重写父类的方法即可，这种方式依旧使用springboot的@EnableAutoConfiguration中的设置</li>
</ol>
<p>具体哪种方法适合，看个人对于项目的需求和要把控的程度，在WebMvcConfigurationSupport（@EnableWebMvc）和@EnableAutoConfiguration这两种方式都有一些默认的设定，而WebMvcConfigurationAdapter则是一个abstract class。<br>具体如何类内如何进行个性化的设置，可以参考以下文章： </p>
<p><a href="http://www.jianshu.com/p/ffe56d9553fd" target="_blank" rel="external">Spring Boot：定制HTTP消息转换器</a> </p>
<p><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/EnableWebMvc.html" target="_blank" rel="external">EnableWebMvc官方文档</a></p>
<h1 id="然后重写addResourceHandlers方法"><a href="#然后重写addResourceHandlers方法" class="headerlink" title="然后重写addResourceHandlers方法"></a>然后重写addResourceHandlers方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//例如对Swagger资源处理</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</div><div class="line">	registry.addResourceHandler(<span class="string">"/swagger-ui.html"</span>).addResourceLocations(</div><div class="line">			<span class="string">"classpath:/META-INF/resources/"</span>);</div><div class="line">	registry.addResourceHandler(<span class="string">"/webjars/**"</span>).addResourceLocations(</div><div class="line">			<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于是继承WebMvcConfigurationSupport还是WebMvcConfigurerAdapter看个人需求。</p>
<h1 id="Swagger路径问题"><a href="#Swagger路径问题" class="headerlink" title="Swagger路径问题"></a>Swagger路径问题</h1><p>在使用Swagger时候是正常可以访问的在加入Security后发现若不排除Swagger-ui.html则资源权限不足401的问题，最后发现路径并不是springfox-swagger-ui.jar下的webjar/xxx，而是/swagger-resources/xx和/v2/xx:<br><img src="http://ok0qzthrb.bkt.clouddn.com/Swagger5.png" alt=""><br>这样就可以正常访问Swagger的ui界面啦</p>
]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
            <category> Springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 静态资源处理 </tag>
            
            <tag> addResourceHandlers </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Java变量的可见性问题]]></title>
      <url>http://itliusir.com/2017/javase-Java-volatile/</url>
      <content type="html"><![CDATA[<p>摘要:关于java变量在工作内存和主存中的可见性问题<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> is = <span class="keyword">true</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span>(test1.is)&#123;</div><div class="line"> </div><div class="line">                   i++;</div><div class="line"> </div><div class="line">                   <span class="comment">//synchronized (this) &#123; &#125; 会强制刷新主内存的变量值到线程栈?</span></div><div class="line">                   <span class="comment">//System.out.println("1"); println 是synchronized 的,会强制刷新主内存的变量值到线程栈?</span></div><div class="line">                   <span class="comment">//sleep 会从新load主内存的值? </span></div><div class="line">                     <span class="comment">//    try &#123;</span></div><div class="line">                     <span class="comment">//       TimeUnit.MICROSECONDS.sleep(1);</span></div><div class="line">                     <span class="comment">//   &#125;catch (InterruptedException e) &#123;</span></div><div class="line">                     <span class="comment">//      e.printStackTrace(); </span></div><div class="line">                     <span class="comment">//   &#125;</span></div><div class="line">                &#125; </div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">         <span class="keyword">try</span> &#123;</div><div class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();  </div><div class="line">            &#125;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                is = <span class="keyword">false</span>;  <span class="comment">//设置is为false，使上面的线程结束while循环</span></div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问： 为什么整个程序不会终止？ 为什么取消注释中的任何一个代码块(1，2，3)，程序才会终止？synchronized 会强制刷新住内存的变量值到线程栈? sleep 会干什么呢？<br><strong>涉及知识解释</strong></p>
<ul>
<li>volatile：此关键字保证了变量在线程的可见性，所有线程访问由volatile修饰的变量，都必须从主存中读取后操作，并在工作内存修改后立即写回主存，保证了其他线程的可见性，同样效果的关键字还有final。</li>
<li>synchronized：所有同步操作都必须保证 1、原子性 2、可见性，所以在同步块中发生的变化会立马写回主存</li>
<li>sleep：此方法只会让出CPU执行时间，并不会释放锁。</li>
</ul>
<p><strong>问题分析</strong><br><strong>Q1</strong>：为什么注释代码后程序不会终止？</p>
<p><strong>A1</strong>：因为 boolean is=true 的变量值被前面线程（简称线程A）加载到自己的工作内存，在后面的线程（简称线程B）改变 boolean is=false 之后不一定会立马写入主存(不过这道题中应该会马上写入主存，因为线程执行完 is=false之后线程就要退出了)，即便立马写入了主存后线程A也不一定马上load到工作内存中，所以程序一直不会终止？这个是我们大多数人想到的，但其实JVM针对现在的硬件水平已经做了很大程度的优化，基本上很大程度的保障了工作内存和主内存的及时同步，相当于默认使用了volatile。但只是最大程度！在CPU资源一直被占用的时候，工作内存与主内存中间的同步，也就是变量的可见性就会不那么及时！后面会验证结论。</p>
<p><strong>Q2</strong>：为什么取消注释中的任何一个代码块(1，2，3)，程序才会终止？</p>
<p><strong>A2</strong>：行号为1、2的代码有一个共同特点，就是都涉及到了synchronized 同步锁，那么是否像提问作者猜想的那样synchronized会强制刷新主内存的变量值到线程栈？，以及sleep方法也会刷新主存的变量值到线程栈呢？，事实上我们前面说了synchronized只会保证在同步块中的变量的可见性，而is变量并不在该同步块中，所以显然不是这个导致的。接下来我们在代码i++;后面加上以下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">100000</span>;k++)&#123;</div><div class="line">    <span class="keyword">new</span> Object();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再Run，程序立刻终止！为什么？在上面的 A1 中我们已经说了即便有JVM的优化，但当CPU一直被占用的时候，数据的可见性得不到很好的保证，就像上面的程序一直循环做i++;运算占用CPU，而为什么加上上面的代码后程序就会停止呢？因为对于大量new Object()操作来说，CPU已经不是主要占时间的操作，真正的耗时应该在内存的分配上（因为CPU的处理速度明显快过内存，不然也不会有CPU的寄存器了），所以CPU空闲后会遵循JVM优化基准，尽可能快的保证数据的可见性，从而从主存同步is变量到工作内存，最终导致程序结束，这也是为什么sleep()方法虽然没有涉及同步操作，但是依然可以使程序终止，因为sleep()方法会释放CPU，但不释放锁！</p>
<p><strong>结束</strong></p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java变量的可见性 </tag>
            
            <tag> volatile的可见性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL5.7安装常见问题]]></title>
      <url>http://itliusir.com/2017/database-mysql-install/</url>
      <content type="html"><![CDATA[<p>摘要:从MySQL 5.7开始没有data文件夹，如果不进行初始化的话，mysql服务是无法启动的<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h2 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h2><ol>
<li>去官网下载zip格式的Mysql Server的压缩包（绿色版），根据个人电脑选择x86或者x64版本，点击最下面的跳过登录下载。</li>
<li><p>解压，复制my-dafault.ini到bin目录下，重命名为my.ini。可以根据需要复制以下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[mysql]</div><div class="line"><span class="comment"># 设置mysql客户端默认字符集</span></div><div class="line">default-character-set=utf8 </div><div class="line">[mysqld]</div><div class="line"><span class="comment">#设置3306端口</span></div><div class="line">port = 3306 </div><div class="line"><span class="comment"># 设置mysql的安装目录</span></div><div class="line">basedir=D:\mysql\mysql-5.6.35-winx64</div><div class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></div><div class="line">datadir=D:\mysql\mysql-5.6.35-winx64\data</div><div class="line"><span class="comment"># 允许最大连接数</span></div><div class="line">max_connections=200</div><div class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></div><div class="line">character-set-server=utf8</div><div class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></div><div class="line">default-storage-engine=INNODB</div></pre></td></tr></table></figure>
</li>
<li><p>从MySQL5.7开始，MySQL没有5.6那么易用，没有data文件夹使网上很多配置方法都会失效，<strong>如果不进行初始化的话，mysql服务是无法启动的</strong></p>
<ol>
<li>以管理员身份运行cmd，cd到mysql的bin目录下，执行命令：<br>mysqld –initialize –user=mysql –console</li>
<li>该命令会去创建data目录与数据库，生成root用户和临时密码，在执行后的最后一行：localhost: xxxxxx</li>
</ol>
</li>
<li><p>配置环境变量，将bin所在的文件夹路径添加到path的最后，例如：    path=..xxx；D:\mysql\mysql-5.6.35-winx64\bin\my.ini</p>
</li>
<li>运行cmd，输入net start mysql启动mysql服务，再输入mysql -u root -p,然后输入临时密码。修改密码：set password=password(‘新密码’);，然后回车，注意分号不要忽略。<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2></li>
<li><p>关闭服务<br>以管理员身份运行cmd，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net stop mysql</div></pre></td></tr></table></figure>
</li>
<li><p>卸载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqld -remove [服务名]</div></pre></td></tr></table></figure>
</li>
<li><p>删除文件</p>
</li>
<li>删除注册表信息<br>清除注册表中的该MySQL服务，有几个地方:<br>a、HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL 目录删除<br>b、HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL 目录删除<br>c、HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL 目录删除<br>注册表中的ControlSet001、ControlSet002不一定是001和002，可能是ControlSet005、006之类，删除的时候都删除就可以 。<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2></li>
<li><p>data文件错误<br>MySQL服务正在启动..<br>MySQL服务无法启动。</p>
<p>服务没有报告任何错误。<br><strong>原因：</strong><br>原因：一般初始化之前已存在data文件就会出现这个错误，或者data文件缺少了某些文件</p>
<p><strong>解决：</strong><br>先执行mysqld -remove，然后把data文件删除，如果删除不了重启一下就可以了，之后重新进行安装就没问题了。如果想保留之前的data文件，可以先把data文件拷贝到其他地方，安装好之后再将原data文件中多的文件拷贝进去就行了</p>
</li>
<li><p>密码错误（<strong>Error password Error 1045…Access denied</strong>）<br><strong>原因1：</strong><br>使用mysqld –initialize方法安装会生成一个随机字符串组成的密码，这个密码在错误日志D:\mysql\mysql-5.6.35-winx64\data\xxx.err（xxx是用户名）可以找到。<br><strong>原因2：</strong><br>忘记密码<br><strong>解决：</strong>如果忘记密码或找不到随机密码，可以通过以下方法跳过权限修改密码<br>以管理员身份运行cmd，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">net stop mysql//关闭服务</div><div class="line">mysqld --skip-grant-tables;//设置mysql登录--skip-grant-tables模式</div></pre></td></tr></table></figure>
<p>打开一个新的cmd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql//直接登录mysql</div><div class="line">   update mysql.user set authentication_string=password(&apos;123456&apos;) where user=&apos;root&apos; and Host = &apos;localhost&apos;;//修改密码</div><div class="line">   //特别提醒注意的一点是，新版的mysql数据库下的user表中已经没有Password字段了，而是将加密后的用户密码存储于authentication_string字段</div><div class="line">   flush privileges;//刷新权限，退出--skip-grant-tables模式，很重要！</div></pre></td></tr></table></figure>
</li>
</ol>
<p>重启电脑，然后mysql就可以连接了<br>但是此时操作似乎功能不完全，还要在登录状态下修改一次密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;</div><div class="line">还可以这样：</div><div class="line">set password for &apos;root&apos;@&apos;localhost&apos;=password(&apos;123456&apos;)；</div><div class="line">或这样：</div><div class="line">set password=password(&apos;123456&apos;);</div></pre></td></tr></table></figure></p>
<p><strong>其实mysql的安装卸载过程很简单，一般出了问题之后，把data文件备份后重装，然后把原data中的数据库文件拷贝回来就可以了。</strong></p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL5.7安装 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC源码剖析（四）- DispatcherServlet请求转发的实现]]></title>
      <url>http://itliusir.com/2017/frame-springmvc4/</url>
      <content type="html"><![CDATA[<p>摘要:SpringMVC完成初始化流程之后，就进入Servlet标准生命周期的第二个阶段，即“service”阶段。在“service”阶段中，每一次Http请求到来，容器都会启动一个请求线程，通过service()方法，委派到doGet()或者doPost()这些方法，完成Http请求的处理。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>在初始化流程中，SpringMVC巧妙的运用依赖注入读取参数，并最终建立一个与容器上下文相关联的Spring子上下文。这个子上下文，就像Struts2中xwork容器一样，为接下来的Http处理流程中各种编程元素提供了容身之所。如果说将Spring上下文关联到Servlet容器中，是SpringMVC框架的第一个亮点，那么在请求转发流程中，SpringMVC对各种处理环节编程元素的抽象，就是另外一个独具匠心的亮点。</p>
<p>Struts2采取的是一种完全和Web容器隔离和解耦的事件机制。诸如Action对象、Result对象、Interceptor对象，这些都是完全脱离Servlet容器的编程元素。Struts2将数据流和事件处理完全剥离开来，从Http请求中读取数据后，下面的事件处理流程就只依赖于这些数据，而完全不知道有Web环境的存在。</p>
<p>反观SpringMVC，无论HandlerMapping对象、HandlerAdapter对象还是View对象，这些核心的接口所定义的方法中，HttpServletRequest和HttpServletResponse对象都是直接作为方法的参数出现的。这也就意味着，框架的设计者，直接将SpringMVC框架和容器绑定到了一起。或者说，整个SpringMVC框架，都是依托着Servlet容器元素来设计的。下面就来看一下，源码中是如何体现这一点的。</p>
<p><strong>1.请求转发的入口</strong></p>
<p>就像任何一个注册在容器中的Servlet一样，DispatcherServlet也是通过自己的service()方法来接收和转发Http请求到具体的doGet()或doPost()这些方法的。以一次典型的GET请求为例，经过HttpServlet基类中service()方法的委派，请求会被转发到doGet()方法中。doGet()方法，在DispatcherServlet的父类FrameworkServlet类中被覆写。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">		<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">	processRequest(request, response);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，这里只是简单的转发到processRequest()这个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">		<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">	<span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">	Throwable failureCause = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="comment">// Expose current LocaleResolver and request as LocaleContext.</span></div><div class="line">	LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</div><div class="line">	LocaleContextHolder.setLocaleContext(buildLocaleContext(request), <span class="keyword">this</span>.threadContextInheritable);</div><div class="line"></div><div class="line">	<span class="comment">// Expose current RequestAttributes to current thread.</span></div><div class="line">	RequestAttributes previousRequestAttributes = RequestContextHolder.getRequestAttributes();</div><div class="line">	ServletRequestAttributes requestAttributes = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">if</span> (previousRequestAttributes == <span class="keyword">null</span> || previousRequestAttributes.getClass().equals(ServletRequestAttributes.class)) &#123;</div><div class="line">		requestAttributes = <span class="keyword">new</span> ServletRequestAttributes(request);</div><div class="line">		RequestContextHolder.setRequestAttributes(requestAttributes, <span class="keyword">this</span>.threadContextInheritable);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">		logger.trace(<span class="string">"Bound request context to thread: "</span> + request);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		doService(request, response);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (ServletException ex) &#123;</div><div class="line">		failureCause = ex;</div><div class="line">		<span class="keyword">throw</span> ex;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">		failureCause = ex;</div><div class="line">		<span class="keyword">throw</span> ex;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">		failureCause = ex;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">finally</span> &#123;</div><div class="line">		<span class="comment">// Clear request attributes and reset thread-bound context.</span></div><div class="line">		LocaleContextHolder.setLocaleContext(previousLocaleContext, <span class="keyword">this</span>.threadContextInheritable);</div><div class="line">		<span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</div><div class="line">			RequestContextHolder.setRequestAttributes(previousRequestAttributes, <span class="keyword">this</span>.threadContextInheritable);</div><div class="line">			requestAttributes.requestCompleted();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">			logger.trace(<span class="string">"Cleared thread-bound request context: "</span> + request);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">			<span class="keyword">if</span> (failureCause != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">this</span>.logger.debug(<span class="string">"Could not complete request"</span>, failureCause);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">this</span>.logger.debug(<span class="string">"Successfully completed request"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.publishEvents) &#123;</div><div class="line">			<span class="comment">// Whether or not we succeeded, publish an event.</span></div><div class="line">			<span class="keyword">long</span> processingTime = System.currentTimeMillis() - startTime;</div><div class="line">			<span class="keyword">this</span>.webApplicationContext.publishEvent(</div><div class="line">					<span class="keyword">new</span> ServletRequestHandledEvent(<span class="keyword">this</span>,</div><div class="line">							request.getRequestURI(), request.getRemoteAddr(),</div><div class="line">							request.getMethod(), getServletConfig().getServletName(),</div><div class="line">							WebUtils.getSessionId(request), getUsernameForRequest(request),</div><div class="line">							processingTime, failureCause));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码有点长，理解的要点是以doService()方法为区隔，前一部分是将当前请求的Locale对象和属性，分别设置到LocaleContextHolder和RequestContextHolder这两个抽象类中的ThreadLocal对象中，也就是分别将这两个东西和请求线程做了绑定。在doService()处理结束后，再恢复回请求前的LocaleContextHolder和RequestContextHolder，也即解除线程绑定。每次请求处理结束后，容器上下文都发布了一个ServletRequestHandledEvent事件，你可以注册监听器来监听该事件。</p>
<p>可以看到，processRequest()方法只是做了一些线程安全的隔离，真正的请求处理，发生在doService()方法中。点开FrameworkServlet类中的doService()方法。</p>
<p>protected abstract void doService(HttpServletRequest request, HttpServletResponse response)<br>        throws Exception;<br>又是一个抽象方法，这也是SpringMVC类设计中的惯用伎俩：父类抽象处理流程，子类给予具体的实现。真正的实现是在DispatcherServlet类中。</p>
<p>让我们接着看DispatcherServlet类中实现的doService()方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">		String requestUri = urlPathHelper.getRequestUri(request);</div><div class="line">		logger.debug(<span class="string">"DispatcherServlet with name '"</span> + getServletName() + <span class="string">"' processing "</span> + request.getMethod() +</div><div class="line">				<span class="string">" request for ["</span> + requestUri + <span class="string">"]"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></div><div class="line">	<span class="comment">// to be able to restore the original attributes after the include.</span></div><div class="line">	Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</div><div class="line">		logger.debug(<span class="string">"Taking snapshot of request attributes before include"</span>);</div><div class="line">		attributesSnapshot = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">		Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</div><div class="line">		<span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</div><div class="line">			String attrName = (String) attrNames.nextElement();</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(<span class="string">"org.springframework.web.servlet"</span>)) &#123;</div><div class="line">				attributesSnapshot.put(attrName, request.getAttribute(attrName));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Make framework objects available to handlers and view objects.</span></div><div class="line">	request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</div><div class="line">	request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</div><div class="line">	request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</div><div class="line">	request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</div><div class="line"></div><div class="line">	FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</div><div class="line">	<span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</div><div class="line">		request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</div><div class="line">	&#125;</div><div class="line">	request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</div><div class="line">	request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		doDispatch(request, response);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">finally</span> &#123;</div><div class="line">		<span class="comment">// Restore the original attribute snapshot, in case of an include.</span></div><div class="line">		<span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</div><div class="line">			restoreAttributesAfterInclude(request, attributesSnapshot);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>几个requet.setAttribute()方法的调用，将前面在初始化流程中实例化的对象设置到http请求的属性中，供下一步处理使用，其中有容器的上下文对象、本地化解析器等SpringMVC特有的编程元素。不同于Struts2中的ValueStack，SpringMVC的数据并没有从HttpServletRequest对象中抽离出来再存进另外一个编程元素，这也跟SpringMVC的设计思想有关。因为从一开始，SpringMVC的设计者就认为，不应该将请求处理过程和Web容器完全隔离。</p>
<p>所以，你可以看到，真正发生请求转发的方法doDispatch()中，它的参数是HttpServletRequest和HttpServletResponse对象。这给我们传递的意思也很明确，从request中能获取到一切请求的数据，从response中，我们又可以往服务器端输出任何响应，Http请求的处理，就应该围绕这两个对象来设计。我们不妨可以将SpringMVC这种设计方案，是从Struts2的过度设计中吸取教训，而向Servlet编程的一种回归和简化。</p>
<p><strong>2.请求转发的抽象描述</strong></p>
<p>接下来让我们看看doDispatch()这个整个请求转发流程中最核心的方法。DispatcherServlet所接收的Http请求，经过层层转发，最终都是汇总到这个方法中来进行最后的请求分发和处理。doDispatch()这个方法的内容，就是SpringMVC整个框架的精华所在。它通过高度抽象的接口，描述出了一个MVC（Model-View-Controller）设计模式的实现方案。Model、View、Controller三种层次的编程元素，在SpringMVC中都有大量的实现类，各种处理细节也是千差万别。但是，它们最后都是由，也都能由doDispatch()方法来统一描述，这就是接口和抽象的威力，万变不离其宗。</p>
<p>先来看一下doDispatch()方法的庐山真面目。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	HttpServletRequest processedRequest = request;</div><div class="line">	HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> interceptorIndex = -<span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		ModelAndView mv;</div><div class="line">		<span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			processedRequest = checkMultipart(request);</div><div class="line"></div><div class="line">			<span class="comment">// Determine handler for the current request.</span></div><div class="line">			mappedHandler = getHandler(processedRequest, <span class="keyword">false</span>);</div><div class="line">			<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;</div><div class="line">				noHandlerFound(processedRequest, response);</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// Determine handler adapter for the current request.</span></div><div class="line">			HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</div><div class="line"></div><div class="line">			<span class="comment">// Process last-modified header, if supported by the handler.</span></div><div class="line">			String method = request.getMethod();</div><div class="line">			<span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</div><div class="line">			<span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</div><div class="line">				<span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</div><div class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">					String requestUri = urlPathHelper.getRequestUri(request);</div><div class="line">					logger.debug(<span class="string">"Last-Modified value for ["</span> + requestUri + <span class="string">"] is: "</span> + lastModified);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// Apply preHandle methods of registered interceptors.</span></div><div class="line">			HandlerInterceptor[] interceptors = mappedHandler.getInterceptors();</div><div class="line">			<span class="keyword">if</span> (interceptors != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;</div><div class="line">					HandlerInterceptor interceptor = interceptors[i];</div><div class="line">					<span class="keyword">if</span> (!interceptor.preHandle(processedRequest, response, mappedHandler.getHandler())) &#123;</div><div class="line">						triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, <span class="keyword">null</span>);</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">					interceptorIndex = i;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// Actually invoke the handler.</span></div><div class="line">			mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line"></div><div class="line">			<span class="comment">// Do we need view name translation?</span></div><div class="line">			<span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.hasView()) &#123;</div><div class="line">				mv.setViewName(getDefaultViewName(request));</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// Apply postHandle methods of registered interceptors.</span></div><div class="line">			<span class="keyword">if</span> (interceptors != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">					HandlerInterceptor interceptor = interceptors[i];</div><div class="line">					interceptor.postHandle(processedRequest, response, mappedHandler.getHandler(), mv);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (ModelAndViewDefiningException ex) &#123;</div><div class="line">			logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, ex);</div><div class="line">			mv = ex.getModelAndView();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">			Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</div><div class="line">			mv = processHandlerException(processedRequest, response, handler, ex);</div><div class="line">			errorView = (mv != <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Did the handler return a view to render?</span></div><div class="line">		<span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</div><div class="line">			render(mv, processedRequest, response);</div><div class="line">			<span class="keyword">if</span> (errorView) &#123;</div><div class="line">				WebUtils.clearErrorRequestAttributes(request);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</div><div class="line">						<span class="string">"': assuming HandlerAdapter completed request handling"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Trigger after-completion for successful outcome.</span></div><div class="line">		triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">		<span class="comment">// Trigger after-completion for thrown exception.</span></div><div class="line">		triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);</div><div class="line">		<span class="keyword">throw</span> ex;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Error err) &#123;</div><div class="line">		ServletException ex = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err);</div><div class="line">		<span class="comment">// Trigger after-completion for thrown exception.</span></div><div class="line">		triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);</div><div class="line">		<span class="keyword">throw</span> ex;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">finally</span> &#123;</div><div class="line">		<span class="comment">// Clean up any resources used by a multipart request.</span></div><div class="line">		<span class="keyword">if</span> (processedRequest != request) &#123;</div><div class="line">			cleanupMultipart(processedRequest);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>真是千呼万唤始出来，犹抱琵琶半遮面。我们在第一篇《SpringMVC源码剖析（一）- 从抽象和接口说起》中所描述的各种编程元素，依次出现在该方法中。HandlerMapping、HandlerAdapter、View这些接口的设计，我们在第一篇中已经讲过。现在我们来重点关注一下HandlerExecutionChain这个对象。</p>
<p>从上面的代码中，很明显可以看出一条线索，整个方法是围绕着如何获取HandlerExecutionChain对象，执行HandlerExecutionChain对象得到相应的视图对象，再对视图进行渲染这条主线来展开的。HandlerExecutionChain对象显得异常重要。</p>
<p>因为Http请求要进入SpringMVC的处理体系，必须由HandlerMapping接口的实现类映射Http请求，得到一个封装后的HandlerExecutionChain对象。再由HandlerAdapter接口的实现类来处理这个HandlerExecutionChain对象所包装的处理对象，来得到最后渲染的视图对象。</p>
<p>视图对象是用ModelAndView对象来描述的，名字已经非常直白，就是数据和视图，其中的数据，由HttpServletRequest的属性得到，视图就是由HandlerExecutionChain封装的处理对象处理后得到。当然HandlerExecutionChain中的拦截器列表HandlerInterceptor，会在处理过程的前后依次被调用，为处理过程留下充足的扩展点。</p>
<p>所有的SpringMVC框架元素，都是围绕着HandlerExecutionChain这个执行链来发挥效用。我们来看看，HandlerExecutionChain类的代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.web.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Object handler;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> HandlerInterceptor[] interceptors;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> List&lt;HandlerInterceptor&gt; interceptorList;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HandlerExecutionChain</span><span class="params">(Object handler)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>(handler, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HandlerExecutionChain</span><span class="params">(Object handler, HandlerInterceptor[] interceptors)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerExecutionChain) &#123;</div><div class="line">			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler;</div><div class="line">			<span class="keyword">this</span>.handler = originalChain.getHandler();</div><div class="line">			<span class="keyword">this</span>.interceptorList = <span class="keyword">new</span> ArrayList&lt;HandlerInterceptor&gt;();</div><div class="line">			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), <span class="keyword">this</span>.interceptorList);</div><div class="line">			CollectionUtils.mergeArrayIntoCollection(interceptors, <span class="keyword">this</span>.interceptorList);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">this</span>.handler = handler;</div><div class="line">			<span class="keyword">this</span>.interceptors = interceptors;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.handler;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptor</span><span class="params">(HandlerInterceptor interceptor)</span> </span>&#123;</div><div class="line">		initInterceptorList();</div><div class="line">		<span class="keyword">this</span>.interceptorList.add(interceptor);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(HandlerInterceptor[] interceptors)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (interceptors != <span class="keyword">null</span>) &#123;</div><div class="line">			initInterceptorList();</div><div class="line">			<span class="keyword">this</span>.interceptorList.addAll(Arrays.asList(interceptors));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initInterceptorList</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.interceptorList == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.interceptorList = <span class="keyword">new</span> ArrayList&lt;HandlerInterceptor&gt;();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.interceptors != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.interceptorList.addAll(Arrays.asList(<span class="keyword">this</span>.interceptors));</div><div class="line">			<span class="keyword">this</span>.interceptors = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> HandlerInterceptor[] getInterceptors() &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.interceptors == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.interceptorList != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.interceptors = <span class="keyword">this</span>.interceptorList.toArray(<span class="keyword">new</span> HandlerInterceptor[<span class="keyword">this</span>.interceptorList.size()]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.interceptors;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handler == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">"HandlerExecutionChain with no handler"</span>;</div><div class="line">		&#125;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		sb.append(<span class="string">"HandlerExecutionChain with handler ["</span>).append(<span class="keyword">this</span>.handler).append(<span class="string">"]"</span>);</div><div class="line">		<span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="keyword">this</span>.interceptorList)) &#123;</div><div class="line">			sb.append(<span class="string">" and "</span>).append(<span class="keyword">this</span>.interceptorList.size()).append(<span class="string">" interceptor"</span>);</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.interceptorList.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">				sb.append(<span class="string">"s"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个拦截器列表，一个执行对象，这个类的内容十分的简单，它蕴含的设计思想，却十分的丰富。</p>
<ul>
<li><p>拦截器组成的列表，在执行对象被调用的前后，会依次执行。这里可以看成是一个的AOP环绕通知，拦截器可以对处理对象随心所欲的进行处理和增强。这里明显是吸收了Struts2中拦截器的设计思想。这种AOP环绕式的扩展点设计，也几乎成为所有框架必备的内容。</p>
</li>
<li><p>实际的处理对象，即handler对象，是由Object对象来引用的。</p>
</li>
</ul>
<p>private final Object handler;<br>之所以要用一个java世界最基础的Object对象引用来引用这个handler对象，是因为连特定的接口也不希望绑定在这个handler对象上，从而使handler对象具有最大程度的选择性和灵活性。</p>
<p>我们常说，一个框架最高层次的抽象是接口，但是这里SpringMVC更进了一步。在最后的处理对象上面，SpringMVC没有对它做任何的限制，只要是java世界中的对象，都可以用来作为最后的处理对象，来生成视图。极端一点来说，你甚至可以将另外一个MVC框架集成到SpringMVC中来，也就是为什么SpringMVC官方文档中，居然还有集成其他表现层框架的内容。这一点，在所有表现层框架中，是独领风骚，冠绝群雄的。</p>
<p><strong>3.结语</strong></p>
<p>SpringMVC的成功，源于它对开闭原则的运用和遵守。也正因此，才使得整个框架具有如此强大的描述和扩展能力。这也许和SpringMVC出现和兴起的时间有关，正是经历了Struts1到Struts2这些Web开发领域MVC框架的更新换代，它的设计者才能站在前人的肩膀上。知道了如何将事情做的糟糕之后，你或许才知道如何将事情做得好。</p>
<p>希望在这个系列里面分享的SpringMVC源码阅读经验，能帮助读者们从更高的层次来审视SpringMVC框架的设计，也希望这里所描述的一些基本设计思想，能在你更深入的了解SpringMVC的细节时，对你有帮助。哲学才是唯一的、最终的武器，在一个框架的设计上，尤其是如此。经常地体会一个框架设计者的设计思想，对你更好的使用它，是有莫大的益处的。</p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> SpringMVC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DispatcherServlet请求转发的实现 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC源码剖析（五）-消息转换器HttpMessageConverter]]></title>
      <url>http://itliusir.com/2017/frame-springmvc5/</url>
      <content type="html"><![CDATA[<p>摘要:在SpringMVC中，可以使用@RequestBody和@ResponseBody两个注解，分别完成请求报文到对象和对象到响应报文的转换，底层这种灵活的消息转换机制，就是Spring3.x中新引入的HttpMessageConverter即消息转换器机制。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p><strong>Http请求的抽象</strong></p>
<p>还是回到请求-响应，也就是解析请求体，然后返回响应报文这个最基本的Http请求过程中来。我们知道，在servlet标准中，可以用javax.servlet.ServletRequest接口中的以下方法：</p>
<p>public ServletInputStream getInputStream() throws IOException;<br>来得到一个ServletInputStream。这个ServletInputStream中，可以读取到一个原始请求报文的所有内容。同样的，在javax.servlet.ServletResponse接口中，可以用以下方法：</p>
<p>public ServletOutputStream getOutputStream() throws IOException;<br>来得到一个ServletOutputStream，这个ServletOutputSteam，继承自java中的OutputStream，可以让你输出Http的响应报文内容。</p>
<p>让我们尝试着像SpringMVC的设计者一样来思考一下。我们知道，Http请求和响应报文本质上都是一串字符串，当请求报文来到java世界，它会被封装成为一个ServletInputStream的输入流，供我们读取报文。响应报文则是通过一个ServletOutputStream的输出流，来输出响应报文。</p>
<p>我们从流中，只能读取到原始的字符串报文，同样，我们往输出流中，也只能写原始的字符。而在java世界中，处理业务逻辑，都是以一个个有业务意义的对象为处理维度的，那么在报文到达SpringMVC和从SpringMVC出去，都存在一个字符串到java对象的阻抗问题。这一过程，不可能由开发者手工转换。我们知道，在Struts2中，采用了OGNL来应对这个问题，而在SpringMVC中，它是HttpMessageConverter机制。我们先来看两个接口。</p>
<p><strong>HttpInputMessage</strong></p>
<p>这个类是SpringMVC内部对一次Http请求报文的抽象，在HttpMessageConverter的read()方法中，有一个HttpInputMessage的形参，它正是SpringMVC的消息转换器所作用的受体“请求消息”的内部抽象，消息转换器从“请求消息”中按照规则提取消息，转换为方法形参中声明的对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.http;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpInputMessage</span> <span class="keyword">extends</span> <span class="title">HttpMessage</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">InputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>HttpOutputMessage</strong></p>
<p>这个类是SpringMVC内部对一次Http响应报文的抽象，在HttpMessageConverter的write()方法中，有一个HttpOutputMessage的形参，它正是SpringMVC的消息转换器所作用的受体“响应消息”的内部抽象，消息转换器将“响应消息”按照一定的规则写到响应报文中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.http;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpOutputMessage</span> <span class="keyword">extends</span> <span class="title">HttpMessage</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">OutputStream <span class="title">getBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>HttpMessageConverter</strong></p>
<p>对消息转换器最高层次的接口抽象，描述了一个消息转换器的一般特征，我们可以从这个接口中定义的方法，来领悟Spring3.x的设计者对这一机制的思考过程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.http.converter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpInputMessage;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">read</span><span class="params">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, HttpMessageNotReadableException;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T t, MediaType contentType, HttpOutputMessage outputMessage)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, HttpMessageNotWritableException;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>HttpMessageConverter接口的定义出现了成对的canRead()，read()和canWrite()，write()方法，MediaType是对请求的Media Type属性的封装。举个例子，当我们声明了下面这个处理方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/string"</span>, method=RequestMethod.POST)</div><div class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">String <span class="title">readString</span><span class="params">(@RequestBody String string)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Read string '"</span> + string + <span class="string">"'"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在SpringMVC进入readString方法前，会根据@RequestBody注解选择适当的HttpMessageConverter实现类来将请求参数解析到string变量中，具体来说是使用了StringHttpMessageConverter类，它的canRead()方法返回true，然后它的read()方法会从请求中读出请求参数，绑定到readString()方法的string变量中。</p>
<p>当SpringMVC执行readString方法后，由于返回值标识了@ResponseBody，SpringMVC将使用StringHttpMessageConverter的write()方法，将结果作为String值写入响应报文，当然，此时canWrite()方法返回true。</p>
<p><strong>RequestResponseBodyMethodProcessor</strong></p>
<p>将上述过程集中描述的一个类是org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor，这个类同时实现了HandlerMethodArgumentResolver和HandlerMethodReturnValueHandler两个接口。前者是将请求报文绑定到处理方法形参的策略接口，后者则是对处理方法返回值进行处理的策略接口。两个接口的源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.web.method.support;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.support.WebDataBinderFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.NativeWebRequest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter,</span></span></div><div class="line">                           ModelAndViewContainer mavContainer,</div><div class="line">                           NativeWebRequest webRequest,</div><div class="line">                           WebDataBinderFactory binderFactory) <span class="keyword">throws</span> Exception;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.web.method.support;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.NativeWebRequest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supportsReturnType</span><span class="params">(MethodParameter returnType)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue,</span></span></div><div class="line">                           MethodParameter returnType,</div><div class="line">                           ModelAndViewContainer mavContainer,</div><div class="line">                           NativeWebRequest webRequest) <span class="keyword">throws</span> Exception;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RequestResponseBodyMethodProcessor这个类，同时充当了方法参数解析和返回值处理两种角色。我们从它的源码中，可以找到上面两个接口的方法实现。</p>
<p>对HandlerMethodArgumentResolver接口的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> parameter.hasParameterAnnotation(RequestBody.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span></span></div><div class="line">        NativeWebRequest webRequest, WebDataBinderFactory binderFactory) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    Object argument = readWithMessageConverters(webRequest, parameter, parameter.getGenericParameterType());</div><div class="line"></div><div class="line">    String name = Conventions.getVariableNameForParameter(parameter);</div><div class="line">    WebDataBinder binder = binderFactory.createBinder(webRequest, argument, name);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (argument != <span class="keyword">null</span>) &#123;</div><div class="line">        validate(binder, parameter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> argument;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>对HandlerMethodReturnValueHandler接口的实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsReturnType</span><span class="params">(MethodParameter returnType)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> returnType.getMethodAnnotation(ResponseBody.class) != <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span></div><div class="line">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</div><div class="line">        <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException &#123;</div><div class="line"></div><div class="line">    mavContainer.setRequestHandled(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</div><div class="line">        writeWithMessageConverters(returnValue, returnType, webRequest);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看完上面的代码，整个HttpMessageConverter消息转换的脉络已经非常清晰。因为两个接口的实现，分别是以是否有@RequestBody和@ResponseBody为条件，然后分别调用HttpMessageConverter来进行消息的读写。</p>
<p>如果你想问，怎么样跟踪到RequestResponseBodyMethodProcessor中，请你按照前面几篇博文的思路，然后到这里spring-mvc-showcase下载源码回来，对其中HttpMessageConverter相关的例子进行debug，只要你肯下功夫，相信你一定会有属于自己的收获的。</p>
<ul>
<li><strong>思考</strong></li>
</ul>
<p>张小龙在谈微信的本质时候说：“微信只是个平台，消息在其中流转”。在我们对SpringMVC源码分析的过程中，我们可以从HttpMessageConverter机制中领悟到类似的道理。在SpringMVC的设计者眼中，一次请求报文和一次响应报文，分别被抽象为一个请求消息HttpInputMessage和一个响应消息HttpOutputMessage。</p>
<p>处理请求时，由合适的消息转换器将请求报文绑定为方法中的形参对象，在这里，同一个对象就有可能出现多种不同的消息形式，比如json和xml。同样，当响应请求时，方法的返回值也同样可能被返回为不同的消息形式，比如json和xml。</p>
<p>在SpringMVC中，针对不同的消息形式，我们有不同的HttpMessageConverter实现类来处理各种消息形式。但是，只要这些消息所蕴含的“有效信息”是一致的，那么各种不同的消息转换器，都会生成同样的转换结果。至于各种消息间解析细节的不同，就被屏蔽在不同的HttpMessageConverter实现类中了。</p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> SpringMVC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HttpMessageConverter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC源码剖析（三）- DispatcherServlet的初始化流程]]></title>
      <url>http://itliusir.com/2017/frame-springmvc3/</url>
      <content type="html"><![CDATA[<p>摘要:在我们第一次学Servlet编程，学java web的时候，还没有那么多框架。我们开发一个简单的功能要做的事情很简单，就是继承HttpServlet，根据需要重写一下doGet，doPost方法，跳转到我们定义好的jsp页面。Servlet类编写完之后在web.xml里注册这个Servlet类。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>除此之外，没有其他了。我们启动web服务器，在浏览器中输入地址，就可以看到浏览器上输出我们写好的页面。为了更好的理解上面这个过程，你需要学习关于Servlet生命周期的三个阶段，就是所谓的“init-service-destroy”。</p>
<p>以上的知识，我觉得对于你理解SpringMVC的设计思想，已经足够了。SpringMVC当然可以称得上是一个复杂的框架，但是同时它又遵循Servlet世界里最简单的法则，那就是“init-service-destroy”。我们要分析SpringMVC的初始化流程，其实就是分析DispatcherServlet类的init()方法，让我们带着这种单纯的观点，打开DispatcherServlet的源码一窥究竟吧。</p>
<p><strong>1.<init-param>配置元素读取</init-param></strong></p>
<p>用Eclipse IDE打开DispatcherServlet类的源码，ctrl+T看一下。</p>
<p>DispatcherServlet类的初始化入口方法init()定义在HttpServletBean这个父类中，HttpServletBean类作为一个直接继承于HttpServlet类的类，覆写了HttpServlet类的init()方法，实现了自己的初始化行为。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">			logger.debug(<span class="string">"Initializing servlet '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Set bean properties from init parameters.</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			PropertyValues pvs = <span class="keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="keyword">this</span>.requiredProperties);</div><div class="line">			BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="keyword">this</span>);</div><div class="line">			ResourceLoader resourceLoader = <span class="keyword">new</span> ServletContextResourceLoader(getServletContext());</div><div class="line">			bw.registerCustomEditor(Resource.class, <span class="keyword">new</span> ResourceEditor(resourceLoader, <span class="keyword">this</span>.environment));</div><div class="line">			initBeanWrapper(bw);</div><div class="line">			bw.setPropertyValues(pvs, <span class="keyword">true</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">			logger.error(<span class="string">"Failed to set bean properties on servlet '"</span> + getServletName() + <span class="string">"'"</span>, ex);</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Let subclasses do whatever initialization they like.</span></div><div class="line">		initServletBean();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">			logger.debug(<span class="string">"Servlet '"</span> + getServletName() + <span class="string">"' configured successfully"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>这里的initServletBean()方法在HttpServletBean类中是一个没有任何实现的空方法，它的目的就是留待子类实现自己的初始化逻辑，也就是我们常说的模板方法设计模式。SpringMVC在此生动的运用了这个模式，init()方法就是模版方法模式中的模板方法，SpringMVC真正的初始化过程，由子类FrameworkServlet中覆写的initServletBean()方法触发。</p>
<p>再看一下init()方法内被try,catch块包裹的代码，里面涉及到BeanWrapper，PropertyValues，ResourceEditor这些Spring内部非常底层的类。要深究具体代码实现上面的细节，需要对Spring框架源码具有相当深入的了解。我们这里先避繁就简，从代码效果和设计思想上面来分析这段try,catch块内的代码所做的事情：</p>
<p>注册一个字符串到资源文件的编辑器，让Servlet下面的<init-param>配置元素可以使用形如“classpath:”这种方式指定SpringMVC框架bean配置文件的来源。<br>将web.xml中在DispatcherServlet这个Servlet下面的<init-param>配置元素利用JavaBean的方式（即通过setter方法）读取到DispatcherServlet中来。<br>这两点，我想通过下面一个例子来说明一下。</init-param></init-param></p>
<p>我在web.xml中注册的DispatcherServlet配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- springMVC配置开始 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>appServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- springMVC配置结束 --&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以看到，我注册了一个名为contextConfigLocation的<init-param>元素，其值为“classpath:spring/spring-servlet.xml”，这也是大家常常用来指定SpringMVC配置文件路径的方法。上面那段try,catch块包裹的代码发挥的作用，一个是将“classpath:spring/spring-servlet.xml”这段字符串转换成classpath路径下的一个资源文件，供框架初始化读取配置元素。在我的工程中是在spring文件夹下面的配置文件spring-servlet.xml。</init-param></p>
<p>另外一个作用，就是将contextConfigLocation的值读取出来，然后通过setContextConfigLocation()方法设置到DispatcherServlet中，这个setContextConfigLocation()方法是在FrameworkServlet类中定义的，也就是上面继承类图中DispatcherServlet的直接父类。</p>
<p>我们在setContextConfigLocation()方法上面打上一个断点，启动web工程，就可以看到其classpath。</p>
<p>HttpServletBean类的作者是大名鼎鼎的Spring之父Rod Johnson。作为POJO编程哲学的大师，他在HttpServletBean这个类的设计中，运用了依赖注入思想完成了<init-param>配置元素的读取。他抽离出HttpServletBean这个类的目的也在于此，就是“以依赖注入的方式来读取Servlet类的<init-param>配置信息”，而且这里很明显是一种setter注入。</init-param></init-param></p>
<p>明白了HttpServletBean类的设计思想，我们也就知道可以如何从中获益。具体来说，我们继承HttpServletBean类（就像DispatcherServlet做的那样），在类中定义一个属性，为这个属性加上setter方法后，我们就可以在<init-param>元素中为其定义值。在类被初始化后，值就会被注入进来，我们可以直接使用它，避免了样板式的getInitParameter()方法的使用，而且还免费享有Spring中资源编辑器的功能，可以在web.xml中，通过“classpath:”直接指定类路径下的资源文件。</init-param></p>
<p>注意，虽然SpringMVC本身为了后面初始化上下文的方便，使用了字符串来声明和设置contextConfigLocation参数，但是将其声明为Resource类型，同样能够成功获取。鼓励读者们自己继承HttpServletBean写一个测试用的Servlet类，并设置一个参数来调试一下，这样能够帮助你更好的理解获取配置参数的过程。</p>
<p><strong>2.容器上下文的建立</strong></p>
<p>上一篇文章中提到过，SpringMVC使用了Spring容器来容纳自己的配置元素，拥有自己的bean容器上下文。在SpringMVC初始化的过程中，非常关键的一步就是要建立起这个容器上下文，而这个建立上下文的过程，发生在FrameworkServlet类中，由上面init()方法中的initServletBean()方法触发。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		getServletContext().log(<span class="string">"Initializing Spring FrameworkServlet '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</div><div class="line">			<span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization started"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</div><div class="line">			initFrameworkServlet();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (ServletException ex) &#123;</div><div class="line">			<span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">			<span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</div><div class="line">			<span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</div><div class="line">			<span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization completed in "</span> +</div><div class="line">					elapsedTime + <span class="string">" ms"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>initFrameworkServlet()方法是一个没有任何实现的空方法，除去一些样板式的代码，那么这个initServletBean()方法所做的事情已经非常明白：</p>
<p>this.webApplicationContext = initWebApplicationContext();<br>这一句简单直白的代码，道破了FrameworkServlet这个类，在SpringMVC类体系中的设计目的，它是 用来抽离出建立 WebApplicationContext 上下文这个过程的。<br>initWebApplicationContext()方法，封装了建立Spring容器上下文的整个过程，方法内的逻辑如下：</p>
<p>获取由ContextLoaderListener初始化并注册在ServletContext中的根上下文，记为rootContext<br>如果webApplicationContext已经不为空，表示这个Servlet类是通过编程式注册到容器中的（Servlet 3.0+中的ServletContext.addServlet() ），上下文也由编程式传入。若这个传入的上下文还没被初始化，将rootContext上下文设置为它的父上下文，然后将其初始化，否则直接使用。<br>通过wac变量的引用是否为null，判断第2步中是否已经完成上下文的设置（即上下文是否已经用编程式方式传入），如果wac==null成立，说明该Servlet不是由编程式注册到容器中的。此时以contextAttribute属性的值为键，在ServletContext中查找上下文，查找得到，说明上下文已经以别的方式初始化并注册在contextAttribute下，直接使用。<br>检查wac变量的引用是否为null，如果wac==null成立，说明2、3两步中的上下文初始化策略都没成功，此时调用createWebApplicationContext(rootContext)，建立一个全新的以rootContext为父上下文的上下文，作为SpringMVC配置元素的容器上下文。大多数情况下我们所使用的上下文，就是这个新建的上下文。<br>以上三种初始化上下文的策略，都会回调onRefresh(ApplicationContext context)方法（回调的方式根据不同策略有不同），onRefresh方法在DispatcherServlet类中被覆写，以上面得到的上下文为依托，完成SpringMVC中默认实现类的初始化。<br>最后，将这个上下文发布到ServletContext中，也就是将上下文以一个和Servlet类在web.xml中注册名字有关的值为键，设置为ServletContext的一个属性。你可以通过改变publishContext的值来决定是否发布到ServletContext中，默认为true。<br>以上面6点跟踪FrameworkServlet类中的代码，可以比较清晰的了解到整个容器上下文的建立过程，也就能够领会到FrameworkServlet类的设计目的，它是用来建立一个和Servlet关联的Spring容器上下文，并将其注册到ServletContext中的。跳脱开SpringMVC体系，我们也能通过继承FrameworkServlet类，得到与Spring容器整合的好处，FrameworkServlet和HttpServletBean一样，是一个可以独立使用的类。整个SpringMVC设计中，处处体现开闭原则，这里显然也是其中一点。</p>
<p><strong>3.初始化SpringMVC默认实现类</strong></p>
<p>初始化流程在FrameworkServlet类中流转，建立了上下文后，通过onRefresh(ApplicationContext context)方法的回调，进入到DispatcherServlet类中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		initStrategies(context);</div><div class="line">	&#125;</div><div class="line">DispatcherServlet类覆写了父类FrameworkServlet中的onRefresh(ApplicationContext context)方法，提供了SpringMVC各种编程元素的初始化。当然这些编程元素，都是作为容器上下文中一个个bean而存在的。具体的初始化策略，在initStrategies()方法中封装。</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		initMultipartResolver(context);</div><div class="line">		initLocaleResolver(context);</div><div class="line">		initThemeResolver(context);</div><div class="line">		initHandlerMappings(context);</div><div class="line">		initHandlerAdapters(context);</div><div class="line">		initHandlerExceptionResolvers(context);</div><div class="line">		initRequestToViewNameTranslator(context);</div><div class="line">		initViewResolvers(context);</div><div class="line">		initFlashMapManager(context);</div><div class="line">	&#125;</div><div class="line">我们以其中initHandlerMappings(context)方法为例，分析一下这些SpringMVC编程元素的初始化策略，其他的方法，都是以类似的策略初始化的。</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMappings</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.handlerMappings = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerMappings) &#123;</div><div class="line">			<span class="comment">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></div><div class="line">			Map&lt;String, HandlerMapping&gt; matchingBeans =</div><div class="line">					BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">			<span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</div><div class="line">				<span class="keyword">this</span>.handlerMappings = <span class="keyword">new</span> ArrayList&lt;HandlerMapping&gt;(matchingBeans.values());</div><div class="line">				<span class="comment">// We keep HandlerMappings in sorted order.</span></div><div class="line">				OrderComparator.sort(<span class="keyword">this</span>.handlerMappings);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</div><div class="line">				<span class="keyword">this</span>.handlerMappings = Collections.singletonList(hm);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</div><div class="line">				<span class="comment">// Ignore, we'll add a default HandlerMapping later.</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Ensure we have at least one HandlerMapping, by registering</span></div><div class="line">		<span class="comment">// a default HandlerMapping if no other mappings are found.</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"No HandlerMappings found in servlet '"</span> + getServletName() + <span class="string">"': using default"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>detectAllHandlerMappings变量默认为true，所以在初始化HandlerMapping接口默认实现类的时候，会把上下文中所有HandlerMapping类型的Bean都注册在handlerMappings这个List变量中。如果你手工将其设置为false，那么将尝试获取名为handlerMapping的Bean，新建一个只有一个元素的List，将其赋给handlerMappings。如果经过上面的过程，handlerMappings变量仍为空，那么说明你没有在上下文中提供自己HandlerMapping类型的Bean定义。此时，SpringMVC将采用默认初始化策略来初始化handlerMappings。</p>
<p>点进去getDefaultStrategies看一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="keyword">protected</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getDefaultStrategies</span><span class="params">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</div><div class="line">		String key = strategyInterface.getName();</div><div class="line">		String value = defaultStrategies.getProperty(key);</div><div class="line">		<span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">			String[] classNames = StringUtils.commaDelimitedListToStringArray(value);</div><div class="line">			List&lt;T&gt; strategies = <span class="keyword">new</span> ArrayList&lt;T&gt;(classNames.length);</div><div class="line">			<span class="keyword">for</span> (String className : classNames) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Class&lt;?&gt; clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());</div><div class="line">					Object strategy = createDefaultStrategy(context, clazz);</div><div class="line">					strategies.add((T) strategy);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">							<span class="string">"Could not find DispatcherServlet's default strategy class ["</span> + className +</div><div class="line">									<span class="string">"] for interface ["</span> + key + <span class="string">"]"</span>, ex);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (LinkageError err) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">							<span class="string">"Error loading DispatcherServlet's default strategy class ["</span> + className +</div><div class="line">									<span class="string">"] for interface ["</span> + key + <span class="string">"]: problem with class file or dependent class"</span>, err);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> strategies;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;T&gt;();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>它是一个范型的方法，承担所有SpringMVC编程元素的默认初始化策略。方法的内容比较直白，就是以传递类的名称为键，从defaultStrategies这个Properties变量中获取实现类，然后反射初始化。</p>
<p>需要说明一下的是defaultStrategies变量的初始化，它是在DispatcherServlet的静态初始化代码块中加载的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Properties defaultStrategies;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		<span class="comment">// Load default strategy implementations from properties file.</span></div><div class="line">		<span class="comment">// This is currently strictly internal and not meant to be customized</span></div><div class="line">		<span class="comment">// by application developers.</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet.class);</div><div class="line">			defaultStrategies = PropertiesLoaderUtils.loadProperties(resource);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not load 'DispatcherServlet.properties': "</span> + ex.getMessage());</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>private static final String DEFAULT_STRATEGIES_PATH = “DispatcherServlet.properties”;<br>这个DispatcherServlet.properties里面，以键值对的方式，记录了SpringMVC默认实现类，它在spring-webmvc-3.1.3.RELEASE.jar这个jar包内，在org.springframework.web.servlet包里面。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># Default implementation classes for DispatcherServlet's strategy interfaces.</div><div class="line"># Used as fallback when no matching beans are found in the DispatcherServlet context.</div><div class="line"># Not meant to be customized by application developers.</div><div class="line"></div><div class="line">org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</div><div class="line"></div><div class="line">org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver</div><div class="line"></div><div class="line">org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</div><div class="line">	org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</div><div class="line"></div><div class="line">org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\</div><div class="line">	org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\</div><div class="line">	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</div><div class="line"></div><div class="line">org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\</div><div class="line">	org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\</div><div class="line">	org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</div><div class="line"></div><div class="line">org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</div><div class="line"></div><div class="line">org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver</div><div class="line"></div><div class="line">org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager</div></pre></td></tr></table></figure></p>
<p>至此，我们分析完了initHandlerMappings(context)方法的执行过程，其他的初始化过程与这个方法非常类似。所有初始化方法执行完后，SpringMVC正式完成初始化，静静等待Web请求的到来。</p>
<p><strong>4.总结</strong></p>
<p>回顾整个SpringMVC的初始化流程，我们看到，通过HttpServletBean、FrameworkServlet、DispatcherServlet三个不同的类层次，SpringMVC的设计者将三种不同的职责分别抽象，运用模版方法设计模式分别固定在三个类层次中。其中HttpServletBean完成的是<init-param>配置元素的依赖注入，FrameworkServlet完成的是容器上下文的建立，DispatcherServlet完成的是SpringMVC具体编程元素的初始化策略。</init-param></p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> SpringMVC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DispatcherServlet的初始化流程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker镜像的删除]]></title>
      <url>http://itliusir.com/2017/Docker-images-rm/</url>
      <content type="html"><![CDATA[<p>摘要:很多人碰到过种种原因无法删除docker镜像，以下是关于删除镜像的顺序：<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>1.停止所有的container，这样才能够删除其中的images<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop $(docker ps -a -q)</div></pre></td></tr></table></figure></p>
<p>2.查看当前有些什么images<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure></p>
<p>3.删除所有containers<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm $(docker ps -a -q)</div></pre></td></tr></table></figure></p>
<p>4.查看containers<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure></p>
<p>5.删除某个镜像<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker rmi 你的imageid或者</div><div class="line">docker rmi 你的imagename</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker镜像 </tag>
            
            <tag> docker镜像删除 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[No mapping found for HTTP request with URI… in Dis]]></title>
      <url>http://itliusir.com/2017/frame-springmvc-bug/</url>
      <content type="html"><![CDATA[<p>摘要:No mapping found for HTTP request with URI [json2.js] in DispatcherServlet with name ‘springmvc’<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>今天下午用ie8 使用json时候发现需要导入json官方包json2.js<br>下载地址:<a href="http://download.csdn.net/detail/wqr1128/9042071" target="_blank" rel="external">http://download.csdn.net/detail/wqr1128/9042071</a><br>导入后发现后台报错<br>No mapping found for HTTP request with URI [json2.js] in DispatcherServlet with name ‘springmvc’<br>网上找了一些方案都没解决  后来在 Stack Overflow上找到了解决办法：<br>在springmvc-servlet.xml里加入就ok了<br>|————————————————分割线——————————————————|<br>在springMVC-servlet.xml中配置后，会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。</p>
<p>一般Web应用服务器默认的Servlet名称是”default”，因此DefaultServletHttpRequestHandler可以找到它。如果你所有的Web应用服务器的默认Servlet名称不是”default”，则需要通过default-servlet-name属性显示指定：</p>
<p>这个标签主要还是为了适应REST风格</p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> SpringMVC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> No mapping found for HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC源码剖析（二）- DispatcherServlet的前世今生]]></title>
      <url>http://itliusir.com/2017/frame-springmvc2/</url>
      <content type="html"><![CDATA[<p>摘要:上一篇文章《SpringMVC源码剖析（一）- 从抽象和接口说起》中，我介绍了一次典型的SpringMVC请求处理过程中，相继粉墨登场的各种核心类和接口。我刻意忽略了源码中的处理细节，只列出最简单的类甚至是接口类，目的就是让大家先从最高层次的抽象意义上来审视SpringMVC这个框架；<br>我也刻意将SpringMVC和Struts2做对比，目的是让大家看到，SpringMVC究竟吸取了Sturts2设计思想中的哪些精华，又弥补了它的哪些遗憾。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>DispatcherServlet作为SpringMVC的核心之中的核心类，再怎么强调它的重要性也不为过。SpringMVC所有的核心类和接口，都密集地出现在DispatcherServlet的源码中，SpringMVC源码剖析，很大程度上可以说也是在剖析DispatcherServlet这一个类。这一篇文章里，我先说几点关于DispatcherServlet的前世今生，希望能帮助你更好的理解它。</p>
<p><strong>1.对扩展开放，对修改封闭</strong></p>
<p>SpringMVC是一个基于著名的Open-Closed，即开闭原则进行设计的框架。在Spring官方文档里面关于SpringMVC的介绍开宗明义地进行了说明：</p>
<p>A key design principle in Spring Web MVC and in Spring in general is the “Open for extension,closed for modification” principle.<br>开闭原则是一个很宽泛的原则，具体体现到DispatcherServlet的源码中，我们可以大致摸得到一些线索：</p>
<p>类中所有的变量声明，几乎都以接口的形式给出，并没有绑定在具体的实现类上。<br>使用模版方法模式，在父类中对基础行为进行定义，让子类实现模版方法扩展行为。<br>其中第一点，在一个框架的设计中尤为重要，也是贯彻开闭原则最重要的一点。因为当你通过一些高层次的接口或者抽象类，将一个类完成的逻辑或流程编写完成后（具体点说，是通过一个接口的引用调用接口方法），整个逻辑或流程的功能就被确实的在源码中固定下来了。可是这时，这些接口或抽象类的具体实现者是谁，还没有固定！这就给了你的系统或框架近乎无限的扩展性，因为你可以任意安排和实现这些类。</p>
<p>我认为，面向对象设计的精髓，是对现实世界中“行为和契约”的描述。这个“行为和契约”，体现在接口和抽象类的方法声明中。软件设计师要用面向对象的眼光去观察和抽象这个世界中的事物，这里的事物可以是一些商业逻辑、可以是一些处理流程，然后用高层次的接口去描述这些行为和契约。当你在越抽象的层次上将这些行为和契约描述清楚后，你所设计的系统就是越符合开闭原则的。</p>
<p>SpringMVC框架在面向对象设计上，做出了绝佳的示范。它通过高度抽象的接口，描述出了一次请求处理的流程，从而让整个框架从一开始就是符合开闭原则的。同时它也提供了这些接口的一系列默认实现类，让你不需要很复杂的配置，就能很好的使用SpringMVC进行开发。抽象的确是个利器，但是框架绝不能运行在空中楼阁中，SpringMVC提供的的这一系列默认实现类必须要有容身之所。聪明的你可能早已想到：Spring IOC容器。这就引出了我要说的第二点。</p>
<p><strong>2.配置元素的对象化</strong></p>
<p>所有的框架，都需要有这样一个功能，叫做：配置元素的对象化。因为几乎所有的框架，都将配置元素集中到外部的xml配置文件中，然后在框架的初始化流程中，对这些配置文件进行解析，再变成java世界中的一个个对象供框架使用，这整个过程，可以被称为配置元素的对象化。为什么要有配置文件呢？这个问题的回答也是很简单，因为没有人会想要使用一个配置散布在框架中各个java类源码里面的框架。框架也不允许使用者这样子做，因为框架在发布的时候，提供的是一个个jar包文件，jar包内是已经编译好的class文件。配置文件由使用者外部提供，框架对它进行解析，使用者能得到集中配置的好处，框架也乐于这样子，可以说是合情合理。</p>
<p>那么作为Spring产品族的新成员，SpringMVC在设计的时候，相信设计者们不做它想，这一个“配置元素的对象化”功能既然不可避免，那么使用Spring IOC容器，通过bean配置文件来配置SpringMVC，绝对是不二之选。不可能像Struts2一样，内部再搞一个别的容器，因为Spring容器本身已经是被高度设计，而且已经在java世界获得巨大成功。从推广的角度上来说，如果对spring容器的所有知识，都可以完整的应用到SpringMVC，那么对于开发者无疑是一个极大的吸引力。</p>
<p>剩下的问题就只有：到底该如何将Spring容器和SpringMVC的初始化过程整合起来呢？</p>
<p>答案就是WebApplicationContext接口，更具体点说，是XmlWebApplicationContext这个Spring上下文实现类。SpringMVC也使用了这一个为了将Spring容器和Web环境整合而特意设计的Spring上下文类。我们打开WebApplicationContext的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.web.context;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebApplicationContext</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span> </span>&#123;</div><div class="line"></div><div class="line">	String ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE = WebApplicationContext.class.getName() + <span class="string">".ROOT"</span>;</div><div class="line"></div><div class="line">	String SCOPE_REQUEST = <span class="string">"request"</span>;</div><div class="line"></div><div class="line">	String SCOPE_SESSION = <span class="string">"session"</span>;</div><div class="line"></div><div class="line">	String SCOPE_GLOBAL_SESSION = <span class="string">"globalSession"</span>;</div><div class="line"></div><div class="line">	String SCOPE_APPLICATION = <span class="string">"application"</span>;</div><div class="line"></div><div class="line">	String SERVLET_CONTEXT_BEAN_NAME = <span class="string">"servletContext"</span>;</div><div class="line"></div><div class="line">	String CONTEXT_PARAMETERS_BEAN_NAME = <span class="string">"contextParameters"</span>;</div><div class="line"></div><div class="line">	String CONTEXT_ATTRIBUTES_BEAN_NAME = <span class="string">"contextAttributes"</span>;</div><div class="line"></div><div class="line">	<span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现它是继承于ApplicationContext这个普通Spring容器所使用的上下文接口类，除了一些常量的声明，只多了一个可以获取到ServletContext的getServletContext()方法。回到上面提到的“行为和契约的描述”上，我们可以大胆的断言，Spring容器和Web环境的整合，是在ServletContext上做文章。</p>
<p>打开所有使用了Spring的Web项目的web.xml文件，必定有这样一段配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<p>ContextLoaderListener实现了ServletContextListener接口，在Servlet容器启动的时候，会初始化一个WebApplicationContext的实现类，并将其作为ServletContext的一个属性设置到Servlet环境中，摘抄源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">this</span>.context);</div></pre></td></tr></table></figure></p>
<p>WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE的值，在上面WebApplicationContext的源码中的第一个常量中就被声明，是WebApplicationContext.class.getName() + “.ROOT”，更直接一点，它是“org.springframework.web.context.WebApplicationContext.ROOT”。ContextLoaderListener所初始化的这个Spring容器上下文，被称为根上下文。</p>
<p>SpringMVC在DispatcherServlet的初始化过程中，同样会初始化一个WebApplicationContext的实现类，作为自己独有的上下文，这个独有的上下文，会将上面的根上下文作为自己的父上下文，来存放SpringMVC的配置元素，然后同样作为ServletContext的一个属性，被设置到ServletContext中，只不过它的key就稍微有点不同，key和具体的DispatcherServlet注册在web.xml文件中的名字有关，从这一点也决定了，我们可以在web.xml文件中注册多个DispatcherServlet，因为Servlet容器中注册的Servlet名字肯定不一样，设置到Servlet环境中的key也肯定不同。</p>
<p>由于在Spring容器中，子上下文可以访问到所有父上下文中的信息，而父上下文访问不到子上下文的信息，这个根上下文，就很适合作为多个子上下文配置的集中点。</p>
<p><strong>3.前端控制器</strong></p>
<p>前端控制器，即所谓的Front Controller，体现的是设计模式中的前端控制器模式。前端控制器处理所有从用户过来的请求。所有用户的请求都要通过前端控制器。SpringMVC框架和其他请求驱动的表示层框架一样，也是围绕一个将请求分发到相应控制器的核心Servlet来设计的。DispatcherServlet和其他框架中的Servlet不一样的地方在于，它和Spring容器无缝整合在了一起，因此你可以在SpringMVC中使用Spring容器所有的特性。</p>
<p>整个流程可以被大致描述为：一个http请求到达服务器，被DispatcherServlet接收。DispatcherServlet将请求委派给合适的处理器Controller，此时处理控制权到达Controller对象。Controller内部完成请求的数据模型的创建和业务逻辑的处理，然后再将填充了数据后的模型即model和控制权一并交还给DispatcherServlet，委派DispatcherServlet来渲染响应。DispatcherServlet再将这些数据和适当的数据模版视图结合，向Response输出响应。</p>
<p>可以看到Model-View-Controller这三样东西协同合作，共同体现出MVC的设计理念，三个层次可以分别独立演化，整个系统架构又清晰又简洁。这是SpringMVC为我们描述的美好愿景，后面我们也将看到，SpringMVC为了实现这一承诺，究竟做出了什么样的努力。</p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> SpringMVC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DispatcherServlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC源码剖析（一）- 从抽象和接口说起]]></title>
      <url>http://itliusir.com/2017/frame-springmvc1/</url>
      <content type="html"><![CDATA[<p>摘要:SpringMVC作为Struts2之后异军突起的一个表现层框架，正越来越流行，相信javaee的开发者们就算没使用过SpringMVC，也应该对其略有耳闻。<br>我试图通过对SpringMVC的设计思想和源码实现的剖析，从抽象意义上的设计层面和实现意义上的代码层面两个方面，逐一揭开SpringMVC神秘的面纱，本文的代码，都是基于Spring的 3.1.3RELEASE版本。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>任何一个框架，都有自己特定的适用领域，框架的设计和实现，必定是为了应付该领域内许多通用的，烦琐的、基础的工作而生。SpringMVC作为一个表现层框架，也必须直面Web开发领域中表现层中的几大课题，并给出自己的回答：</p>
<p>URL到框架的映射。<br>http请求参数绑定<br>http响应的生成和输出<br>这三大课题，组成一个完整的web请求流程，每一个部分都具有非常广阔的外延。SpringMVC框架对这些课题的回答又是什么呢？</p>
<p>学习一个框架，首要的是要先领会它的设计思想。从抽象、从全局上来审视这个框架。其中最具有参考价值的，就是这个框架所定义的核心接口。核心接口定义了框架的骨架，也在最抽象的意义上表达了框架的设计思想。</p>
<p>下面我以一个web请求流程为载体，依次介绍SpringMVC的核心接口和类。</p>
<p>用户在浏览器中，输入了<a href="http://www.xxxx.com/aaa/bbb.ccc的地址，回车后，浏览器发起一个http请求。请求到达你的服务器后，首先会被SpringMVC注册在web.xml中的前端转发器DispatcherServlet接收，DispatcherServlet是一个标准的Servlet，它的作用是接受和转发web请求到内部框架处理单元。" target="_blank" rel="external">http://www.xxxx.com/aaa/bbb.ccc的地址，回车后，浏览器发起一个http请求。请求到达你的服务器后，首先会被SpringMVC注册在web.xml中的前端转发器DispatcherServlet接收，DispatcherServlet是一个标准的Servlet，它的作用是接受和转发web请求到内部框架处理单元。</a></p>
<p>下面看一下第一个出现在你面前的核心接口，它是在org.springframework.web.servlet包中定义的HandlerMapping接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.web.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerMapping</span> </span>&#123;</div><div class="line"></div><div class="line">	String PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE = HandlerMapping.class.getName() + <span class="string">".pathWithinHandlerMapping"</span>;</div><div class="line"></div><div class="line">	String BEST_MATCHING_PATTERN_ATTRIBUTE = HandlerMapping.class.getName() + <span class="string">".bestMatchingPattern"</span>;</div><div class="line"></div><div class="line">	String INTROSPECT_TYPE_LEVEL_MAPPING = HandlerMapping.class.getName() + <span class="string">".introspectTypeLevelMapping"</span>;</div><div class="line"></div><div class="line">	String URI_TEMPLATE_VARIABLES_ATTRIBUTE = HandlerMapping.class.getName() + <span class="string">".uriTemplateVariables"</span>;</div><div class="line"></div><div class="line">	String PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE = HandlerMapping.class.getName() + <span class="string">".producibleMediaTypes"</span>;</div><div class="line"></div><div class="line">	<span class="function">HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了阅读方便，我去掉了源码中的注释，但是我强烈建议你一定要记得去阅读它，这样你才能从框架的设计者口中得到最准确的关于这个类或者接口的设计说明。类中定义的几个常量，我们先不去管它。关键在于这个接口中唯一的方法：</p>
<p>HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception;<br>这个方法就算对于一个java初学者来说，也很容易理解：它只有一个类型为HttpServletRequest的参数，throws Exception的声明表示它不处理任何类型的异常，HandlerExecutionChain是它的返回类型。</p>
<p>回到DispatcherServlet的处理流程，当DispatcherServlet接收到web请求后，由标准Servlet类处理方法doGet或者doPost，经过几次转发后，最终注册在DispatcherServlet类中的HandlerMapping实现类组成的一个List（有点拗口）会在一个循环中被遍历。以该web请求的HttpServletRequest对象为参数，依次调用其getHandler方法，第一个不为null的调用结果，将被返回。DispatcherServlet类中的这个遍历方法不长，贴一下，让大家有更直观的了解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Return the HandlerExecutionChain for this request.</div><div class="line">	 * &lt;p&gt;Tries all handler mappings in order.</div><div class="line">	 * <span class="doctag">@param</span> request current HTTP request</div><div class="line">	 * <span class="doctag">@return</span> the HandlerExecutionChain, or &lt;code&gt;null&lt;/code&gt; if no handler could be found</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">for</span> (HandlerMapping hm : <span class="keyword">this</span>.handlerMappings) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">				logger.trace(</div><div class="line">						<span class="string">"Testing handler map ["</span> + hm + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">			&#125;</div><div class="line">			HandlerExecutionChain handler = hm.getHandler(request);</div><div class="line">			<span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">return</span> handler;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>是的，第一步处理就这么简单的完成了。一个web请求经过处理后，会得到一个HandlerExecutionChain对象，这就是SpringMVC对URl映射给出的回答。需要留意的是，HandlerMapping接口的getHandler方法参数是HttpServletRequest，这意味着，HandlerMapping的实现类可以利用HttpServletRequest中的 所有信息来做出这个HandlerExecutionChain对象的生成”决策“。这包括，请求头、url路径、cookie、session、参数等等一切你从一个web请求中可以得到的任何东西（最常用的是url路径）。</p>
<p>SpirngMVC的第一个扩展点，就出现在这里。我们可以编写任意的HandlerMapping实现类，依据任何策略来决定一个web请求到HandlerExecutionChain对象的生成。可以说，从第一个核心接口的声明开始，SpringMVC就把自己的灵活性和野心暴露无疑：哥玩的就是”Open-Closed“。</p>
<p>HandlerExecutionChain这个类，就是我们下一个要了解的核心类。从名字可以直观的看得出，这个对象是一个执行链的封装。熟悉Struts2的都知道，Action对象也是被层层拦截器包装，这里可以做个类比，说明SpringMVC确实是吸收了Struts2的部分设计思想。</p>
<p>HandlerExecutionChain类的代码不长，它定义在org.springframework.web.servlet包中，为了更直观的理解，先上代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.web.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Object handler;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> HandlerInterceptor[] interceptors;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> List&lt;HandlerInterceptor&gt; interceptorList;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HandlerExecutionChain</span><span class="params">(Object handler)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>(handler, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HandlerExecutionChain</span><span class="params">(Object handler, HandlerInterceptor[] interceptors)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerExecutionChain) &#123;</div><div class="line">			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler;</div><div class="line">			<span class="keyword">this</span>.handler = originalChain.getHandler();</div><div class="line">			<span class="keyword">this</span>.interceptorList = <span class="keyword">new</span> ArrayList&lt;HandlerInterceptor&gt;();</div><div class="line">			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), <span class="keyword">this</span>.interceptorList);</div><div class="line">			CollectionUtils.mergeArrayIntoCollection(interceptors, <span class="keyword">this</span>.interceptorList);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">this</span>.handler = handler;</div><div class="line">			<span class="keyword">this</span>.interceptors = interceptors;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.handler;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptor</span><span class="params">(HandlerInterceptor interceptor)</span> </span>&#123;</div><div class="line">		initInterceptorList();</div><div class="line">		<span class="keyword">this</span>.interceptorList.add(interceptor);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(HandlerInterceptor[] interceptors)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (interceptors != <span class="keyword">null</span>) &#123;</div><div class="line">			initInterceptorList();</div><div class="line">			<span class="keyword">this</span>.interceptorList.addAll(Arrays.asList(interceptors));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initInterceptorList</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.interceptorList == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.interceptorList = <span class="keyword">new</span> ArrayList&lt;HandlerInterceptor&gt;();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.interceptors != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.interceptorList.addAll(Arrays.asList(<span class="keyword">this</span>.interceptors));</div><div class="line">			<span class="keyword">this</span>.interceptors = <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> HandlerInterceptor[] getInterceptors() &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.interceptors == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.interceptorList != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.interceptors = <span class="keyword">this</span>.interceptorList.toArray(<span class="keyword">new</span> HandlerInterceptor[<span class="keyword">this</span>.interceptorList.size()]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.interceptors;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handler == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">"HandlerExecutionChain with no handler"</span>;</div><div class="line">		&#125;</div><div class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">		sb.append(<span class="string">"HandlerExecutionChain with handler ["</span>).append(<span class="keyword">this</span>.handler).append(<span class="string">"]"</span>);</div><div class="line">		<span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="keyword">this</span>.interceptorList)) &#123;</div><div class="line">			sb.append(<span class="string">" and "</span>).append(<span class="keyword">this</span>.interceptorList.size()).append(<span class="string">" interceptor"</span>);</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.interceptorList.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">				sb.append(<span class="string">"s"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>乱七八糟一大堆，相信你也没全看完，也没必要全看。其实只需要看两行足矣。<br>private final Object handler;</p>
<pre><code>private HandlerInterceptor[] interceptors;
</code></pre><p>不出我们所料，一个实质执行对象，还有一堆拦截器。这不就是Struts2中的实现么，SpringMVC没有避嫌，还是采用了这种封装。得到HandlerExecutionChain这个执行链（execution chain）之后，下一步的处理将围绕其展开。</p>
<p>HandlerInterceptor也是SpringMVC的核心接口，定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.web.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></div><div class="line">	    <span class="keyword">throws</span> Exception;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(</span></span></div><div class="line">			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</div><div class="line">			<span class="keyword">throws</span> Exception;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(</span></span></div><div class="line">			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</div><div class="line">			<span class="keyword">throws</span> Exception;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，HandlerExecutionChain整个执行脉络也就清楚了：在真正调用其handler对象前，HandlerInterceptor接口实现类组成的数组将会被遍历，其preHandle方法会被依次调用，然后真正的handler对象将被调用。</p>
<p>handler对象被调用后，就生成了需要的响应数据，在将处理结果写到HttpServletResponse对象之前（SpringMVC称为渲染视图），其postHandle方法会被依次调用。视图渲染完成后，最后afterCompletion方法会被依次调用，整个web请求的处理过程就结束了。</p>
<p>在一个处理对象执行之前，之后利用拦截器做文章，这已经成为一种经典的框架设计套路。Struts2中的拦截器会做诸如参数绑定这类复杂的工作，那么SpringMVC的拦截器具体做些什么呢？我们暂且不关心，虽然这是很重要的细节，但细节毕竟是细节，我们先来理解更重要的东西。</p>
<p>HandlerInterceptor，是SpringMVC的第二个扩展点的暴露，通过自定义拦截器，我们可以在一个请求被真正处理之前、请求被处理但还没输出到响应中、请求已经被输出到响应中之后这三个时间点去做任何我们想要做的事情。Struts2框架的成功，就是源于这种拦截器的设计，SpringMVC吸收了这种设计思想，并推陈出新，更合理的划分了三个不同的时间点，从而给web请求处理这个流程，提供了更大的扩展性。</p>
<p>这个HandlerExecutionChain类中以Object引用所声明的handler对象，到底是个什么东东？它是怎么被调用的？</p>
<p>回答这些问题之前，先看SpringMVC中的又一个核心接口，HandlerAdapter：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.web.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span></span>; </div><div class="line"></div><div class="line">	<span class="function">ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest request, Object handler)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在DispatcherServlet中，除了HandlerMapping实现类的列表，同样也注册了一个HandlerAdapter实现类组成的列表，有代码为证。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** List of HandlerMappings used by this servlet */</span></div><div class="line">	<span class="keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;</div><div class="line"></div><div class="line">	<span class="comment">/** List of HandlerAdapters used by this servlet */</span></div><div class="line">	<span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;</div><div class="line">接下来，我们再以DispatcherServlet类中另外一段代码来回答上述的问题：</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">	 * Return the HandlerAdapter for this handler object.</div><div class="line">	 * <span class="doctag">@param</span> handler the handler object to find an adapter for</div><div class="line">	 * <span class="doctag">@throws</span> ServletException if no HandlerAdapter can be found for the handler. This is a fatal error.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		<span class="keyword">for</span> (HandlerAdapter ha : <span class="keyword">this</span>.handlerAdapters) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">				logger.trace(<span class="string">"Testing handler adapter ["</span> + ha + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (ha.supports(handler)) &#123;</div><div class="line">				<span class="keyword">return</span> ha;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"No adapter for handler ["</span> + handler +</div><div class="line">				<span class="string">"]: Does your handler implement a supported interface like Controller?"</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码已经很明显了，HandlerExecutionChain中的handler对象会被作为参数传递进去，在DispatcherServlet类中注册的HandlerAdapter实现类列表会被遍历，然后返回第一个supports方法返回true的HandlerAdapter对象，用这个HandlerAdapter实现类中的handle方法处理handler对象，并返回ModelAndView这个包含了视图和数据的对象。HandlerAdapter就是SpringMVC提供的第三个扩展点，你可以提供自己的实现类来处理handler对象。</p>
<p>ModelAndView对象的代码就不贴了，它是SpringMVC中对视图和数据的一个聚合类。其中的视图，就是由SpringMVC的最后一个核心接口View所抽象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.web.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">	String RESPONSE_STATUS_ATTRIBUTE = View.class.getName() + <span class="string">".responseStatus"</span>;</div><div class="line"></div><div class="line">	String PATH_VARIABLES = View.class.getName() + <span class="string">".pathVariables"</span>;</div><div class="line"></div><div class="line">	<span class="function">String <span class="title">getContentType</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所有的数据，最后会作为一个Map对象传递到View实现类中的render方法，调用这个render方法，就完成了视图到响应的渲染。这个View实现类，就是来自HandlerAdapter中的handle方法的返回结果。当然从ModelAndView到真正的View实现类有一个解析的过程，ModelAndView中可以有真正的视图对象，也可以只是有一个视图的名字，SpringMVC会负责将视图名称解析为真正的视图对象。</p>
<p>至此，我们了解了一个典型的完整的web请求在SpringMVC中的处理过程和其中涉及到的核心类和接口。</p>
<p>在一个典型的SpringMVC调用中，HandlerExecutionChain中封装handler对象就是用@Controller注解标识的类的一个实例，根据类级别和方法级别的@RequestMapping注解，由默认注册的DefaultAnnotationHandlerMapping（3.1.3中更新为RequestMappingHandlerMapping类，但是为了向后兼容，DefaultAnnotationHandlerMapping也可以使用）生成HandlerExecutionChain对象，再由AnnotationMethodHandlerAdapter（3.1.3中更新为RequestMappingHandlerAdapter类，但是为了向后兼容，AnnotationMethodHandlerAdapter也可以使用）来执行这个HandlerExecutionChain对象，生成最终的ModelAndView对象后，再由具体的View对象的render方法渲染视图。</p>
<p>可以看到，作为一个表现层框架，SpringMVC没有像Struts2那样激进，并没有采用和Web容器完全解耦的设计思想，而是以原生的Servlet框架对象为依托，通过合理的抽象，制定了严谨的的处理流程。这样做的结果是，执行效率比Struts2要高，灵活性也上升了一个层次。</p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> SpringMVC </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringMVC源码剖析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java持久层框架mybatis如何防止sql注入]]></title>
      <url>http://itliusir.com/2017/frame-mybatis-sql/</url>
      <content type="html"><![CDATA[<p>摘要:sql注入大家都不陌生，是一种常见的攻击方式，攻击者在界面的表单信息或url上输入一些奇怪的sql片段，<br>例如”or ‘1’=’1’”这样的语句，有可能入侵参数校验不足的应用程序。所以在我们的应用中需要做一些工作，来防备这样的攻击方式。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>sql注入大家都不陌生，是一种常见的攻击方式，攻击者在界面的表单信息或url上输入一些奇怪的sql片段，例如”or ‘1’=’1’”这样的语句，有可能入侵参数校验不足的应用程序。所以在我们的应用中需要做一些工作，来防备这样的攻击方式。在一些安全性很高的应用中，比如银行软件，经常使用将sql语句全部替换为存储过程这样的方式，来防止sql注入，这当然是一种很安全的方式，但我们平时开发中，可能不需要这种死板的方式。<br>mybatis框架作为一款半自动化的持久层框架，其sql语句都要我们自己来手动编写，这个时候当然需要防止sql注入。其实Mybatis的sql是一个具有“输入+输出”功能，类似于函数的结构，如下：<br>&lt;select id=”getBlogById” resultType=”Blog”<br>parameterType=”int”&gt;<br>       select id,title,author,content<br>       from blog where id=#{id}<br>    &lt;/select&gt;<br>这里，parameterType标示了输入的参数类型，resultType标示了输出的参数类型。回应上文，如果我们想防止sql注入，理所当然地要在输入参数上下功夫。上面代码中高亮部分即输入参数在sql中拼接的部分，传入参数后，打印出执行的sql语句，会看到sql是这样的：<br>select<br>id,title,author,content from blog where id = ?<br>不管输入什么参数，打印出的sql都是这样的。这是因为mybatis启用了预编译功能，在sql执行前，会先将上面的sql发送给数据库进行编译，执行时，直接使用编译好的sql，替换占位符“？”就可以了。因为sql注入只能对编译过程起作用，所以这样的方式就很好地避免了sql注入的问题。<br>mybatis是如何做到sql预编译的呢？其实在框架底层，是jdbc中的PreparedStatement类在起作用，PreparedStatement是我们很熟悉的Statement的子类，它的对象包含了编译好的sql语句。这种“准备好”的方式不仅能提高安全性，而且在多次执行一个sql时，能够提高效率，原因是sql已编译好，再次执行时无需再编译。<br>话说回来，是否我们使用mybatis就一定可以防止sql注入呢？当然不是，请看下面的代码：<br>&lt;select id=”orderBlog” resultType=”Blog”<br>parameterType=”map”&gt;<br>       select id,title,author,content<br>       from blog order by ${orderParam}<br>    &lt;/select&gt;<br>仔细观察，内联参数的格式由”#{xxx}”变为了${xxx}。如果我们给参数”orderParam”赋值为”id”,将sql打印出来，是这样的：<br>select id,title,author,content from<br>blog order by id<br>     显然，这样是无法阻止sql注入的。在mybatis中，”${xxx}”这样格式的参数会直接参与sql编译，从而不能避免注入攻击。但涉及到动态表名和列名时，只能使用”${xxx}”这样的参数格式，所以，这样的参数需要我们在代码中手工进行处理来防止注入。<br>    结论：在编写mybatis的映射语句时，尽量采用”#{xxx}”这样的格式。若不得不使用“${xxx}”这样的参数，要手工地做好过滤工作，来防止sql注入攻击。</p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
            <category> mybatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ThreadLocal 内存泄漏问题分析]]></title>
      <url>http://itliusir.com/2017/javase-ThreadLocal/</url>
      <content type="html"><![CDATA[<p>摘要:ThreadLocal 的作用是提供线程内的局部变量，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度。<br>但是如果滥用ThreadLocal，就可能会导致内存泄漏。下面，我们将围绕三个方面来分析ThreadLocal 内存泄漏的问题<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>ThreadLocal的实现是这样的：每个Thread 维护一个 ThreadLocalMap 映射表，这个映射表的 key 是 ThreadLocal实例本身，value 是真正需要存储的 Object。</p>
<p>也就是说 ThreadLocal 本身并不存储值，它只是作为一个 key 来让线程从 ThreadLocalMap 获取 value。值得注意的是图中的虚线，表示 ThreadLocalMap 是使用 ThreadLocal 的弱引用作为 Key 的，弱引用的对象在 GC 时会被回收。</p>
<p>#ThreadLocal为什么会内存泄漏</p>
<p>ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部强引用来引用它，那么系统 GC 的时候，这个ThreadLocal势必会被回收，这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，如果当前线程再迟迟不结束的话，这些key为null的Entry的value就会一直存在一条强引用链：Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value永远无法回收，造成内存泄漏。</p>
<p>其实，ThreadLocalMap的设计中已经考虑到这种情况，也加上了一些防护措施：在ThreadLocal的get(),set(),remove()的时候都会清除线程ThreadLocalMap里所有key为null的value。</p>
<p>但是这些被动的预防措施并不能保证不会内存泄漏：</p>
<p>使用static的ThreadLocal，延长了ThreadLocal的生命周期，可能导致的内存泄漏。<br>分配使用了ThreadLocal又不再调用get(),set(),remove()方法，那么就会导致内存泄漏。</p>
<p>##为什么使用弱引用</p>
<p>从表面上看内存泄漏的根源在于使用了弱引用。网上的文章大多着重分析ThreadLocal使用了弱引用会导致内存泄漏，但是另一个问题也同样值得思考：为什么使用弱引用而不是强引用？</p>
<p>我们先来看看官方文档的说法：</p>
<p>To help deal with very large and long-lived usages, the hash table entries use WeakReferences for keys.<br>为了应对非常大和长时间的用途，哈希表使用弱引用的 key。</p>
<p>下面我们分两种情况讨论：</p>
<p>key 使用强引用：引用的ThreadLocal的对象被回收了，但是ThreadLocalMap还持有ThreadLocal的强引用，如果没有手动删除，ThreadLocal不会被回收，导致Entry内存泄漏。<br>key 使用弱引用：引用的ThreadLocal的对象被回收了，由于ThreadLocalMap持有ThreadLocal的弱引用，即使没有手动删除，ThreadLocal也会被回收。value在下一次ThreadLocalMap调用set,get，remove的时候会被清除。<br>比较两种情况，我们可以发现：由于ThreadLocalMap的生命周期跟Thread一样长，如果都没有手动删除对应key，都会导致内存泄漏，但是使用弱引用可以多一层保障：弱引用ThreadLocal不会内存泄漏，对应的value在下一次ThreadLocalMap调用set,get,remove的时候会被清除。</p>
<p>因此，ThreadLocal内存泄漏的根源是：由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用。</p>
<p>#ThreadLocal 最佳实践</p>
<p>综合上面的分析，我们可以理解ThreadLocal内存泄漏的前因后果，那么怎么避免内存泄漏呢？</p>
<p>每次使用完ThreadLocal，都调用它的remove()方法，清除数据。<br>在使用线程池的情况下，没有及时清理ThreadLocal，不仅是内存泄漏的问题，更严重的是可能导致业务逻辑出现问题。所以，使用ThreadLocal就跟加锁完要解锁一样，用完就清理。</p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ThreadLocal </tag>
            
            <tag> 内存泄露 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java endorsed]]></title>
      <url>http://itliusir.com/2017/javase-endorsed/</url>
      <content type="html"><![CDATA[<p>摘要:endorsed:可以的简单理解为-Djava.endorsed.dirs指定的目录面放置的jar文件，将有覆盖系统API的功能<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>今天突然看到这样的一个面试题：能否自已写个类也叫java.lang.String？能否自已写个类也叫java.util.ArrayList？<br>第一个问题，答案相对简单：<br>自己定义java.lang.String类语法上没有错误，但由于JVM类加载器的父委托机制，JVM只会加载jre.jar中的java.lang.String。<br>如果调用自定义String类中方法，会出现三种情况：<br>1&gt;调用的方法在jdk中String类中存在，将不会报错也没有任务影响，并且执行的是jdk中的String类方法；<br>2&gt;调用的方法在jdk中String类中不存在，但在自定义String中存在，将抛出java.lang.NoSuchMethodError异常。<br>3&gt;调用的方法在jdk中String类中存在，但在自定义String中不存在，编辑出错，运行抛出java.lang.Error: Unresolved compilation problem</p>
<p>第二个问题，虽然也存在类加载的问题，但是java提供了endorsed技术：<br>关于endorsed：可以的简单理解为-Djava.endorsed.dirs指定的目录面放置的jar文件，将有覆盖系统API的功能。可以牵强的理解为，将自己修改后的API打入到虚拟机指定的启动API中，取而代之。但是能够覆盖的类是有限制的，其中不包括java.lang包中的类。</p>
<p>注意：<br>1&gt;endorsed目录：.[jdk安装目录]./jre/lib/endorsed，不是jdk/lib/endorsed，目录中放的是Jar包，不是.java或.class文件，哪怕只重写了一个类也要打包成jar包。<br>2&gt;可以在dos模式查看修改后的效果(javac、java)，在eclipse需要将运行选项中的JRE栏设置为jre(若设置为jdk将看不到效果)。<br>3&gt;重写的类必须满足jdk中的规范，例如：自定义的ArrayList类也必须实现List等接口。</p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> endorsed </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java内存管理以及内存泄露]]></title>
      <url>http://itliusir.com/2017/javase-memory-leak/</url>
      <content type="html"><![CDATA[<p>摘要:Java的一个重要优点就是通过垃圾收集器(Garbage Collection，GC)自动管理内存的回收，程序员不需要通过调用函数来释放内存。<br>因此，很多程序员认为Java不存在内存泄漏问题，或者认为即使有内存泄漏也不是程序的责任，而是GC或JVM的问题。其实，这种想法是不正确的，<br>因为Java也存在内存泄露，但它的表现与C++不同。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>java和c++相比重要优点就是通过垃圾收集器(Garbage Collection，GC)自动管理内存的回收，程序员不需要通过调用函数来释放内存。这样的优点也会害了一部分学而不精的人。因为，很多程序员认为Java有垃圾回收机制，因此不存在内存泄漏问题，或者认为即使有内存泄漏也不是程序的责任，而是GC或JVM的问题。其实，这种想法是不正确的，因为Java也存在内存泄露，但它的表现与C++不同。<br>使用java开发的jsp，servlet等程序众多，成千上万的服务器在运行着java。而且这些程序都是长期运行的，因此内存泄露问题也就变得十分关键，即使每次运行少量泄漏，长期运行之后，系统也是面临崩溃的危险。Java的内存管理就是对象的分配和释放问题。内存的分配需要通过关键字new为每个对象申请内存空间 (基本类型除外)，所有的对象都在堆 (Heap)中分配空间。对象的释放是由GC决定和执行的。这样的设计确实简化了程序员的工作。但同时，它也加重了JVM的工作。这也是编写低劣的Java程序运行速度较慢大量消耗系统资源的原因之一。因为，GC为了能够正确释放对象，GC必须监控每一个对象的运行状态，包括对象的申请、引用、被引用、赋值等，GC都需要进行监控。监视对象状态是为了更加准确地、及时地释放对象，而释放对象的根本原则就是该对象不再被引用。<br>java中内存泄露的对象有两个显著的特点。首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；其次，这些对象是无用的，即程序以后不会再使用这些对象。如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。GC基本是透明的，不可见的。虽然我们可以运行GC的函数System.gc()，但是根据Java语言规范定义，该函数不保证JVM的垃圾收集器一定会执行。因为，不同的JVM实现者可能使用不同的算法管理GC。通常，GC的线程的优先级别较低。<br>当前最为常见同时又容易被熟视无睹的Java应用内存泄露情景如下：<br>在JDK1.6及以下版本中，如果存在如下类似的代码，那么你想也不要想，100%内存泄露，<br>String str1=new String(“123456789”);<br>str1=str1.subString(2);<br>或<br>String str1=”123456789”;<br>str1=str1.substring(2);<br>相类似上面这种对字符串对象的处理，在日常的应用开发中，可以说比比皆是，但是正是在这样的情况下，内存泄露却实实在在的隐蔽的发生了，这种情况通常在一个应用系统中会有很多，这些积累下来就会泄漏大量内存。不管你是通过对象定义也好、常量定义也好、还是通过方法调用获取一个字符串结果对象也好，只要你直接在这些对象上进行字符串截取，就发生了泄漏。泄漏内存的多少，取决于你的字符串的大小。为什么会这样，原因如下：<br>在JDK1.6及以下版本中，String类的substring方法的实现中，最后在返回结果时的实现如下：<br>return ((beginIndex==0)&amp;&amp;(endIndex==count))?this:new String(offset+beginIndex,endIndex-beginIndex,value);<br>问题出在new String(offset+beginIndex,endIndex-beginIndex,value)的实现，如下：<br>String(int offset,int count,char[] value){<br>this.value=value;<br>this.count=count;<br>this.offset=offset;<br>}<br>String对象中的字符串在具体实现中，被存储在字符数组char[] value中，而在上述的实现中char[] value数组实际上被共享了，即我们对字符串对象的截取，都是通过移动存储字符串值的字符数据的索引下标和偏移量实现的，而字符数组是类变量，会对所有实例所有实例可达，那么在截取后，被截取的字符组成的部分字符数组以至于被共享的整体字符数组在JVM Heap中无法被释放，内存出现了泄漏。我想Java这样设计的初衷，是想通过字符数组共享，达到节省内存消耗的目的，但弄巧成拙出现了内存泄露，这也要引起个开发人员的注意，Sun的Java实现尚且如此，各位的开发实现更要小心加小心，Java并不是免费的午餐。这个问题在JDK1.6及以下版本中可以通过如下方式避免：<br>String str1=new String(“123456789”);<br>str1=new String(str1.subString(2));<br>思路很简单，将截取后对象变成新对象，解除截取后对象对字符数组的共享依赖，进而避免内存泄漏。上述的问题直到JDK1.7才被彻底修复，也就是说，如果是JDK1.7之下的版本开发的应用系统，如果存在上述的写法，一定会内存泄漏，应该采用上面的策略修复；如果是JDK1.7及其之上的版本上述的问题写法是没有问题的。鉴于目前JDK1.6是主流JDK应用，上述问题我认为会大面积的存在。</p>
]]></content>
      
        <categories>
            
            <category> JavaSE </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 内存泄露 </tag>
            
            <tag> Java内存管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于SpringBoot bean无法注入的问题]]></title>
      <url>http://itliusir.com/2017/Springboot1/</url>
      <content type="html"><![CDATA[<p>摘要:Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>今天初次使用springboot搭建了Demo，联合mybatis时候(因为连接数据库需要创建vo层)出现bean无法导入的问题。网上谷歌了下后来找到了一个很容易忽视的原因。<br>这个是我的包结构，注意Application的位置，刚开始我并没有放在现在这个位置，而是和bean以及接口UserMapper是平行的包下。然后就报了Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}<br>这个错</p>
<p>关于SpringBoot <wbr>bean无法注入的问题<br>将Application放在了最外层的包才解决问题。</p>
<p>原因是：SpringBoot项目的Bean装配默认规则是根据Application类所在的包位置从上往下扫描！<br>所以一定要放在最外层！</p>
]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
            <category> Springboot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker在Ubuntu下私服搭建]]></title>
      <url>http://itliusir.com/2017/Docker-registry/</url>
      <content type="html"><![CDATA[<p>摘要:docker同maven一样，虽然有中央仓库，但是都不是国内的下载速度较慢影响开发进度（当然maven可以配置阿里云的镜像速度很快）。<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>一、我们希望构建和存储包含不想被公开的信息或数据的镜像。这个时候我们有以下两种选择：<br>1.利用docker hub上的私有仓库。（下载速度较慢不适合企业开发）<br>2.在防火墙后面运行自己的Registry(如开发环境的内网)。<br>二、从Docker容器安装一个Registry非常简单，运行docker提供的容器即可。</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run -p 5000:5000 registry:2</div></pre></td></tr></table></figure>
<p>说明：若之前没有安装registry容器则会自动下载并启动一个registry容器，创建本地的私有仓库服 务。<br>三、接下来需要为镜像打上标签：<br>例如hello-world<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker tag hello-world localhost:5000/hello-world</div></pre></td></tr></table></figure></p>
<p>然后doker images则会看到：localhost:5000/hello-world这个镜像<br>四、随后我们将此镜像push到registry<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker push localhost:5000/hello-world</div></pre></td></tr></table></figure></p>
<p>五、最后可以通过访问<a href="http://ip:port/v2/hello-world/tags/list来查看返回的json串是否存在hello-world" target="_blank" rel="external">http://ip:port/v2/hello-world/tags/list来查看返回的json串是否存在hello-world</a><br>六、同样，客户端则是通过：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker pull ip:5000/hello-world来获取镜像到本地</div></pre></td></tr></table></figure></p>
<p>以上是一个大概的安装过程，网上都有，重要的是一些碰到的bug需要配置一些东西（版本不同配置也不同，本人是docker version：1.12.1  registry version:v2）<br>bug1：Error response from daemon: Get <a href="https://IP:5000/v1/_ping" target="_blank" rel="external">https://IP:5000/v1/_ping</a>: http: server gave HTTP response to HTTPS client<br>解决方案：echo ‘{ “insecure-registries”:[“你的IP:5000”] }’ /etc/docker/daemon.json<br>cat /etc/docker/daemon.json { “insecure-registries”:[“你的IP:5000”] }<br>然后重启daemon<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sodo /etc/init.d/docker restart</div></pre></td></tr></table></figure></p>
<p>   来获取镜像到本地<br>随后会一直更新….</p>
]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker私服 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker介绍]]></title>
      <url>http://itliusir.com/2017/Docker-info/</url>
      <content type="html"><![CDATA[<p>摘要:Docker是一个用于开发、交付和运行应用的开放平台<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><h2 id="Docker概览"><a href="#Docker概览" class="headerlink" title="Docker概览"></a>Docker概览</h2><p>Docker是一个用于开发、交付和运行应用的开放平台，Docker被设计用于更快地交付应用。Docker可以将应用程序和基础设施层隔离，并且可以将基础设施当作程序一样进行管理。使用Docker，可以更快地打包代码、测试以及部署，并且可以减少从编写到部署运行代码的周期。</p>
<p>Docker将内核容器特性（LXC）、工作流和工具集成，以帮助管理和部署应用。</p>
<h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>核心是，Docker了一种在安全隔离的容器中运行近乎所有应用的方式，这种隔离性和安全性允许你在同一个主机上同时运行多个容器，而容器的这种轻量级特性，无需消耗运行hpervisor所需的额外负载，意味着你可以节省更多的硬件资源。</p>
<p>基于容器虚拟化的工具或平台可提供：</p>
<ul>
<li>将应用（包括支撑组件）放入Docker容器中</li>
<li>分发和交付这些容器给团队，便于后续的开发和测试</li>
<li>将容器部署到生产环境中，生产环境可以是本地的数据中心，也可以在云端。</li>
</ul>
<p>自从上世纪 90 年代硬件虚拟化被主流的技术广泛普及之后，对数据中心而言，发生的最大的变革莫过于容器和容器管理工具，例如：Docker。在过去的一年内，Docker 技术已经逐渐走向成熟，并且推动了大型初创公司例如 Twitter 和 Airbnb 的发展，甚至在银行、连锁超市、甚至 NASA 的数据中心都赢得了一席之地。当我几年前第一次直到 Docker 的时候，我还对 Docker 的未来持怀疑的态度，我认为他们是把以前的 Linux 容器的概念拿出来包装了一番推向市场。但是使用 Docker 成功进行了几个项目 例如 Spantree 之后，我改变了我的看法：Docker 帮助我们节省了大量的时间和经历，并且已经成为我们技术团队中不可或缺的工具。<br>GitHub 上面每天都会催生出各式各样的工具、形态各异的语言和千奇百怪的概念。如果你和我一样，没有时间去把他们全部都测试一遍，甚至没有时间去亲自测试 Docker，那么你可以看一下我的这篇文章：我将会用我们在 Docker 中总结的经验来告诉你什么是 Docker、为什么 Docker 会这么火。</p>
<p><strong>Docker 是容器管理工具</strong><br>Docker 是一个轻量级、便携式、与外界隔离的容器，也是一个可以在容器中很方便地构建、传输、运行应用的引擎。和传统的虚拟化技术不同的是，Docker 引擎并不虚拟出一台虚拟机，而是直接使用宿主机的内核和硬件，直接在宿主机上运行容器内应用。也正是得益于此，Docker 容器内运行的应用和宿主机上运行的应用性能差距几乎可以忽略不计。<br>但是 Docker 本身并不是一个容器系统，而是一个基于原有的容器化工具 LXC 用来创建虚拟环境的工具。类似 LXC 的工具已经在生产环境中使用多年，Docker 则基于此提供了更加友好的镜像管理工具和部署工具。</p>
<p><strong>Docker 不是虚拟化引擎</strong><br>Docker 第一次发布的时候，很多人都拿 Docker 和虚拟机 VMware、KVM 和 VirtualBox 比较。尽管从功能上看，Docker 和虚拟化技术致力于解决的问题都差不多，但是 Docker 却是采取了另一种非常不同的方式。虚拟机是虚拟出一套硬件，虚拟机的系统进行的磁盘操作，其实都是在对虚拟出来的磁盘进行操作。当运行 CPU 密集型的任务时，是虚拟机把虚拟系统里的 CPU 指令“翻译”成宿主机的CPU指令并进行执行。两个磁盘层，两个处理器调度器，两个操作系统消耗的内存，所有虚拟出的这些都会带来相当多的性能损失，一台虚拟机所消耗的硬件资源和对应的硬件相当，一台主机上跑太多的虚拟机之后就会过载。而 Docker 就没有这种顾虑。Docker 运行应用采取的是“容器”的解决方案：使用 namespace 和 CGroup 进行资源限制，和宿主机共享内核，不虚拟磁盘，所有的容器磁盘操作其实都是对 /var/lib/docker/ 的操作。简言之，Docker 其实只是在宿主机中运行了一个受到限制的应用程序。<br>从上面不难看出，容器和虚拟机的概念并不相同，容器也并不能取代虚拟机。在容器力所不能及的地方，虚拟机可以大显身手。例如：宿主机是 Linux，只能通过虚拟机运行 Windows，Docker 便无法做到。再例如，宿主机是 Windows，Windows 并不能直接运行 Docker，Windows上的 Docker 其实是运行在 VirtualBox 虚拟机里的。</p>
<p><strong>Docker 使用层级的文件系统</strong><br>前面提到过，Docker 和现有容器技术 LXC 等相比，优势之一就是 Docker 提供了镜像管理。对于 Docker 而言，镜像是一个静态的、只读的容器文件系统的快照。然而不仅如此，Docker 中所有的磁盘操作都是对特定的Copy-On-Write文件系统进行的。下面通过一个例子解释一下这个问题。<br>例如我们要建立一个容器运行 JAVA Web 应用，那么我们应该使用一个已经安装了 JAVA 的镜像。在 Dockerfile（一个用于生成镜像的指令文件）中，应该指明“基于 JAVA 镜像”，这样 Docker 就会去 Docker Hub Registry 上下载提前构建好的 JAVA 镜像。然后再 Dockerfile 中指明下载并解压 Apache Tomcat 软件到 /opt/tomcat 文件夹中。这条命令并不会对原有的 JAVA 镜像产生任何影响，而仅仅是在原有镜像上面添加了一个改动层。当一个容器启动时，容器内的所有改动层都会启动，容器会从第一层中运行 /usr/bin/java 命令，并且调用另外一层中的 /opt/tomcat/bin 命令。实际上，Dockerfile 中每一条指令都会产生一个新的改动层，即便只有一个文件被改动。如果用过 Git 就能更清楚地认识这一点，每条指令就像是每次 commit，都会留下记录。但是对于 Docker 来说，这种文件系统提供了更大的灵活性，也可以更方便地管理应用程序。<br>我们Spantree的团队有一个自己维护的含有 Tomcat 的镜像。发布新版本也非常简单：使用 Dockerfile 将新版本拷贝进镜像从而创建一个新镜像，然后给新镜像贴上版本的标签。不同版本的镜像的不同之处仅仅是一个 90 MB 大小的 WAR 文件，他们所基于的主镜像都是相同的。如果使用虚拟机去维护这些不同的版本的话，还要消耗掉很多不同的磁盘去存储相同的系统，而使用 Docker 就只需要很小的磁盘空间。即便我们同时运行这个镜像的很多实例，我们也只需要一个基础的 JAVA / TOMCAT 镜像。</p>
<p><strong>Docker 可以节约时间</strong><br>很多年前我在为一个连锁餐厅开发软件时，仅仅是为了描述如何搭建环境都需要写一个 12 页的 Word 文档。例如本地 Oracle 数据库，特定版本的 JAVA，以及其他七七八八的系统工具和共享库、软件包。整个搭建过程浪费掉了我们团队每个人几乎一天的时间，如果用金钱衡量的话，花掉了我们上万美金的时间成本。虽然客户已经对这种事情习以为常，甚至认为这是引入新成员、让成员适应环境、让自己的员工适应我们的软件所必须的成本，但是相比较起来，我们宁愿把更多的时间花在为客户构建可以增进业务的功能上面。<br>如果当时有 Docker，那么构建环境就会像使用自动化搭建工具 Puppet / Chef / Salt / Ansible 一样简单，我们也可以把整个搭建时间周期从一天缩短为几分钟。但是和这些工具不同的地方在于，Docker 可以不仅仅可以搭建整个环境，还可以将整个环境保存成磁盘文件，然后复制到别的地方。需要从源码编译 Node.js 吗？Docker 做得到。Docker 不仅仅可以构建一个 Node.js 环境，还可以将整个环境做成镜像，然后保存到任何地方。当然，由于 Docker 是一个容器，所以不用担心容器内执行的东西会对宿主机产生任何的影响。<br>现在新加入我们团队的人只需要运行 docker-compose up 命令，便可以喝杯咖啡，然后开始工作了。</p>
<p><strong>Docker 可以节省开销</strong><br>当然，时间就是金钱。除了时间外，Docker 还可以节省在基础设施硬件上的开销。高德纳和麦肯锡的研究表明，数据中心的利用率在 6% - 12% 左右。不仅如此，如果采用虚拟机的话，你还需要被动地监控和设置每台虚拟机的 CPU 硬盘和内存的使用率，因为采用了静态分区(static partitioning)所以资源并不能完全被利用。。而容器可以解决这个问题：容器可以在实例之间进行内存和磁盘共享。你可以在同一台主机上运行多个服务、可以不用去限制容器所消耗的资源、可以去限制资源、可以在不需要的时候停止容器，也不用担心启动已经停止的程序时会带来过多的资源消耗。凌晨三点的时候只有很少的人会去访问你的网站，同时你需要比较多的资源执行夜间的批处理任务，那么可以很简单的便实现资源的交换。<br>虚拟机所消耗的内存、硬盘、CPU 都是固定的，一般动态调整都需要重启虚拟机。而用 Docker 的话，你可以进行资源限制，得益于 CGroup，可以很方便动态调整资源限制，让然也可以不进行资源限制。Docker 容器内的应用对宿主机而言只是两个隔离的应用程序，并不是两个虚拟机，所以宿主机也可以自行去分配资源。</p>
<p>注：</p>
<blockquote>
<p> 部分翻译自：<a href="https://docs.docker.com/engine/understanding-docker/" target="_blank" rel="external">https://docs.docker.com/engine/understanding-docker/</a></p>
<p> 部分参考：<a href="http://zhidao.baidu.com/link?url=4FOwNhnpVC3FP0hOxaC4vrl3fFG27lWRpDEaZ3KJBVL0E29C5O-ty4zqze1On52Uk4kcNrnPd3VEKpKvRs4pNEV-lgo78lmP1_FXffMerdG" target="_blank" rel="external">http://zhidao.baidu.com/link?url=4FOwNhnpVC3FP0hOxaC4vrl3fFG27lWRpDEaZ3KJBVL0E29C5O-ty4zqze1On52Uk4kcNrnPd3VEKpKvRs4pNEV-lgo78lmP1_FXffMerdG</a></p>
</blockquote>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>Docker介绍：<a href="http://www.lupaworld.com/article-243555-1.html" target="_blank" rel="external">http://www.lupaworld.com/article-243555-1.html</a></p>
<p>Docker介绍：<a href="http://www.docker.org.cn/book/docker/what-is-docker-16.html" target="_blank" rel="external">http://www.docker.org.cn/book/docker/what-is-docker-16.html</a></p>
<p>Docker官方文档：<a href="https://docs.docker.com/engine/understanding-docker/" target="_blank" rel="external">https://docs.docker.com/engine/understanding-docker/</a></p>
<p>Docker中文文档：<a href="http://git.oschina.net/widuu/chinese_docker" target="_blank" rel="external">http://git.oschina.net/widuu/chinese_docker</a></p>
<p>Docker介绍：<a href="https://segmentfault.com/a/1190000002609286" target="_blank" rel="external">https://segmentfault.com/a/1190000002609286</a></p>
]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker的安装]]></title>
      <url>http://itliusir.com/2017/Docker-install/</url>
      <content type="html"><![CDATA[<p>摘要:Docker的安装<br><a id="more"></a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h2><p>Docker的安装是比较简单的，笔者原本不想过多提及；但是看到有不少读者对Docker的安装提出了疑问，故此进行一个安装的总结。</p>
<p>对于Linux用户可以借助其发行版的Linux包管理工具安装，对于Windows和MAC用户相对麻烦一些，笔者下面以Windows7系统为例，讲述安装过程。<strong>笔者强烈建议大家使用Linux系统进入本章的学习</strong>，第一是比较符合目前Docker的市场趋势，第二Docker本身就是基于Linux的LXC技术。</p>
<h2 id="CentOS-7-0下Docker的安装"><a href="#CentOS-7-0下Docker的安装" class="headerlink" title="CentOS 7.0下Docker的安装"></a>CentOS 7.0下Docker的安装</h2><ol>
<li><p>查看内核版本(Docker需要64位版本，同时内核版本在3.10以上，如果版本低于3.10，需要升级内核)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uname -r</div></pre></td></tr></table></figure>
</li>
<li><p>更新yum包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum update</div></pre></td></tr></table></figure>
</li>
<li><p>添加yum仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-&apos;EOF&apos;</div><div class="line">[dockerrepo]</div><div class="line">name=Docker Repository</div><div class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/7/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://yum.dockerproject.org/gpg</div><div class="line">EOF</div></pre></td></tr></table></figure>
</li>
<li><p>安装Docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install docker-engine</div></pre></td></tr></table></figure>
</li>
<li><p>启动Docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service docker start</div></pre></td></tr></table></figure>
</li>
<li><p>使用Docker国内镜像（为Docker镜像下载提速，非必须）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://fe8a7d6e.m.daocloud.io</div></pre></td></tr></table></figure>
</li>
</ol>
<p>参考：</p>
<blockquote>
<p>官方文档：<a href="https://docs.docker.com/engine/installation/linux/centos/" target="_blank" rel="external">https://docs.docker.com/engine/installation/linux/centos/</a></p>
</blockquote>
<h2 id="CentOS-6-5下Docker的安装"><a href="#CentOS-6-5下Docker的安装" class="headerlink" title="CentOS 6.5下Docker的安装"></a>CentOS 6.5下Docker的安装</h2><p>Docker容器最早受到RHEL完善的支持是从最近的CentOS 7.0开始的，官方说明是只能运行于64位架构平台，内核版本为2.6.32-431及以上（即 &gt;= CentOS 6.5，运行docker时实际提示3.10.0及以上）。<br>需要注意的是CentOS 6.5与7.0的安装是有一点点不同的，CentOS 6.x上Docker的安装包叫docker-io，并且来源于Fedora epel库，这个仓库维护了大量的没有包含在发行版中的软件，所以先要安装EPEL，而CentOS 7.x的Docker直接包含在官方镜像源的Extras仓库（CentOS-Base.repo下的[extras]节enable=1启用）。</p>
<p>下面就CentOS 6.5讲解Docker的安装过程，以下是软件版本：</p>
<table>
<thead>
<tr>
<th>Linux版本</th>
<th>Docker版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 6.5 X64（只能X64）</td>
<td>1.7.1</td>
</tr>
</tbody>
</table>
<h3 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h3><p>查看内核版本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uname -r</div></pre></td></tr></table></figure>
<p>结果：<code>2.6.32-431.el6.x86_64</code>，不满足上文的需求，故此需要升级内核。</p>
<p>升级步骤：</p>
<ol>
<li><p>导入公钥数字证书</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</div></pre></td></tr></table></figure>
</li>
<li><p>安装ELRepo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh http://www.elrepo.org/elrepo-release-6-5.el6.elrepo.noarch.rpm</div></pre></td></tr></table></figure>
</li>
<li><p>安装kernel长期版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum --enablerepo=elrepo-kernel install kernel-lt -y 	# lt表示long-term的意思，长期维护版本，也可以将kernel-lt改为kernel-ml，安装主线版本</div></pre></td></tr></table></figure>
</li>
<li><p>编辑grub.conf文件，修改Grub引导顺序，确认刚安装好的内核在哪个位置，然后设置default值（从0开始），一般新安装的内核在第一个位置，所以设置default=0。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim /etc/grub.conf</div><div class="line"></div><div class="line"># 以下是/etc/grub.conf的内容</div><div class="line">default=0		# 修改该值即可</div><div class="line">timeout=5</div><div class="line">splashimage=(hd0,0)/grub/splash.xpm.gz</div><div class="line">hiddenmenu</div><div class="line">title CentOS (3.10.103-1.el6.elrepo.x86_64)</div></pre></td></tr></table></figure>
</li>
<li><p>重启并查看内核版本，将会发现内核已经更新。</p>
</li>
</ol>
<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><ol>
<li><p>禁用selinux，因为selinux和LXC有冲突，故而需要禁用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vim /etc/selinux/config的内容</div><div class="line"></div><div class="line"># 以下是/etc/selinux/config的内容</div><div class="line">#     enforcing - SELinux security policy is enforced.</div><div class="line">#     permissive - SELinux prints warnings instead of enforcing.</div><div class="line">#     disabled - No SELinux policy is loaded.</div><div class="line">SELINUX=disabled  # 将SELINUX设为disabled，注意修改后最好重启下机器。</div></pre></td></tr></table></figure>
</li>
<li><p>安装 Fedora EPEL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure>
</li>
<li><p>安装Docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y docker-io</div></pre></td></tr></table></figure>
</li>
<li><p>以守护模式运行Docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker -d</div></pre></td></tr></table></figure>
</li>
<li><p>如果不报错，那就是启动成功了，如果报以下异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker: relocation error: docker: symbol dm_task_get_info_with_deferred_remove, version Base not defined in file libdevmapper.so.1.02 with link time reference</div><div class="line">INFO[0000] Listening for HTTP on unix (/var/run/docker.sock)</div></pre></td></tr></table></figure>
<p>执行以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum upgrade device-mapper-libs</div></pre></td></tr></table></figure>
</li>
<li><p>将Docker开机启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig docker on</div></pre></td></tr></table></figure>
</li>
<li><p>重启机器</p>
</li>
</ol>
<h2 id="其他平台的安装"><a href="#其他平台的安装" class="headerlink" title="其他平台的安装"></a>其他平台的安装</h2><p>请参考：<a href="https://docs.docker.com/engine/installation/" target="_blank" rel="external">https://docs.docker.com/engine/installation/</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<p>Windows：<a href="https://docs.docker.com/engine/installation/windows/" target="_blank" rel="external">https://docs.docker.com/engine/installation/windows/</a></p>
<p>MAC： <a href="https://docs.docker.com/engine/installation/mac/" target="_blank" rel="external">https://docs.docker.com/engine/installation/mac/</a></p>
<p>CentOS：<a href="https://docs.docker.com/engine/installation/linux/centos/" target="_blank" rel="external">https://docs.docker.com/engine/installation/linux/centos/</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 微服务 </category>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
